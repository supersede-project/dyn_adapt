[comment encoding = UTF-8 /]
[module serializeQualityAttributesOfEnabledFeature('zcu.cz/yafmt/model/fc', 'zcu.cz/yafmt/model/fm')]


[template public serializeQualityAttributesOfEnabledFeatureConfiguration(aFeatureConfiguration : FeatureConfiguration)]
[aFeatureConfiguration.featureModelCopy.root.serializeQualityAttributesOfEnabledFeature(aFeatureConfiguration)/]
[/template]

[template public serializeQualityAttributesOfEnabledFeature(aFeature : Feature, aFeatureConfiguration : FeatureConfiguration)]
[for (aFeatureChild : Feature | aFeature.childFeatures())]
[if (not aFeatureChild.hasChildren())]
[aFeatureChild.serializeQualityAttributes(aFeatureConfiguration)/]
[else]
[serializeQualityAttributesOfEnabledFeature(aFeatureChild, aFeatureConfiguration)/]
[/if]
[/for]
[/template]

[template public serializeQualityAttributes(aFeature : Feature, aFeatureConfiguration : FeatureConfiguration) post(trim())]
[if (aFeature.hasAttributes())]
[let rootFeature : Feature = aFeatureConfiguration.featureModelCopy.root]
[if (aFeature.hasQualityAttributes(rootFeature.qualityAttributeNames()))]
[file (aFeature.id.concat('.properties'), false, 'UTF-8')]
[for (anAttribute : Attribute | aFeatureConfiguration.featureModelCopy.root.attributes)]
[if (anAttribute.qualityAttribute)]
[anAttribute.name/]=[aFeature.attributeValue(anAttribute.name, aFeatureConfiguration)/][comment Selection value not available. Get default value from feature model /][if (not valueHasBeenAlreadySerialized(aFeature.name.concat('.').concat(anAttribute.name), '1'))][aFeature.defaultAttributeValue(anAttribute.name, aFeatureConfiguration)/][/if]
[/if]
[/for]
[/file]
[/if]
[/let]
[/if]
[/template]

[template public defaultAttributeValue(aFeature : Feature, attributeName: String, aFeatureConfiguration : FeatureConfiguration) post(trim())]
[let rootFeature : Feature = aFeatureConfiguration.featureModelCopy.root]
[rootFeature.featureForId(aFeature.id, attributeName)/]
[/let]
[/template]

[template public featureForId(aFeature:Feature, featureId : String, attributeName : String) post(trim())]
[if (aFeature.id = featureId)]
[aFeature.defaultAttributeValue (attributeName)/]
[else]
[for (aChildFeature : Feature | aFeature.childFeatures())]
[aChildFeature.featureForId(featureId, attributeName)/]
[/for]		
[/if]
[/template]

[template public defaultAttributeValue(aFeature:Feature, attributeName : String) post(trim())]
[for (anAttribute : Attribute | aFeature.attributes)]
[if (anAttribute.name = attributeName)]
[anAttribute.defaultValue /]
[/if]
[/for]
[/template]

[template public attributeValue(aFeature : Feature, attributeName: String, aFeatureConfiguration : FeatureConfiguration) post(trim())]
[let rootSelection : Selection = aFeatureConfiguration.root]
[rootSelection.featureForId(aFeature.id, attributeName)/]
[/let]
[/template]

[template public featureForId(aSelection:Selection, featureId : String, attributeName : String) post(trim())]
[if (aSelection.id = featureId)]
[aSelection.attributeValue (attributeName)/]
[else]
[for (aChildSelection : Selection | aSelection.selections)]
[aChildSelection.featureForId(featureId, attributeName)/]
[/for]		
[/if]
[/template]

[template public attributeValue(aSelection:Selection, attributeName : String) post(trim())]
[for (anAttributeValue : AttributeValue | aSelection.values)]
[if (anAttributeValue.name = attributeName)]
[if (not valueHasBeenAlreadySerialized(anAttributeValue.attribute.feature.name.concat('.').concat(anAttributeValue.attribute.name), '2'))]
[if (anAttributeValue.oclIsTypeOf(DoubleValue))]
[anAttributeValue.oclAsType(DoubleValue).value /]
[elseif (anAttributeValue.oclIsTypeOf(IntegerValue))]
[anAttributeValue.oclAsType(IntegerValue).value /]	
[/if]
[/if]
[/if]
[/for]

[/template]

[comment NOTE: position argument is not used, but required, since, otherwise, method is not invoke in different places with same arguments.
Therefore, position argument is required to make calls different in different positions /]

[query public valueHasBeenAlreadySerialized(id: String, position:String) : Boolean = 
    invoke(
		'eu.supersede.dynadapt.feature.serializer.helpers.AttributeSerializationHelper', 
		'attributeValueHasBeenSerialized(java.lang.String, java.lang.String)', Sequence{id, position})
  /]

[query public qualityAttributeNames(aFeature : Feature) : Sequence(String) = 
aFeature.attributes->select(qualityAttribute)->collect(name) /]

[query public attributeNames(aFeature : Feature) : Sequence(String) = 
aFeature.attributes->collect(name) /]

[query public hasAttributes(aFeature : Feature) : Boolean = 
not aFeature.attributes->isEmpty() /]

[query public hasQualityAttributes(aFeature : Feature, theQualityAttributes: Sequence (String)) : Boolean = 
not aFeature.attributeNames()->asSet()->intersection(theQualityAttributes->asSet())->isEmpty() /]

[query public hasChildren(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) or not (aFeature.groups->isEmpty()) /]
[query public hasANDGroup(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) /]
[query public hasORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._or /]
[query public hasXORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._xor /]

[query public childFeatures(aFeature : Feature) : Collection(Feature) = 
	if aFeature.hasANDGroup() 
		then aFeature.features 
		else  
			if aFeature.hasORGroup() or aFeature.hasXORGroup()
				then
					aFeature.groups->first().features
				else
					Sequence{}
			endif
	endif /]