[comment encoding = UTF-8 /]
[module serializeQualityAttributesOfEnabledFeature('zcu.cz/yafmt/model/fc', 'zcu.cz/yafmt/model/fm')]


[template public serializeQualityAttributesOfEnabledFeatureConfiguration(aFeatureConfiguration : FeatureConfiguration)]
[aFeatureConfiguration.featureModelCopy.root.serializeQualityAttributesOfEnabledFeature(aFeatureConfiguration)/]
[/template]

[template public serializeQualityAttributesOfEnabledFeature(aFeature : Feature, aFeatureConfiguration : FeatureConfiguration)]
[for (aFeatureChild : Feature | aFeature.childFeatures())]
[if (not aFeatureChild.hasChildren())]
[aFeatureChild.serializeQualityAttributes(aFeatureConfiguration)/]
[else]
[serializeQualityAttributesOfEnabledFeature(aFeatureChild, aFeatureConfiguration)/]
[/if]
[/for]
[/template]

[template public serializeQualityAttributes(aFeature : Feature, aFeatureConfiguration : FeatureConfiguration) post(trim())]
[file (aFeature.name.concat('.properties'), false, 'UTF-8')]
[for (anAttribute : Attribute | aFeatureConfiguration.featureModelCopy.root.attributes)]
[if (anAttribute.qualityAttribute)]
[anAttribute.name/]=[aFeature.attributeValue(anAttribute.name, aFeatureConfiguration)/]
[/if]
[/for]
[/file]
[/template]

[template public attributeValue(aFeature : Feature, attributeName: String, aFeatureConfiguration : FeatureConfiguration) post(trim())]
[let rootSelection : Selection = aFeatureConfiguration.root]
[rootSelection.featureForId(aFeature.id, attributeName)/]
[/let]
[/template]

[template public featureForId(aSelection:Selection, featureId : String, attributeName : String) post(trim())]
[if (aSelection.id = featureId)][aSelection.attributeValue (attributeName)/][else]
[for (aChildSelection : Selection | aSelection.selections)]
[aChildSelection.featureForId(featureId, attributeName)/]
[/for]		
[/if]
[/template]

[template public attributeValue(aSelection:Selection, attributeName : String) post(trim())]
[for (anAttributeValue : AttributeValue | aSelection.values)]
[if (anAttributeValue.name = attributeName)]
[anAttributeValue.oclAsType(DoubleValue).value /]
[/if]
[/for]
[/template]

[query public hasChildren(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) or not (aFeature.groups->isEmpty()) /]
[query public hasANDGroup(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) /]
[query public hasORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._or /]
[query public hasXORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._xor /]

[query public childFeatures(aFeature : Feature) : Collection(Feature) = 
	if aFeature.hasANDGroup() 
		then aFeature.features 
		else  
			if aFeature.hasORGroup() or aFeature.hasXORGroup()
				then
					aFeature.groups->first().features
				else
					Sequence{}
			endif
	endif /]