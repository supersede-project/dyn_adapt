<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="OccupancyLights" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="200.0">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 75.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={64, 24, 1142, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[908, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.9687162891046386">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{495.50000000000006, 263.06570170238984}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Edit code and type in light IDs.&#10;Check the lights output to find&#10;a reachable light ID.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[435.0, 230.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute">
            </property>
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Authors: Marten Lohstroh, Christopher Brooks">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 475.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Use OpenCV face detection to count faces and&#10;control a Philips Hue lightbulb.&#10;&#10;This model requires:&#10;* a camera&#10;* that OpenCV be installed on the local machine&#10;* a Philips Hue lightbulb be available on the local network.&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 5.0]">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{0.05}">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{{0,0}}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[100.0, 210.0]">
        </property>
    </entity>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images.&#10; * &#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to true.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id: Camera.js 925 2016-08-24 17:55:11Z cxh $$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, error, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type' : 'boolean',&#10;        'value' : true&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type' : 'string',&#10;        'value' : 'default camera'&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type' : 'JSON'&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options' : cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(this.getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value' : camera.getViewSize(),&#10;            'options' : camera.viewSizes()&#10;        });&#10;    } catch(err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(this.getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (this.getParameter('triggered')) {&#10;        handle = this.addInputHandler('trigger', function () {&#10;            self.send('image', camera.snapshot());&#10;        });&#10;    } else {&#10;        camera.on('image', function (image) {&#10;            self.send('image', image);&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/cameras/Camera.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Camera.js 925 2016-08-24 17:55:11Z cxh $$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to true.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[250.0, 210.0]">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={91, 179, 640, 524}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[640, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[540.0, 170.0]">
        </property>
    </entity>
    <entity name="FaceDetector2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** A motion detector accessor.&#10; *  This accessor compares each input image against the previous&#10; *  input image. There are three outputs.&#10; *  The one named 'output' is a modified image that graphically illustrates&#10; *  the center of gravity of motion, if motion is detected.&#10; *  If enough of the pixels differ by enough, then the 'cog'&#10; *  output will produce the center of gravity of the pixels that&#10; *  differ by enough.&#10; *  Finally, the 'area' output produces the percentage of area&#10; *  covered by motion in the input image, where 0 means no motion&#10; *  and 100 means full image motion.&#10; *  &#10; *  The options parameter can include the following fields:&#10; *  * _PixelThreshold_: Intensity threshold whereby a pixel is&#10; *    deemed to different (an int in the range of 0 to 255, with default 25).&#10; *  * _AreaThreshold_: The percentage threshold of image&#10; *    that has different pixels for motion to be detected&#10; *    (a double 0-100, with default 0.2).&#10; *  * _ModifyImage_: If true (the default), the modify the&#10; *    provided image with a visual indication of the location&#10; *    and amount of motion.&#10; *&#10; *  The implementation for the Ptolemy II host is taken from&#10; *  the webcam-capture package by Bartosz Firyn (SarXos), available from&#10; *  [https://github.com/sarxos/webcam-capture](https://github.com/sarxos/webcam-capture).&#10; *  The webcam-capture package is licensed under the MIT License.&#10; * &#10; *  @accessor image/MotionDetector&#10; *  @input input A stream of images.&#10; *  @input {{&quot;PixelThreshold&quot;: number, &quot;AreaThreshold&quot;: number}} options The options controlling the filter.&#10; *  @output {array&lt;{'horizontal': 'number', 'vertical': 'number'}&gt;} cog The horizontal and vertical position of the center of gravity of motion, in pixels.&#10; *  @output {Object} output The filtered image.&#10; *  @output {number} area The percentage of area covered by motion.&#10; *  @author Edward A. Lee&#10; *  @version $$Id: FaceDetector.js 651 2016-03-24 01:25:30Z ilgea $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getParameter, input, output, removeInputHandler, require, send  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var faceDetector = require('objectDetection');&#10;&#10;exports.setup = function() {&#10;    this.input('input');&#10;    this.output('output');&#10;    this.output('faceCount', {'type': 'number'}); &#10;    this.input('options', {'value':'{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 400}', 'type':'JSON'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('input', function() {&#10;        var options = this.get('options');&#10;        var image = this.get('input');&#10;        var result = faceDetector.filter(image, options);&#10;        this.send('output', result);&#10;        var numFaces = faceDetector.numberOfFaces();&#10;        this.send('faceCount', numFaces);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/image/FaceDetector.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[395.0, 200.0]">
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;MinFaceSize&quot;: 80, &quot;MaxFaceSize&quot;: 400}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;A motion detector accessor.&#10; This accessor compares each input image against the previous&#10; input image. There are three outputs.&#10; The one named 'output' is a modified image that graphically illustrates&#10; the center of gravity of motion, if motion is detected.&#10; If enough of the pixels differ by enough, then the 'cog'&#10; output will produce the center of gravity of the pixels that&#10; differ by enough.&#10; Finally, the 'area' output produces the percentage of area&#10; covered by motion in the input image, where 0 means no motion&#10; and 100 means full image motion.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;PixelThreshold&lt;/em&gt;: Intensity threshold whereby a pixel is&#10;deemed to different (an int in the range of 0 to 255, with default 25).&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;AreaThreshold&lt;/em&gt;: The percentage threshold of image&#10;that has different pixels for motion to be detected&#10;(a double 0-100, with default 0.2).&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;ModifyImage&lt;/em&gt;: If true (the default), the modify the&#10;provided image with a visual indication of the location&#10;and amount of motion.&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host is taken from&#10;the webcam-capture package by Bartosz Firyn (SarXos), available from&#10;&lt;a href=&quot;https://github.com/sarxos/webcam-capture&quot;&gt;https://github.com/sarxos/webcam-capture&lt;/a&gt;.&#10;The webcam-capture package is licensed under the MIT License.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: FaceDetector.js 651 2016-03-24 01:25:30Z ilgea $$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of images.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The filtered image.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The options controlling the filter.">
            </property>
            <property name="cog (port)" class="ptolemy.kernel.util.StringAttribute" value="The horizontal and vertical position of the center of gravity of motion, in pixels.">
            </property>
            <property name="area (port)" class="ptolemy.kernel.util.StringAttribute" value="The percentage of area covered by motion.">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faceCount" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Hue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;//  FIXME: Allow an IP address to be dynamically provided.&#10;&#10;/** This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; *  To use it, you need to know the IP address of the Hue Bridge, which is&#10; *  unfortunately, somewhat hard to find out.  See below for some hints.&#10; *  &#10; *  Upon initialization, this accessor will use the userName parameter to&#10; *  contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; *  engage in a dialog with the Bridge to create a new user. This will require&#10; *  the user to push the button on the Hue Bridge when the alert to do so appears.&#10; *  The assigned userName will be recorded in the userName parameter.&#10; *  &#10; *  Upon authenticating with the Bridge, this accessor will output a data&#10; *  structure that reports all the lights that have been registered with the Bridge.&#10; *  These lights each have a number ID, such as '1'.  The state of each light&#10; *  will be reported in this output. The most important property of the state&#10; *  is the 'reachable' property. If this has value false, then the light is not&#10; *  reachable by the Bridge and therefore cannot be controlled.  &#10; *  &#10; *  The *commands* input is either a single command or an array of commands,&#10; *  where each command can have the following properties:&#10; *&#10; *  * id (required):  The id of the light to manipulate, which is a number.&#10; *  * on: true to turn on; false to turn off.&#10; *  * bri: Brightness.  0-255.&#10; *  * hue: Color, for bulbs that support color. This is a number in the&#10; *    range 0-65280.&#10; *  * sat: Saturation, for bulbs that support color. This is a number in the&#10; *    range 0-255.&#10; *  * transitiontime: The time in ms for the bulb to make the transition.&#10; *  &#10; *  Please see Hue docs for mapping colors to hue/saturation values:&#10; *  http://www.developers.meethue.com/documentation/core-concepts&#10; *  &#10; *  If a light is not accessible, this accessor warns but does not error.&#10; *  FIXME: Where is the warning appearing?&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily &#10; *  disconnected) and may be valid in the future. Rather than terminating the &#10; *  model, we hope that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Another option is to use the Discovery accessor and look for a device named&#10; *  philips-hue (or the name assigned to your bridge if assigned manually).&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input commands JSON commands for the Hue, for example,&#10; *                {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  @input {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The username for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10;     A username will be automatically generated if none is available.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id: Hue.js 1007 2016-10-17 00:51:47Z eal $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    &#10;    this.input('commands');&#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;        value : &quot;turn off&quot;,&#10;        type: &quot;string&quot;,&#10;        options : [&quot;none&quot;, &quot;restore&quot;, &quot;turn off&quot;]&#10;    });&#10;    this.output('lights');&#10;    this.output('assignedUserName', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;/** Add an input handler to react to commands.&#10; *  Commands will be ignored until the user is authenticated.&#10; *  If a bridge IP address has been given, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.  &#10; */&#10;exports.initialize = function() {&#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables &#10;    // while providing access to accessor functions.  &#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;    &#10;    // FIXME:  We need a way to dynamically supply the IP address.&#10;    // Recommend using a separate port.&#10;    this.addInputHandler('commands', this.hue.issueCommand);&#10;    this.hue.connect();&#10;};&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.  &#10; *  This will create an object with its own local state, allowing multiple &#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *  &#10; *  An instance of the returned hue object implements the following public functions:&#10; *&#10; *  * connect(): Contact the bridge and register the user, if needed.  Add an&#10; *    input handler to the trigger input to submit commands to the bridge. &lt;/li&gt;&#10; *  * issueCommand():  Issue a command to the bridge.  A command is an object &#10; *    that may contain the following fields:&#10; *&#10; *    * id (required):  The id of the light to manipulate. &#10; *    * on: true to turn on; false to turn off.&#10; *    * bri: Brightness.  0-255.&#10; *    * hue: Hue (for bulbs that support color).  0-65280.&#10; *    * sat: Saturation (for bulbs that support color). 0-255.&#10; *    * transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *&#10; *  For example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; * &#10; */&#10;function Hue() {&#10;    var hue = {};&#10;    &#10;    // Public variables. &#10;    hue.changedLights = [];&#10;    hue.lights = {};&#10;&#10;    // Private variables.&#10;    var authenticated = false;&#10;    var debug = true;&#10;    var handleRegisterUser;&#10;    var ipAddress = &quot;&quot;;&#10;    var maxRegisterAttempts = 3;&#10;    var maxRetries = 5;&#10;    var registerInterval = 10000;&#10;    var registerAttempts = 0;&#10;    var retryCount = 0;&#10;    var retryTimeout = 1000;&#10;    var timeout = 3000;&#10;    var url = &quot;&quot;;&#10;    var userName = &quot;&quot;; &#10;    var pendingCommands = [];&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    // Public functions. &#10;    // Available to be used for e.g. inputHandlers.&#10;    &#10;    /** Contact the bridge and register the user, if needed. */&#10;    hue.connect = function() {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;    &#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;        &#10;        contactBridge();&#10;    };&#10;    &#10;    /** Issue a command to the bridge.  Commands are queued if not yet authenticated. */    &#10;    hue.issueCommand = function() {&#10;        var commands = self.get('commands');&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: issueCommand():&quot;);&#10;        }&#10;&#10;        // (Re)connect with the bridge&#10;        if (ipAddress !== self.getParameter('bridgeIP') || &#10;                    userName !== self.getParameter('userName')) {&#10;            console.log(&quot;New bridge parameters detected.&quot;);&#10;            authenticated = false;&#10;            hue.connect();&#10;        }&#10;&#10;        // If not yet connected, queue the command.&#10;        if (!authenticated) {&#10;            console.log(&quot;Not authenticated; queueing command.&quot;);&#10;            pendingCommands.push(commands);&#10;            return;&#10;        }&#10;        hue.processCommands(commands);&#10;    };&#10;    &#10;    /** Process the specified commands. The argument can be a single object&#10;     *  with properties for the command, or an array of such objects.&#10;     */&#10;    hue.processCommands = function(commands) {&#10;        if (debug) {&#10;            // FIXME: Type check input&#10;            console.log(&quot;Hue.js: processCommands() commands: &quot; + JSON.stringify(commands));&#10;        }&#10;        if (typeof commands === 'string') {&#10;            commands = JSON.parse(commands);&#10;        }&#10;        // Accept both arrays and non-arrays.&#10;        // The following concatenates the input with an empty array, ensuring the result&#10;        // is an array.&#10;        commands = [].concat(commands); &#10;&#10;        // Iterate over commands (assuming input is an array of commands)&#10;        for (var i = 0; i &lt; commands.length; i++) {&#10;            var command = {};&#10;            if (typeof commands[i] === 'string') {&#10;                commands[i] = JSON.parse(commands);&#10;            }&#10;            var lightID = commands[i].id;&#10;            &#10;            // Check whether input is valid&#10;            if (typeof lightID === 'undefined') {&#10;                self.error(&quot;Invalid command (no light id): &quot; + commands[i]);&#10;            } else {&#10;&#10;                // Keep track of changed lights to turn off during wrap up.&#10;                if (hue.changedLights.indexOf(lightID) == -1) {&#10;                    hue.changedLights.push(lightID);&#10;                }&#10;            &#10;                // Pack properties into object&#10;                if (typeof commands[i].on !== 'undefined') {&#10;                    command.on = commands[i].on;&#10;                }&#10;                if (typeof commands[i].bri !== 'undefined') {&#10;                    command.bri = limit(commands[i].bri, 0, 255);&#10;                }&#10;                if (typeof commands[i].hue !== 'undefined') {&#10;                    command.hue = limit(commands[i].hue, 0, 65280);&#10;                }&#10;                if (typeof commands[i].sat !== 'undefined') {&#10;                    command.sat = limit(commands[i].sat, 0, 255);&#10;                }&#10;                if (typeof commands[i].transitiontime !== 'undefined') {&#10;                    command.transitiontime = commands[i].transitiontime;&#10;                }&#10;            }&#10;&#10;            if (Object.keys(command).length &lt; 1) {&#10;                self.error(&quot;Invalid command (no properties): &quot; + JSON.stringify(commands[i]));&#10;            } else {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands() command: &quot; + JSON.stringify(command));&#10;                }&#10;                var options = {&#10;                    body : JSON.stringify(command),&#10;                    timeout : 10000,&#10;                    url : url + &quot;/&quot; + userName + &quot;/lights/&quot; + encodeURIComponent(lightID) + &quot;/state/&quot;&#10;                };&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands(): PUT request: options: &quot; + JSON.stringify(options));&#10;                }&#10;                http.put(options, function(response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js: processCommands(): response status: &quot; + response.statusMessage);&#10;                        console.log(&quot;Hue.js: processCommands(): response body: &quot; + response.body);&#10;                    }&#10;                    reportIfError(response);&#10;                });&#10;            }&#10;        }&#10;    };&#10;&#10;    // Private functions.&#10;    &#10;    /** Handle an error. This will report it on the console and then retry a &#10;     *  fixed number of times before giving up.  A retry is a re-invocation of &#10;     *  registerUser().&#10;     */&#10;    function bridgeRequestErrorHandler(err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.error('Error connecting to Hue Bridge:');&#10;        console.error(err);&#10;        if (retryCount &lt; maxRetries) {&#10;            console.log('Will retry');&#10;            retryCount++;&#10;            setTimeout(contactBridge, retryTimeout);&#10;        } else {&#10;            self.error('Could not reach the Hue Bridge at ' + url +&#10;                       ' after ' + retryCount + ' attempts.');&#10;        }&#10;    }&#10;    &#10;    /** Contact the bridge.  Register the user, if needed.&#10;     */&#10;    function contactBridge() {&#10;        console.log(&quot;Attempting to connecting to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;            if (response !== null) {&#10;                if (response.statusCode != 200) {&#10;                    // Response is other than OK.&#10;                    bridgeRequestErrorHandler(response.statusMessage);&#10;                } else {&#10;                    var lights = JSON.parse(response.body);&#10;                    console.log(&quot;Got a response from the bridge: &quot; + response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;            &#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            alert(userName + &quot; is not a registered user.\n&quot; +&#10;                                  &quot;Push the link button on the Hue bridge to register.&quot;);&#10;                            // Oddly, the invalid userName, which has the right form,&#10;                            // is not an acceptable parameter value. Since it is invalid&#10;                            // anyway, discard it and replace.&#10;                            userName = 'ptolemy_user';&#10;                            // It takes two successive posts to register a new user.&#10;                            // Issue the first one now, then attempt again later.&#10;                            registerUser();&#10;                            handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                        } else {&#10;                            console.error('Error occurred when trying to get Hue light status:' + description);&#10;                            self.error(description);&#10;                        }&#10;                    } else if (lights) {&#10;                        console.log(&quot;Authenticated!&quot;);&#10;                        authenticated = true;&#10;                        &#10;                        // Process any previously queued requests.&#10;                        if (pendingCommands) {&#10;                            for (var i = 0; i &lt; pendingCommands.length; i++) {&#10;                                hue.processCommands(pendingCommands[i]);&#10;                            }&#10;                            pendingCommands = [];&#10;                        }&#10;                        hue.lights = lights;&#10;                        self.send('lights', lights);&#10;                    }&#10;                }&#10;            } else {&#10;                self.error(&quot;Unable to connect to bridge.&quot;);&#10;            }&#10;        }).on('error', bridgeRequestErrorHandler);&#10;    }&#10;    &#10;    /** Utility function to check that an object is a nonempty array.&#10;     *  @param obj The object.&#10;     */&#10;    function isNonEmptyArray(obj) {&#10;        return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;    }&#10;&#10;    /** Utility function to limit the range of a number&#10;     *  and to force it to be an integer. If the value argument&#10;     *  is a string, then it will be converted to a Number.&#10;     *  @param value The value to limit.&#10;     *  @param low The low value.&#10;     *  @param high The high value.&#10;     */&#10;    function limit(value, low, high) {&#10;        var parsed = parseInt(value);&#10;        if (typeof parsed === 'undefined') {&#10;            parsed = parseFloat(value);&#10;            if (typeof parsed === 'undefined') {&#10;                self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;                return 0;&#10;            } else {&#10;                parsed = Math.floor(parsed);&#10;            }&#10;        }&#10;        if (parsed &lt; low) {&#10;            return low;&#10;        } else if (parsed &gt; high) {&#10;            return high;&#10;        } else {&#10;            return parsed;&#10;        }&#10;    }&#10;    &#10;    /** Register a new user.  &#10;     *  This function repeats at registerInterval until successful or until&#10;     *  maxRegisterAttempts.  Some wait time is given between attempts for the &#10;     *  user to click the button on the Hue bridge.&#10;     */&#10;    function registerUser() {&#10;    &#10;        // Should be of the format {&quot;devicetype&quot;:&quot;my_hue_app#iphone peter&quot;}&#10;        // http://www.developers.meethue.com/documentation/getting-started&#10;        // (free registration required).&#10;        var registerData = {&#10;            devicetype : &quot;hue_accessor#&quot; + userName,&#10;        };&#10;        var options = {&#10;            body : JSON.stringify(registerData),&#10;            timeout: 10000,&#10;            url : url&#10;        };&#10;        http.post(options, function(response) {&#10;            var rsp = JSON.parse(response.body);&#10;            if (debug) {&#10;                console.log(&quot;Hue.js registerUser(): Response &quot; + JSON.stringify(rsp));&#10;            }&#10;            if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;                &#10;                var description = rsp[0].error.description;&#10;    &#10;                if (description.match(&quot;link button not pressed&quot;)) {&#10;                    // Retry registration for the given number of attempts.&#10;                    console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;                    registerAttempts++;&#10;                    &#10;                    if (registerAttempts &lt; maxRegisterAttempts){&#10;                        handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                    } else {&#10;                        throw &quot;Failed to create user after &quot; + registerAttempts +&#10;                                &quot; attempt(s).&quot;;&#10;                    }&#10;                    return;&#10;                } else {&#10;                    throw description;&#10;                }&#10;            } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;                authenticated = true;&#10;                &#10;                // The bridge will return a username.  Save it.&#10;                userName = rsp[0].success.username;&#10;                self.setParameter('userName', userName);&#10;                self.send('assignedUserName', userName);&#10;                if (handleRegisterUser !== null) {&#10;                    clearTimeout(handleRegisterUser);&#10;                }&#10;                // contact the bridge and find the available lights&#10;                contactBridge();&#10;            } else {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js registerUser(): Response: &quot; + JSON.stringify(response));&#10;                }&#10;                console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;                throw &quot;Unknown error registering new user&quot;;&#10;            }&#10;        });&#10;    };&#10;    &#10;    /** If the response indicates an error, report it.&#10;     *  Return true if the response is an error.&#10;     */&#10;     function reportIfError(response) {&#10;        var body = response.body;&#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;        if (isNonEmptyArray(body) &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server responds with error: &quot; + &#10;                   body[0].error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;    };&#10;    &#10;    return hue;&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = {};&#10;    &#10;    var action = this.getParameter('onWrapup');&#10;    if (action !== &quot;none&quot;) {&#10;        for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;            options = {&#10;                body : cmd,&#10;                timeout : 10000, &#10;                url : &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; + &#10;                    this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] + &#10;                    &quot;/state/&quot;&#10;            };&#10;            &#10;            var self = this;&#10;            &#10;            http.put(options, function(response) {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js wrapup(): Response &quot; + JSON.stringify(response));&#10;                }&#10;                if (hue.reportIfError(response)) {&#10;                    errorLights.push(lightID);&#10;                }&#10;            });&#10;        }&#10;    &#10;        if (errorLights.length !== 0) {&#10;            error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;        }&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb.&lt;/p&gt;&#10;&lt;p&gt; Initialization:  Hue checks for a value of the &amp;quot;bridgeIP&amp;quot; input in &#10; initialize().  If a default value is present, Hue initiates a connection to &#10; the bridge.&lt;br&gt; FIXME:  Allow an IP address to be dynamically provided.&#10; Otherwise, Hue waits for an IP address to be supplied as part&#10; of a command.  Commands are ignored until an IP address is supplied.  If the&#10; accessor fails to reach the bridge, it will retry a few times, then give up.&lt;/p&gt;&#10;&lt;p&gt; User registration:&#10; The Hue bridge automatically generates usernames.  If you have already &#10; generated a username, enter the value in the &amp;quot;userName&amp;quot; parameter.&lt;br&gt; Otherwise, the accessor contacts the bridge to obtain a username, which is &#10; output on the &amp;quot;assignedUserName&amp;quot; port.  An alert dialog will pop up &#10; instructing the user to push the link button on the bridge.  Then, the &#10; bridge will respond to the accessor with a new username.&lt;br&gt; This username will be remembered while the swarmlet is active; however, &#10; there is no persistent storage yet.  Please copy the assigned username to &#10; the &amp;quot;userName&amp;quot; parameter and save the accessor code. &lt;/p&gt;&#10;&lt;p&gt; Bridge state: The final initialization step is to get a list of accessible &#10; lights.  &lt;/p&gt;&#10;&lt;p&gt; Commands: A command is an object that may contain the following fields.&lt;br&gt; The &amp;quot;command&amp;quot; port accepts an array of commands.&#10; id (required):  The id of the light to manipulate. &#10; on: true to turn on; false to turn off.&#10; bri: Brightness.  0-255.&#10; hue: Hue (for bulbs that support color).  0-65280.&#10; sat: Saturation (for bulbs that support color). 0-255.&#10; transitiontime:  The delay before the bulb responds to the command.  In ms.&lt;/p&gt;&#10;&lt;p&gt; Please see Hue docs for mapping colors to hue/saturation values:&#10; http://www.developers.meethue.com/documentation/core-concepts&lt;/p&gt;&#10;&lt;p&gt; If a light is not accessible, this accessor warns but does not error.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily &#10; disconnected) and may be valid in the future. Rather than terminating the &#10; model, we hope that the lights come back.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Another option is to use the Discovery accessor and look for a device named&#10; philips-hue (or the name assigned to your bridge if assigned manually).&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Hue.js 999 2016-10-15 14:42:43Z beth@berkeley.edu $$">
            </property>
            <property name="bridgeIP (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The username for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.&#10;     A username will be automatically generated if none is available.">
            </property>
            <property name="commands (port)" class="ptolemy.kernel.util.StringAttribute" value="JSON commands for the Hue, for example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[780.0, 365.0]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="commands" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="10.0.0.235">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="ZAjh9AYL6s795RlqgaW0CzupRXrdpSQIqfyOnVyk">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="onWrapup" class="ptolemy.data.expr.Parameter" value="turn off">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="commands" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="lights" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="assignedUserName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="PeopleCount" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 140.0]">
        </property>
    </entity>
    <entity name="OccupancyBasedLightingController" class="ptolemy.actor.lib.jjs.JavaScript">
        <display name="Occupancy Based&#10;Lighting Controller"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; *  Update the Philips Hue lightbulb depending on the number of&#10; *  faces detected.&#10; *  &#10; *  @author Unknown, Contributor: Christopher Brooks&#10; *  @version $$Id: StockTick.xml 74391 2016-01-31 22:04:05Z cxh $$&#10; *  @input {count} The number of faces&#10; *  @output {hueCmd} The command for the Philips Hue light bulb.&#10; *  @param {lightID} The id of the Philips Hue light bulb.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, get, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict'; &#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() { &#10;    this.input('count', {&#10;        'value':0,&#10;        'type':'number'&#10;    });&#10;    this.output('hueCmd', {&#10;        'type':'JSON'&#10;    });&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.parameter('lightID', {'type': 'string'});&#10;     &#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the count input. */&#10;exports.initialize = function() { &#10;    &#10;    // Capture 'this' for use in callback.&#10;    var self = this;&#10;&#10;    this.addInputHandler('count', function() {&#10;        var faceCount = self.get('count');   &#10;        var status1 = false;&#10;        var status2 = false;&#10;        var status3 = false;&#10;        var c2 = faceCount; &#10;        var bri = 255;&#10;        &#10;        var args = [{'id':self.getParameter('lightID'),'on':status1}];&#10;        &#10;        if (faceCount % 2 == 1) {&#10;        	bri = 128;&#10;        }&#10;        &#10;        var hue = 12750;&#10;        if (c2 &gt; 2) {&#10;        	 status3 = true;&#10;        	 args = [{'id':self.getParameter('lightID'),'on':true,'bri':bri,'hue':hue}];&#10;        } else if (c2 &gt;= 1) {&#10;        	 status2 = true;&#10;        	 args = [{'id':self.getParameter('lightID'),'on':true,'bri':bri,'hue':hue/2}];&#10;        } else if (c2 &gt; 0) {&#10;        	status1 = true;&#10;        	args = [{'id':self.getParameter('lightID'),'on':false}];&#10;        }&#10;        &#10;        self.send('hueCmd', args); &#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[675.0, 210.0]">
        </property>
        <property name="count" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="lightID" class="ptolemy.data.expr.Parameter" value="2">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="count" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hueCmd" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
    <entity name="MonitorValue2" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[590.0, 360.0]">
        </property>
    </entity>
    <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[835.0, 220.0]">
        </property>
    </entity>
    <entity name="MonitorValue4" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[885.0, 285.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;DiscreteClock.output&quot;,x=100.0,y=210.0}, tail={id=&quot;Camera.trigger&quot;,x=250.0,y=210.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Camera.image&quot;,x=250.0,y=210.0}, tail={id=&quot;FaceDetector2.input&quot;,x=395.0,y=200.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ImageDisplay.input&quot;,x=540.0,y=170.0}, tail={id=&quot;FaceDetector2.output&quot;,x=395.0,y=200.0}, points={485.0,170.0,485.0,190.0} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[600.0, 210.0]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;PeopleCount.input&quot;,x=700.0,y=140.0}, tail={id=&quot;relation5.vertex1&quot;,x=600.0,y=210.0}, points={600.0,140.0} },{ head={id=&quot;OccupancyBasedLightingController.count&quot;,x=675.0,y=210.0}, tail={id=&quot;relation5.vertex1&quot;,x=600.0,y=210.0}, points={} },{ head={id=&quot;FaceDetector2.faceCount&quot;,x=395.0,y=200.0}, tail={id=&quot;relation5.vertex1&quot;,x=600.0,y=210.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{730.0, 290.0}">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="Camera.trigger" relation="relation"/>
    <link port="Camera.image" relation="relation2"/>
    <link port="ImageDisplay.input" relation="relation3"/>
    <link port="FaceDetector2.input" relation="relation2"/>
    <link port="FaceDetector2.output" relation="relation3"/>
    <link port="FaceDetector2.faceCount" relation="relation5"/>
    <link port="Hue2.error" relation="relation7"/>
    <link port="Hue2.commands" relation="relation8"/>
    <link port="Hue2.lights" relation="relation4"/>
    <link port="PeopleCount.input" relation="relation5"/>
    <link port="OccupancyBasedLightingController.error" relation="relation6"/>
    <link port="OccupancyBasedLightingController.count" relation="relation5"/>
    <link port="OccupancyBasedLightingController.hueCmd" relation="relation8"/>
    <link port="MonitorValue2.input" relation="relation6"/>
    <link port="MonitorValue2.input" relation="relation7"/>
    <link port="MonitorValue.input" relation="relation8"/>
    <link port="MonitorValue4.input" relation="relation4"/>
</entity>
