<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="UDPSocket" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="60">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 155.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={2, 23, 928, 641}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0622358730115775">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{296.78662109375006, 369.12413807744565}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for the UDPSocketListener accessor.&#10;&#10;NOTE: This socket listens on the specified port and outputs any packet received on that port.&#10;The received packets will appear in the display ReceivedUDPPackets. To send UDP packets to&#10;the port to which this accessor is listening , there is a Node.js program which sends one packet&#10;each execution in the same demo directory, namely, UDPPacketGen.js.&#10;You can run this program as follows:&#10;     &gt; node UDPPacketGen.js&#10;after running this demo.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-30.0, 250.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-30.0, 505.0]">
        </property>
    </property>
    <entity name="ReceivedUDPPackets" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 140, 1032, 628}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1016, 568]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[365.0, 180.0]">
        </property>
    </entity>
    <entity name="Listening" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 131, 1032, 628}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1016, 568]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[365.0, 235.0]">
        </property>
    </entity>
    <entity name="UDPSocketListener" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor listens for UDP (datagram) messages on the specified host&#10; *  interface and port. If the value of the `port` input is initially&#10; *  negative, then this accessor waits until it receives a non-negative `port`&#10; *  input before initiating listening. Otherwise, it begins listening&#10; *  during initialization. If at any time during execution it receives&#10; *  a `port` input, then it will close any open socket and, if the new&#10; *  `port` value is non-negative, open&#10; *  a new socket to the current `host` and `port`.&#10; *  &#10; *  When the connection is established, a `true` boolean is sent to&#10; *  the `listening` output. If the connection is broken during execution, then a `false`&#10; *  boolean is sent to the `listening` output. The swarmlet could respond to this by&#10; *  retrying to connect (send an event to the `port` input).&#10; *&#10; *  The receive type can be any of those supported by the host.&#10; *  The list of supported types will be provided as options for the&#10; *  and `receiveType` parameter. For the Ptolemy II host, these include at&#10; *  least 'string', 'number', 'image', and a variety of numeric types.&#10; *&#10; *  @accessor net/UDPSocketListener&#10; *  @author Hokeun Kim and Edward A. Lee&#10; *  @version $$Id$$&#10; *  &#10; *  @output {string} message The received message.&#10; *  @output {boolean} listening True to indicate that listening has begun, false to&#10; *   indicate that it has stopped.&#10; *&#10; *  @input {string} listeningAddress The interface to listen on for incoming messages.&#10; *   This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.&#10; *  @input {int} listeningPort The port to listen on for incoming messages.&#10; *   This defaults to 8084.&#10; *   &#10; *  @parameter {string} receiveType See above.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, console, exports, get, input, output, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;// This accessor requires the optional 'udpSocket' module, which may or may&#10;// not be provided by an accessor host. Most hosts will provide this module.&#10;var UDPSocket = require('udpSocket');&#10;&#10;// Set up the accessor. In an XML specification, this information would&#10;// be provided in XML syntax.&#10;exports.setup = function() {&#10;    this.output('message');&#10;    this.output('listening', {'type':'boolean'});&#10;&#10;    this.input('listeningAddress', {&#10;        'value': '0.0.0.0',&#10;        'type':'string'&#10;    });&#10;    this.input('listeningPort', {&#10;        'value': 8084,&#10;        'type':'int'&#10;    });&#10;    this.parameter('receiveType', {&#10;        type : 'string',&#10;        value : 'string',&#10;    });&#10;    &#10;    // Attempt to add a list of options for types, but do not error out&#10;    // if the socket module is not supported by the host.&#10;    try {&#10;        this.parameter('receiveType', {&#10;            options : UDPSocket.supportedReceiveTypes()&#10;        });&#10;    } catch(err) {&#10;        this.error(err);&#10;    }&#10;};&#10;&#10;var socket = null;&#10;var running = false;&#10;&#10;exports.initialize = function() {&#10;	socket = null;&#10;	this.exports.closeAndOpen.call(this);&#10;	&#10;	// Listen for port inputs.&#10;    var self = this;&#10;    this.addInputHandler('listeningPort', function() {&#10;    	self.exports.closeAndOpen.call(self);&#10;    });&#10;    &#10;    running = true;&#10;};&#10;&#10;exports.closeAndOpen = function() {&#10;    var self = this;&#10;    if (socket) {&#10;    	&#10;    	// Close any previously open socket and make the connection&#10;    	// once the close is complete.&#10;    	socket.on('close', function() {&#10;    		socket = null;&#10;    		self.exports.closeAndOpen.call(self);&#10;    	});&#10;    	socket.close();&#10;    	&#10;    } else {&#10;    	var port = this.get('listeningPort');&#10;    	if (port &gt;= 0) {&#10;    		socket = UDPSocket.createSocket();&#10;        	&#10;    		socket.on('error', function(message) {&#10;    			self.error(message);&#10;    		});&#10;    		socket.setReceiveType(this.get('receiveType'));&#10;&#10;    		socket.on('message', function(message) {&#10;    			if (running) {&#10;    				self.send('message', message);&#10;    			}&#10;    		});&#10;    		socket.on('listening', function(message) {&#10;    			if (running) {&#10;    				self.send('listening', true);&#10;    			}&#10;    		});&#10;    		socket.on('close', function() {&#10;    			if (running) {&#10;    				self.send('listening', false);&#10;    				&#10;    			}&#10;    		});&#10;    		socket.bind(port, this.get('listeningAddress'));&#10;    	}&#10;    }&#10;};&#10;&#10;&#10;exports.wrapup = function() {&#10;	running = false;&#10;	if (socket) {&#10;		socket.close();&#10;		socket = null;&#10;	}&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/net/UDPSocketListener.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="listeningAddress" class="ptolemy.actor.parameters.PortParameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="string">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 190.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor listens for UDP (datagram) messages on the specified host&#10; interface and port. If the value of the &lt;code&gt;port&lt;/code&gt; input is initially&#10; negative, then this accessor waits until it receives a non-negative &lt;code&gt;port&lt;/code&gt;&#10; input before initiating listening. Otherwise, it begins listening&#10; during initialization. If at any time during execution it receives&#10; a &lt;code&gt;port&lt;/code&gt; input, then it will close any open socket and, if the new&#10; &lt;code&gt;port&lt;/code&gt; value is non-negative, open&#10; a new socket to the current &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt; When the connection is established, a &lt;code&gt;true&lt;/code&gt; boolean is sent to&#10; the &lt;code&gt;listening&lt;/code&gt; output. If the connection is broken during execution, then a &lt;code&gt;false&lt;/code&gt;&#10; boolean is sent to the &lt;code&gt;listening&lt;/code&gt; output. The swarmlet could respond to this by&#10; retrying to connect (send an event to the &lt;code&gt;port&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt; input).&lt;/p&gt;&#10;&lt;p&gt; The receive type can be any of those supported by the host.&#10; The list of supported types will be provided as options for the&#10; and &lt;code&gt;receiveType&lt;/code&gt; parameter. For the Ptolemy II host, these include at&#10; least 'string', 'number', 'image', and a variety of numeric types.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Hokeun Kim and Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="receiveType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="See above.">
            </property>
            <property name="message (port)" class="ptolemy.kernel.util.StringAttribute" value="The received message.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="True to indicate that listening has begun, false to&#10;  indicate that it has stopped.">
            </property>
            <property name="listeningAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The interface to listen on for incoming messages.&#10;  This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.">
            </property>
            <property name="listeningPort (port)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen on for incoming messages.&#10;  This defaults to 8084.">
            </property>
        </property>
        <port name="listeningAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="message" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="listeningPort" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ReceivedUDPPackets.input" relation="relation"/>
    <link port="Listening.input" relation="relation2"/>
    <link port="UDPSocketListener.message" relation="relation"/>
    <link port="UDPSocketListener.listening" relation="relation2"/>
</entity>
