<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WatchHandRaisingLightGDP" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="startTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{77.5, 40.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={89, 23, 1339, 676}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1105, 566]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.9823965655875461">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{552.6152677467401, 294.5126953125}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Read Moto watch accelerometer via UDP,&#10;and if the watch is being held vertically,&#10;generate a &quot;raised hand&quot; event. Publish this&#10;event to the GDP.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{140.0, 15.0}">
        </property>
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="run" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="node nodeHostInvoke.js -timeout 12000 hosts/node/@modelName@">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{665.0, 45.0}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Authors: Edward A. Lee, Christopher Brooks">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-5.0, 560.0]">
        </property>
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="2.0">
            <display name="Object spacing"/>
        </property>
        <property name="logAspectRatio" class="ptolemy.actor.parameters.DoubleRangeParameter" value="0.1200000000000001">
            <display name="Aspect ratio"/>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="If you have a TerraSwarm account, click here to open up&#10;https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchAndroidStudioSetup">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{5.0, 160.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchAndroidStudioSetup#WatchSoftwareRepo#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <property name="Annotation7" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo requires a Moto 360 Watch that has been programmed to&#10;run the WatchSensorUDP watchlet. &#10;Click here to open up https://github.com/terraswarm/WatchSoftware">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{5.0, 90.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://github.com/terraswarm/WatchSoftware#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set the bridgeIP parameter to the address of your Hue bridge.&#10;One way to find the IP address is to use nmap:&#10;  nmap 10.0.0.1/24">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-130.0, 180.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Hue">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Click on AccessorCodeGenerator&#10;to create Node Accessor Host Code&#10;and run it locally.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{730.0, 25.0}">
        </property>
    </property>
    <property name="Annotation8" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set the lightID parameter (an integer).&#10;To find out what lights are available to&#10;your bridge, examine the &quot;lights&quot; output&#10;of the Hue accessor. Look for lights where&#10;&quot;reachable&quot; is true.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-255.0, 75.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="JavaScript">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="AccessorSSHCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorSSHCodeGenerator">
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="$PTII/ptolemy/cg/kernel/generic/accessor/accessorInvokeSSH @userHost@ @codeDirectory@/@modelName@.js @timeout@">
        </property>
        <property name="userHost" class="ptolemy.data.expr.StringParameter" value="sbuser@10.0.0.1">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{665.0, 120.0}">
        </property>
    </property>
    <property name="Annotation9" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Click on AccessorSSHCodeGenerator&#10;to create Node Accesso Host Code&#10;and run it on a remote machine.&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{730.0, 105.0}">
        </property>
    </property>
    <property name="Annotation10" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="To run on a SwarmBox, you must have a TerraSwarm account.&#10;Click here to open up&#10;https://www.terraswarm.org/testbeds/wiki/Main/SbuserSSHAccess">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{615.0, 275.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://www.terraswarm.org/testbeds/wiki/Main/SbuserSSHAccess#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <property name="Annotation11" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The SSH code generator uses the @terraswarm/accessors&#10;module from npm.  So, if you update the accessors, you&#10;will need to update @terraswarm/accessors.&#10;For details, click here to open&#10;https://www.terraswarm.org/accessors/wiki/Main/NPMUpload">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="{615.0, 170.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://www.terraswarm.org/accessors/wiki/Main/NPMUpload#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{745, 220}">
            </property>
        </property>
    </property>
    <property name="Annotation12" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="To run on a SwarmBox, UDP port 4568 must be open&#10;Click here to open up the TerraSwarm&#10;WatchGestureAccessorDemo page.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{615.0, 345.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://www.terraswarm.org/urbanheartbeat/wiki/WatchGestureAccessorDemo/Networking#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <entity name="Moto360SensorListener" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Read sensor data from a Moto 360 watch that is broadcasting the data via&#10; * UDP on the local network.&#10; *&#10; * FIXME: Give the app that needs to be running on the watch.&#10; *&#10; * Each sensor has its own output port.  The outputs will be objects with&#10; * fields 'watchID', a four-character string, and 'timestamp' representing&#10; * FIXME: what information is this?&#10; *&#10; * See https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&#10; * for details on the software that runs on the watch.&#10; *  &#10; * @accessor devices/Moto360SensorListener&#10; *&#10; * @output message The received message as a raw byte array.&#10; * @output {boolean} listening True to indicate that listening has begun, false to&#10; *   indicate that it has stopped.&#10; * @output accelerometer The accelerometer data from the watch. This is an object&#10; *   with fields x, y, z representing measured acceleration (or the earth's gravitational&#10; *   field, which is indistinguishable from acceleration). These will be in SI units&#10; *   of meters per second squared. The 'z' field points into&#10; *   the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10; *   The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10; *   is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10; *   roughly when the 12 o'clock is pointing straight up.&#10; * @output gyro The gyroscope data from the watch. This is an object&#10; *   with fields x, y, z representing measured angular rotation (in radians per second).&#10; *   The 'z' field represents rotation around an axis pointing into the watch face.&#10; *   The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10; *   These are the same axes as for the accelerometer.&#10; *&#10; * @input {string} listeningAddress The interface to listen on for incoming messages.&#10; *   This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.&#10; * @input {int} listeningPort The port to listen on for incoming messages.&#10; *   This defaults to 4567.&#10; *&#10; * @parameter accelerometerSensitivity If this is set to something other than zero,&#10; *   then this accessor will output accelerometer data only when the accelerometer&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; * @parameter gyroSensitivity If this is set to something other than zero,&#10; *   then this gyroscope will output data only when the gyro&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; *  &#10; * @author Christopher Brooks and Edward A. Lee&#10; * @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;// This accessor requires the optional 'udpSocket' module, which may or may&#10;// not be provided by an accessor host. Most hosts will provide this module.&#10;var UDPSocket = require('udpSocket');&#10;&#10;// FIXME: Use built in debug capability.&#10;var debug = false;&#10;&#10;// Initialize these to large numbers so that the first output always appears.&#10;// Accelerometer values.&#10;var previousX = -100.0;&#10;var previousY = -100.0;&#10;var previousZ = -100.0;&#10;// Gyro values.&#10;var previousGX = -100.0;&#10;var previousGY = -100.0;&#10;var previousGZ = -100.0;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/UDPSocketListener');&#10;&#10;    // Override the value of listeningPort in the parent.&#10;    this.input('listeningPort', {&#10;        'value': 4567, // 4567 is the value found in https://github.com/Zziwei/PackageSendTest&#10;        'type': 'int'&#10;    });&#10;    &#10;    // Accelerometer output port.&#10;    this.output('accelerometer');&#10;    this.parameter('accelerometerSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    // Gyro output port.&#10;    this.output('gyro');&#10;    this.parameter('gyroSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    this.parameter('receiveType', {&#10;        type: 'string',&#10;        value: 'unsignedbyte',&#10;        visibility:'expert'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    // FIXME: Is this needed?&#10;    exports.ssuper.initialize.call(this);&#10;};&#10;&#10;// Convert the 2 bytes data to a integer.&#10;// The first argument is the higher-order byte, and the second is the lower-order byte.&#10;// These are assumed to be non-negative numbers between 0 and 255.&#10;// If the result is greater than or equal to 2^15 = 32768, then the two bytes are&#10;// interpreted as a two's complement negative number and a negative integer is returned.&#10;// The returned result always lies between -32768 and 32767, inclusive.&#10;function bytesToInt(a, b) {&#10;    if (debug) {&#10;	    console.log('******** translating: ' + a + ', ' + b);&#10;	}&#10;    var c = a * Math.pow(2, 8);&#10;    c = c + b;&#10;    if (c &gt;= Math.pow(2, 15)) { &#10;        c = (Math.pow(2, 16) - c) * -1;&#10;    }&#10;    return c;&#10;}&#10;&#10;// Convert a timestamp to time string.&#10;function timestamp2string(time_stamp) {&#10;    try {&#10;        // Python time is in seconds.  JavaScript milliseconds.&#10;        //d = datetime.fromtimestamp(time_stamp / 1000.0);&#10;        time_stamp = Math.round(time_stamp * 1000);&#10;        var d = new Date(time_stamp);&#10;        //str1 = d.strftime(&quot;%Y-%m-%d %H:%M:%S.%f&quot;);&#10;        var str1 = d.toISOString();&#10;        //console.log(&quot;timestamp2string(&quot; + time_stamp + &quot;)&quot; + d + &quot; &quot; + Date.now());&#10;        &#10;        // Python: 2015-08-28 16:43:37.283000&#10;        // JavaScript: 2016-10-05T03:21:09.617Z &#10;        return str1;&#10;    } catch (e) {&#10;        console.log(e);&#10;        return '';&#10;    }&#10;}&#10;&#10;// Convert the 8 bytes timestamp to float.&#10;function bytes2float(byte_array) {&#10;    var value = (byte_array[0] &amp; 0xff) | ((byte_array[1] &lt;&lt; 8) &amp; 0xff00) | ((byte_array[2] &lt;&lt; 16) &amp; 0xff0000) | ((byte_array[3] &lt;&lt; 24) &amp; 0xff000000);&#10;    value += ((((byte_array[4]) &amp; 0xff) | ((byte_array[5] &lt;&lt; 8) &amp; 0xff00)) / 1000);&#10;    return value;&#10;}&#10;&#10;// Override the base class to attach a message listening function.&#10;exports.closeAndOpen = function () {&#10;&#10;    exports.ssuper.closeAndOpen.call(this);&#10;    var self = this;&#10;&#10;    exports.ssuper.socket.on('message', function (message) {&#10;        if (exports.ssuper.running) {&#10;            // Send out the raw message.&#10;            self.send('message', message);&#10;&#10;            var watchID = String.fromCharCode(message[0]) + String.fromCharCode(message[1]) +&#10;            		String.fromCharCode(message[2]) + String.fromCharCode(message[3]);&#10;            // Get the timestamp.&#10;            var timestamp = timestamp2string(bytes2float(message.slice(11, 17)));&#10;            &#10;            if (debug) {&#10;                console.log(&quot;Message received: &quot; + message);&#10;                console.log('Watch ID: ' + watchID);&#10;                console.log('Message type: ' + String.fromCharCode(message[4]));&#10;            }&#10;            // Check for accelerometer data.&#10;            if (message[4] == &quot;A&quot;.charCodeAt(0)) {&#10;            	// Received accelerometer data.&#10;            	// To get SI units of m/s^2, the scaling factor needs to match&#10;            	// what is used in the watch application's SCALE_ACCELEROMETER&#10;            	// variable.&#10;            	var SCALE_ACCELEROMETER = 836;&#10;            	var x = bytesToInt(message[6], message[5]) / SCALE_ACCELEROMETER;&#10;                var y = bytesToInt(message[8], message[7]) / SCALE_ACCELEROMETER;&#10;                var z = bytesToInt(message[10], message[9]) / SCALE_ACCELEROMETER;&#10;                &#10;                // Compare current data against previous data.&#10;                var sensitivity = self.getParameter('accelerometerSensitivity');&#10;                if (sensitivity == 0.0&#10;                        || Math.abs(x - previousX) &gt; sensitivity&#10;                        || Math.abs(y - previousY) &gt; sensitivity&#10;                        || Math.abs(z - previousZ) &gt; sensitivity) {&#10;                        &#10;                    // Output is to be produced.&#10;                    previousX = x;&#10;                    previousY = y;&#10;                    previousZ = z;&#10;                    &#10;                    var json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Accelerometer output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;accelerometer&quot;, json);&#10;                }&#10;            } else if (message[4] == &quot;G&quot;.charCodeAt(0)) {&#10;            	// Received gyro data.&#10;            	// To get units of radians per second, the scaling factor needs to match&#10;            	// what is used in the watch application's SCALE_GYRO&#10;            	// variable.&#10;            	var SCALE_GYRO = 5208;&#10;            	var x = bytesToInt(message[6], message[5]) / SCALE_GYRO;&#10;                var y = bytesToInt(message[8], message[7]) / SCALE_GYRO;&#10;                var z = bytesToInt(message[10], message[9]) / SCALE_GYRO;&#10;                &#10;                // Compare current data against previous data.&#10;                var sensitivity = self.getParameter('gyroSensitivity');&#10;                if (sensitivity == 0.0&#10;                        || Math.abs(x - previousGX) &gt; sensitivity&#10;                        || Math.abs(y - previousGY) &gt; sensitivity&#10;                        || Math.abs(z - previousGZ) &gt; sensitivity) {&#10;                        &#10;                    // Output is to be produced.&#10;                    previousGX = x;&#10;                    previousGY = y;&#10;                    previousGZ = z;&#10;                    &#10;                    var json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Gyro output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;gyro&quot;, json);&#10;                }&#10;            }&#10;            if (debug) {&#10;                console.log(&quot;---------&quot;);&#10;            }&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Moto360SensorListener.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Read sensor data from a Moto 360 watch that is broadcasting the data via&#10;UDP on the local network.&lt;/p&gt;&#10;&lt;p&gt;FIXME: Give the app that needs to be running on the watch.&lt;/p&gt;&#10;&lt;p&gt;Each sensor has its own output port.  The outputs will be objects with&#10;fields 'watchID', a four-character string, and 'timestamp' representing&#10;FIXME: what information is this?&lt;/p&gt;&#10;&lt;p&gt;See https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&#10;for details on the software that runs on the watch.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="listeningAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The interface to listen on for incoming messages.&#10;  This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.">
            </property>
            <property name="listeningPort (port)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen on for incoming messages.&#10;  This defaults to 4567.">
            </property>
            <property name="message (port)" class="ptolemy.kernel.util.StringAttribute" value="The received message as a raw byte array.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="True to indicate that listening has begun, false to&#10;  indicate that it has stopped.">
            </property>
            <property name="accelerometer (port)" class="ptolemy.kernel.util.StringAttribute" value="The accelerometer data from the watch. This is an object&#10;  with fields x, y, z representing measured acceleration (or the earth's gravitational&#10;  field, which is indistinguishable from acceleration). These will be in SI units&#10;  of meters per second squared. The 'z' field points into&#10;  the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10;  The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10;  is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10;  roughly when the 12 o'clock is pointing straight up.">
            </property>
            <property name="gyro (port)" class="ptolemy.kernel.util.StringAttribute" value="The gyroscope data from the watch. This is an object&#10;  with fields x, y, z representing measured angular rotation (in radians per second).&#10;  The 'z' field represents rotation around an axis pointing into the watch face.&#10;  The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10;  These are the same axes as for the accelerometer.">
            </property>
            <property name="accelerometerSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this accessor will output accelerometer data only when the accelerometer&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
            <property name="gyroSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this gyroscope will output data only when the gyro&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="listeningAddress" class="ptolemy.actor.parameters.PortParameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="unsignedbyte">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{105.0, 265.0}">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="listeningPort" class="ptolemy.actor.parameters.PortParameter" value="4568">
        </property>
        <property name="accelerometerSensitivity" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="gyroSensitivity" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <port name="listeningAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="listeningPort" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="message" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="accelerometer" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="gyro" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;//  FIXME: Allow an IP address to be dynamically provided.&#10;&#10;/** This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; *  To use it, you need to know the IP address of the Hue Bridge, which is&#10; *  unfortunately, somewhat hard to find out.  See below for some hints.&#10; *  &#10; *  Upon initialization, this accessor will use the userName parameter to&#10; *  contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; *  engage in a dialog with the Bridge to create a new user. This will require&#10; *  the user to push the button on the Hue Bridge when the alert to do so appears.&#10; *  The assigned userName will be recorded in the userName parameter.&#10; *  &#10; *  Upon authenticating with the Bridge, this accessor will output a data&#10; *  structure that reports all the lights that have been registered with the Bridge.&#10; *  These lights each have a number ID, such as '1'.  The state of each light&#10; *  will be reported in this output. The most important property of the state&#10; *  is the 'reachable' property. If this has value false, then the light is not&#10; *  reachable by the Bridge and therefore cannot be controlled.  &#10; *  &#10; *  The *commands* input is either a single command or an array of commands,&#10; *  where each command can have the following properties:&#10; *&#10; *  * id (required):  The id of the light to manipulate, which is a number.&#10; *  * on: true to turn on; false to turn off.&#10; *  * bri: Brightness.  0-255.&#10; *  * hue: Color, for bulbs that support color. This is a number in the&#10; *    range 0-65280.&#10; *  * sat: Saturation, for bulbs that support color. This is a number in the&#10; *    range 0-255.&#10; *  * transitiontime: The time in ms for the bulb to make the transition.&#10; *  &#10; *  Please see Hue docs for mapping colors to hue/saturation values:&#10; *  http://www.developers.meethue.com/documentation/core-concepts&#10; *  &#10; *  If a light is not accessible, this accessor warns but does not error.&#10; *  FIXME: Where is the warning appearing?&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily &#10; *  disconnected) and may be valid in the future. Rather than terminating the &#10; *  model, we hope that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Another option is to use the Discovery accessor and look for a device named&#10; *  philips-hue (or the name assigned to your bridge if assigned manually).&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input commands JSON commands for the Hue, for example,&#10; *                {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  @input {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The username for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10;     A username will be automatically generated if none is available.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    &#10;    this.input('commands');&#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;        value : &quot;turn off&quot;,&#10;        type: &quot;string&quot;,&#10;        options : [&quot;none&quot;, &quot;restore&quot;, &quot;turn off&quot;]&#10;    });&#10;    this.output('lights');&#10;    this.output('assignedUserName', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;/** Add an input handler to react to commands.&#10; *  Commands will be ignored until the user is authenticated.&#10; *  If a bridge IP address has been given, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.  &#10; */&#10;exports.initialize = function() {&#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables &#10;    // while providing access to accessor functions.  &#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;        &#10;    // FIXME:  We need a way to dynamically supply the IP address.&#10;    // Recommend using a separate port.&#10;    this.addInputHandler('commands', this.hue.issueCommand);&#10;    this.hue.connect();&#10;};&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.  &#10; *  This will create an object with its own local state, allowing multiple &#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *  &#10; *  An instance of the returned hue object implements the following public functions:&#10; *&#10; *  * connect(): Contact the bridge and register the user, if needed.  Add an&#10; *    input handler to the trigger input to submit commands to the bridge. &lt;/li&gt;&#10; *  * issueCommand():  Issue a command to the bridge.  A command is an object &#10; *    that may contain the following fields:&#10; *&#10; *    * id (required):  The id of the light to manipulate. &#10; *    * on: true to turn on; false to turn off.&#10; *    * bri: Brightness.  0-255.&#10; *    * hue: Hue (for bulbs that support color).  0-65280.&#10; *    * sat: Saturation (for bulbs that support color). 0-255.&#10; *    * transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *&#10; *  For example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; * &#10; */&#10;function Hue() {&#10;    var hue = {};&#10;    &#10;    // Public variables. &#10;    hue.changedLights = [];&#10;    hue.lights = {};&#10;&#10;    // Private variables.&#10;    var authenticated = false;&#10;    var debug = true;&#10;    var handleRegisterUser;&#10;    var ipAddress = &quot;&quot;;&#10;    var maxRegisterAttempts = 10;&#10;    var maxRetries = 5;&#10;    var registerInterval = 5000;&#10;    var registerAttempts = 0;&#10;    var retryCount = 0;&#10;    var retryTimeout = 1000;&#10;    var timeout = 3000;&#10;    var url = &quot;&quot;;&#10;    var userName = &quot;&quot;; &#10;    var pendingCommands = [];&#10;    var alerted = false;&#10;    var errorOccurred = false;&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    // Public functions. &#10;    // Available to be used for e.g. inputHandlers.&#10;    &#10;    /** Contact the bridge and register the user, if needed. */&#10;    hue.connect = function() {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;    &#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;        &#10;        contactBridge();&#10;    };&#10;    &#10;    /** Issue a command to the bridge.  Commands are queued if not yet authenticated. */    &#10;    hue.issueCommand = function() {&#10;        if (errorOccurred) {&#10;            return;&#10;        }&#10;        var commands = self.get('commands');&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: issueCommand(): &quot; + util.inspect(commands));&#10;        }&#10;&#10;        // (Re)connect with the bridge&#10;        if (ipAddress !== self.getParameter('bridgeIP') || &#10;                    userName !== self.getParameter('userName')) {&#10;            console.log(&quot;New bridge parameters detected. Need to re-authenticate.&quot;);&#10;            authenticated = false;&#10;            hue.connect();&#10;        }&#10;&#10;        // If not yet connected, queue the command.&#10;        if (!authenticated) {&#10;            console.log(&quot;Not authenticated; queueing command.&quot;);&#10;            pendingCommands.push(commands);&#10;            return;&#10;        }&#10;        hue.processCommands(commands);&#10;    };&#10;    &#10;    /** Process the specified commands. The argument can be a single object&#10;     *  with properties for the command, or an array of such objects.&#10;     */&#10;    hue.processCommands = function(commands) {&#10;        if (typeof commands === 'string') {&#10;            commands = JSON.parse(commands);&#10;        }&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: processCommands() commands: &quot; + util.inspect(commands));&#10;        }&#10;        // Accept both arrays and non-arrays.&#10;        // The following concatenates the input with an empty array, ensuring the result&#10;        // is an array.&#10;        commands = [].concat(commands); &#10;&#10;        // Iterate over commands (assuming input is an array of commands)&#10;        for (var i = 0; i &lt; commands.length; i++) {&#10;            var command = {};&#10;            if (typeof commands[i] === 'string') {&#10;                commands[i] = JSON.parse(commands);&#10;            }&#10;            var lightID = commands[i].id;&#10;            &#10;            // Check whether input is valid&#10;            if (typeof lightID === 'undefined') {&#10;                self.error(&quot;Invalid command (no light id): &quot; + commands[i]);&#10;            } else {&#10;&#10;                // Keep track of changed lights to turn off during wrap up.&#10;                if (hue.changedLights.indexOf(lightID) == -1) {&#10;                    hue.changedLights.push(lightID);&#10;                }&#10;            &#10;                // Pack properties into object&#10;                if (typeof commands[i].on !== 'undefined') {&#10;                    command.on = commands[i].on;&#10;                }&#10;                if (typeof commands[i].bri !== 'undefined') {&#10;                    command.bri = limit(commands[i].bri, 0, 255);&#10;                }&#10;                if (typeof commands[i].hue !== 'undefined') {&#10;                    command.hue = limit(commands[i].hue, 0, 65280);&#10;                }&#10;                if (typeof commands[i].sat !== 'undefined') {&#10;                    command.sat = limit(commands[i].sat, 0, 255);&#10;                }&#10;                if (typeof commands[i].transitiontime !== 'undefined') {&#10;                    command.transitiontime = commands[i].transitiontime;&#10;                }&#10;            }&#10;&#10;            if (Object.keys(command).length &lt; 1) {&#10;                self.error(&quot;Invalid command (no properties): &quot; + JSON.stringify(commands[i]));&#10;            } else {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands() command: &quot; + JSON.stringify(command));&#10;                }&#10;                var options = {&#10;                    body : JSON.stringify(command),&#10;                    timeout : 10000,&#10;                    url : url + &quot;/&quot; + userName + &quot;/lights/&quot; + encodeURIComponent(lightID) + &quot;/state/&quot;&#10;                };&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands(): PUT request: options: &quot; + JSON.stringify(options));&#10;                }&#10;                http.put(options, function(response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js: processCommands(): response status: &quot; + response.statusMessage);&#10;                        console.log(&quot;Hue.js: processCommands(): response body: &quot; + response.body);&#10;                    }&#10;                    reportIfError(response);&#10;                });&#10;            }&#10;        }&#10;    };&#10;&#10;    // Private functions.&#10;    &#10;    /** Handle an error. This will report it on the console and then retry a &#10;     *  fixed number of times before giving up.  A retry is a re-invocation of &#10;     *  registerUser().&#10;     */&#10;    function bridgeRequestErrorHandler(err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.error('Error connecting to Hue Bridge:');&#10;        console.error(err);&#10;        if (retryCount &lt; maxRetries) {&#10;            console.log('Will retry');&#10;            retryCount++;&#10;            setTimeout(contactBridge, retryTimeout);&#10;        } else {&#10;            self.error('Could not reach the Hue Bridge at ' + url +&#10;                       ' after ' + retryCount + ' attempts.');&#10;            errorOccurred = true;&#10;        }&#10;    }&#10;    &#10;    /** Contact the bridge.  Register the user, if needed.&#10;     */&#10;    function contactBridge() {&#10;        console.log(&quot;Attempting to connect to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;            if (response !== null) {&#10;                console.log(&quot;Got a response from the bridge: &quot; + response.body);&#10;                if (errorOccurred) {&#10;                    // Fatal error has occurred. Ignore response.&#10;                    self.error('Error occurred before response arrive. Response ignored');&#10;                    return;&#10;                }&#10;                if (response.statusCode != 200) {&#10;                    // Response is other than OK. Retry if not a fatal error.&#10;                    bridgeRequestErrorHandler(response.statusMessage);&#10;                } else {&#10;                    var lights = JSON.parse(response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;            &#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            // Prevent the alert from coming up more than once.&#10;                            alerted = true;&#10;                            alert(userName + &quot; is not a registered user.\n&quot; +&#10;                                  &quot;Push the link button on the Hue bridge to register.&quot;);&#10;                            // Oddly, the invalid userName, which has the right form,&#10;                            // is not an acceptable parameter value. Since it is invalid&#10;                            // anyway, discard it and replace.&#10;                            userName = 'ptolemy_user';&#10;                            // It takes two successive posts to register a new user.&#10;                            // Issue the first one now, then attempt again later.&#10;                            registerUser();&#10;                            console.log(&quot;Will register user in &quot; + registerInterval + &quot; ms&quot;);&#10;                            handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                        } else {&#10;                            console.error('Error occurred when trying to get Hue light status:' + description);&#10;                            self.error(description);&#10;                            errorOccurred = true;&#10;                        }&#10;                    } else if (lights) {&#10;                        console.log(&quot;Authenticated!&quot;);&#10;                        authenticated = true;&#10;                        &#10;                        // Process any previously queued requests.&#10;                        if (pendingCommands) {&#10;                            for (var i = 0; i &lt; pendingCommands.length; i++) {&#10;                                hue.processCommands(pendingCommands[i]);&#10;                            }&#10;                            pendingCommands = [];&#10;                        }&#10;                        hue.lights = lights;&#10;                        self.send('lights', lights);&#10;                    }&#10;                }&#10;            } else {&#10;                self.error(&quot;Unable to connect to bridge.&quot;);&#10;                errorOccurred = true;&#10;            }&#10;        }).on('error', function() {console.log('FIXME');});&#10;    }&#10;    &#10;    /** Utility function to check that an object is a nonempty array.&#10;     *  @param obj The object.&#10;     */&#10;    function isNonEmptyArray(obj) {&#10;        return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;    }&#10;&#10;    /** Utility function to limit the range of a number&#10;     *  and to force it to be an integer. If the value argument&#10;     *  is a string, then it will be converted to a Number.&#10;     *  @param value The value to limit.&#10;     *  @param low The low value.&#10;     *  @param high The high value.&#10;     */&#10;    function limit(value, low, high) {&#10;        var parsed = parseInt(value);&#10;        if (typeof parsed === 'undefined') {&#10;            parsed = parseFloat(value);&#10;            if (typeof parsed === 'undefined') {&#10;                self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;                return 0;&#10;            } else {&#10;                parsed = Math.floor(parsed);&#10;            }&#10;        }&#10;        if (parsed &lt; low) {&#10;            return low;&#10;        } else if (parsed &gt; high) {&#10;            return high;&#10;        } else {&#10;            return parsed;&#10;        }&#10;    }&#10;    &#10;    /** Register a new user.  &#10;     *  This function repeats at registerInterval until successful or until&#10;     *  maxRegisterAttempts.  Some wait time is given between attempts for the &#10;     *  user to click the button on the Hue bridge.&#10;     */&#10;    function registerUser() {&#10;    &#10;        // Should be of the format {&quot;devicetype&quot;:&quot;my_hue_app#iphone peter&quot;}&#10;        // http://www.developers.meethue.com/documentation/getting-started&#10;        // (free registration required).&#10;        var registerData = {&#10;            devicetype : &quot;hue_accessor#&quot; + userName,&#10;        };&#10;        var options = {&#10;            body : JSON.stringify(registerData),&#10;            timeout: 10000,&#10;            url : url&#10;        };&#10;        http.post(options, function(response) {&#10;            var rsp = JSON.parse(response.body);&#10;            if (debug) {&#10;                console.log(&quot;Hue.js registerUser(): Response &quot; + JSON.stringify(rsp));&#10;            }&#10;            if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;                &#10;                var description = rsp[0].error.description;&#10;    &#10;                if (description.match(&quot;link button not pressed&quot;)&#10;                        || description.match(&quot;invalid value&quot;)) {&#10;                    // Retry registration for the given number of attempts.&#10;                    console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;                    registerAttempts++;&#10;                    &#10;                    if (registerAttempts &lt; maxRegisterAttempts){&#10;                        handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                    } else {&#10;                        errorOccurred = true;&#10;                        throw &quot;Failed to create user after &quot; + registerAttempts +&#10;                                &quot; attempt(s).&quot;;&#10;                    }&#10;                    return;&#10;                } else {&#10;                    errorOccurred = true;&#10;                    throw description;&#10;                }&#10;            } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;                authenticated = true;&#10;                &#10;                // The bridge will return a username.  Save it.&#10;                userName = rsp[0].success.username;&#10;                self.setParameter('userName', userName);&#10;                self.send('assignedUserName', userName);&#10;                if (handleRegisterUser !== null) {&#10;                    clearTimeout(handleRegisterUser);&#10;                }&#10;                // contact the bridge and find the available lights&#10;                contactBridge();&#10;            } else {&#10;                throw &quot;Unknown error registering new user&quot;;&#10;            }&#10;        });&#10;    };&#10;    &#10;    /** If the response indicates an error, report it.&#10;     *  Return true if the response is an error.&#10;     */&#10;     function reportIfError(response) {&#10;        var body = response.body;&#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;        if (isNonEmptyArray(body) &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server responds with error: &quot; + &#10;                   body[0].error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;    };&#10;    &#10;    return hue;&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = {};&#10;    &#10;    var action = this.getParameter('onWrapup');&#10;    if (action !== &quot;none&quot;) {&#10;        // wrapup() gets called by the code generator after setting&#10;        // the types, so there is a chance that changedLights has not been set.&#10;        if (typeof this.hue !== 'undefined' &amp;&amp; typeof this.hue.changedLights !== 'undefined') {&#10;&#10;            for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;                options = {&#10;                    body : cmd,&#10;                    timeout : 10000, &#10;                    url : &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; + &#10;                        this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] + &#10;                        &quot;/state/&quot;&#10;                };&#10;                &#10;                var self = this;&#10;                &#10;                http.put(options, function(response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js wrapup(): Response &quot; + JSON.stringify(response));&#10;                    }&#10;                    if (hue.reportIfError(response)) {&#10;                        errorLights.push(lightID);&#10;                    }&#10;                });&#10;            }&#10;        }&#10;        if (errorLights.length !== 0) {&#10;            error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;        }&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; To use it, you need to know the IP address of the Hue Bridge, which is&#10; unfortunately, somewhat hard to find out.  See below for some hints.&lt;/p&gt;&#10;&lt;p&gt; Upon initialization, this accessor will use the userName parameter to&#10; contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; engage in a dialog with the Bridge to create a new user. This will require&#10; the user to push the button on the Hue Bridge when the alert to do so appears.&#10; The assigned userName will be recorded in the userName parameter.&lt;/p&gt;&#10;&lt;p&gt; Upon authenticating with the Bridge, this accessor will output a data&#10; structure that reports all the lights that have been registered with the Bridge.&#10; These lights each have a number ID, such as '1'.  The state of each light&#10; will be reported in this output. The most important property of the state&#10; is the 'reachable' property. If this has value false, then the light is not&#10; reachable by the Bridge and therefore cannot be controlled.  &lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;commands&lt;/em&gt; input is either a single command or an array of commands,&#10; where each command can have the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;id (required):  The id of the light to manipulate, which is a number.&lt;/li&gt;&#10;&lt;li&gt;on: true to turn on; false to turn off.&lt;/li&gt;&#10;&lt;li&gt;bri: Brightness.  0-255.&lt;/li&gt;&#10;&lt;li&gt;hue: Color, for bulbs that support color. This is a number in the&#10;range 0-65280.&lt;/li&gt;&#10;&lt;li&gt;sat: Saturation, for bulbs that support color. This is a number in the&#10;range 0-255.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;transitiontime: The time in ms for the bulb to make the transition.&lt;/p&gt;&#10;&lt;p&gt;Please see Hue docs for mapping colors to hue/saturation values:&#10;http://www.developers.meethue.com/documentation/core-concepts&lt;/p&gt;&#10;&lt;p&gt;If a light is not accessible, this accessor warns but does not error.&#10;FIXME: Where is the warning appearing?&#10;Sometimes Hue lights are transient (get unplugged, become temporarily &#10;disconnected) and may be valid in the future. Rather than terminating the &#10;model, we hope that the lights come back.&lt;/p&gt;&#10;&lt;p&gt;Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10;The bridge acquires its address via DHCP, so the address will typically change&#10;each time the bridge is rebooted. Moreover, the address will likely not be&#10;accessible except on the local network.  The bridge responds to UPnP packets&#10;(universal plug-and-play), so it is possible to use software such as&#10;&lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10;Another option is to use the Discovery accessor and look for a device named&#10;philips-hue (or the name assigned to your bridge if assigned manually).&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="commands (port)" class="ptolemy.kernel.util.StringAttribute" value="JSON commands for the Hue, for example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}">
            </property>
            <property name="bridgeIP (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The username for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.&#10;     A username will be automatically generated if none is available.">
            </property>
            <property name="undefined (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="commands" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="10.0.0.29">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="HhekgsYEMo3V1xTsAKQEvy-m4rfGuV6Sv7oosipL">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="onWrapup" class="ptolemy.data.expr.Parameter" value="turn off">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[495.0, 265.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <port name="commands" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="assignedUserName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="lights" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('a');&#10;	this.parameter('lightID', {type: 'string', value: 1});&#10;	this.output('light');&#10;	this.output('hand', {type: 'string'});&#10;}&#10;exports.initialize = function () {&#10;	var self = this;&#10;	var raised = false;&#10;	this.addInputHandler('a', function() {&#10;		var a = this.get('a');&#10;		if (!raised &amp;&amp; a.x &gt; 9.0) {&#10;			raised = true;&#10;			self.send('light', {id: self.getParameter('lightID'), on: true});&#10;			self.send('hand', 'Hand raised');&#10;		} else if (raised &amp;&amp; a.x &lt; 5.0) {&#10;			raised = false;&#10;			self.send('light', {id: self.getParameter('lightID'), on: false});&#10;			self.send('hand', 'Hand lowered');&#10;		}&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[290.0, 275.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <property name="lightID" class="ptolemy.data.expr.Parameter" value="10">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="a" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="light" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="hand" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GDPLogAppend" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/* Append to a Global Data Plane (GDP) log. */&#10;&#10;// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Append to a Global Data Plane (GDP) log.&#10; *&#10; *  @input {string} data The data to be written.&#10; *&#10; *  @parameter {string} debugLevel The value of the GDP debug flag.&#10; *  See gdp/README-developers.md for a complete summary.  The value is&#10; *  typically &quot;pattern=level&quot;, for example &quot;gdplogd.physlog=39&quot;.  To&#10; *  see the patterns, use the &quot;what&quot; command or strings&#10; *  $PTII/lib/libgdp* | grep '@(#)'.  Use &quot;*=40&quot; to set the debug&#10; *  level to 40 for all components. The value of level is not usually&#10; *  over 127.  Values over 100 may modify the behavior.&#10; *&#10; *  @param {string} logname The GDP logname.  By convention, use &#10; *  a reverse fully qualified name like&#10; *  &quot;org.ptolemy.actor.lib.jjs.modules.gdp.demo.GDPLogRead.GDPLogRead&quot;&#10; *&#10; *  @param {string} logdname The name of the logd server.  If empty,&#10; *  then the hostname of the local machine is used.&#10; *&#10; *  @input trigger An input that triggers firing the reading of the data.&#10; *&#10; *  @author Edward A. Lee, Nitesh Mor. Contributor: Christopher Brooks&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, addInputParameter, console, exports, get, getParameter, input, parameter, removeInputHandler, require */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var GDP = require('gdp');&#10;var handle = null;&#10;var log = null;&#10;var oldLogname = null;&#10;&#10;exports.setup = function() {&#10;    console.log(&quot;GDPLogAppend.js: setup()&quot;);&#10;    this.input('data', {'type': 'string'});&#10;    this.parameter('debugLevel', {'type': 'string'});&#10;    this.input('logname', {'type': 'string', 'value': 'org.terraswarm.accessors.myLog'});&#10;    this.input('logdname', {'type': 'string', 'value': ''});&#10;};&#10;&#10;/** Append data from the input port 'data' to the log.&#10; *  If necessary create the log.&#10; */&#10;exports.append = function() {&#10;    var logname = this.get('logname');&#10;    if (logname === '') {&#10;        throw new Error('The logname parameter cannot be empty.');&#10;    }&#10;    console.log('Append to log named: ' + logname);&#10;    if (logname != oldLogname) {&#10;	    var logdname = this.get('logdname');&#10;	    log = new GDP.GDP(logname, 2, logdname);&#10;	    log.setDebugLevel(this.getParameter('debugLevel'));&#10;	    oldLogname = logname;&#10;    }&#10;    var dataValues = this.get('data');&#10;    console.log('Append data: ' + dataValues);&#10;    log.append(dataValues);&#10;};&#10;&#10;/** Add an input handler that will append data. */&#10;exports.initialize = function() {&#10;    console.log(&quot;GDPLogAppend.js: initialize()&quot;);&#10;    oldLogname = null;&#10;    handle = this.addInputHandler('data', this.exports.append.bind(this));&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/gdp/GDPLogAppend.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="debugLevel" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="logname" class="ptolemy.actor.parameters.PortParameter" value="org.terraswarm.accessors.demo.WatchHandRaisingLightGDP">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="logdname" class="ptolemy.actor.parameters.PortParameter" value="edu.berkeley.eecs.gdp-01.gdplogd">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[440.0, 390.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="logname" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="logdname" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Moto360SensorListener.accelerometer" relation="relation"/>
    <link port="Hue.commands" relation="relation2"/>
    <link port="JavaScript.a" relation="relation"/>
    <link port="JavaScript.light" relation="relation2"/>
    <link port="JavaScript.hand" relation="relation3"/>
    <link port="GDPLogAppend.data" relation="relation3"/>
</entity>
