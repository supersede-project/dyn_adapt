<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ScarabHueController" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={143, 41, 1297, 679}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1063, 569]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{531.5, 284.5}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 245.0]">
        </property>
    </property>
    <property name="lightMap" class="ptolemy.data.expr.Parameter" value="{&quot;lights&quot;={{&quot;id&quot;=1, &quot;position&quot;={0, 0, 0}},{&quot;id&quot;=2, &quot;position&quot;={2, 0, 0}},{&quot;id&quot;=3, &quot;position&quot;={4, 0, 0}},{&quot;id&quot;=4, &quot;position&quot;={6, 0, 0}},{&quot;id&quot;=5, &quot;position&quot;={8, 0, 0}}}}">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 185.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo takes in Scarab's pose and a lightMap in JSON form.&#10;It sends light data to a Hue accessor to manipulate a set of Hue lights. &#10;&#10;The 'engine' JavaScript actor runs the following computation:&#10;At a set interval, it gets the nearest bulb to the Scarab. If this bulb is closer than a set threshold, the &#10;light is sent the set light conditions. The light conditions, interval and threshold are all&#10;parameters. &#10;&#10;Another accessor could be developed to create the lightMap when the Scarab is in mapping mode. ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 15.0]">
        </property>
    </property>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &#10; *  It sets the parameters of the specified&#10; *  light according to the input values.&#10; *  &#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;. &#10; *  If there is no such user on the bridge, the script registers such a user and requests&#10; *  (via an alert dialog) that the&#10; *  link button on the bridge be pushed to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  If it fails to reach the bridge, it will try again a few times before giving up.&#10; *  &#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan &#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout,  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;var retryCount = 0;&#10;&#10;// State variables.&#10;var timeout = 3000;&#10;var url = &quot;&quot;;&#10;var userName = &quot;&quot;;&#10;var reachableLights = [];&#10;var changedLights = [];&#10;var strReachableLights = &quot;&quot;;&#10;var handleRegisterUser;&#10;var registerInterval = 2000;&#10;var registerTimeout = 20000;&#10;var registerAttempts = 0;&#10;var handlers = [];&#10;&#10;// Uncomment the following to see the URL being used for the bridge.&#10;// alert(&quot;Connecting to: &quot; + bridge);&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    this.input('bridgeIPAddress', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.input('lightID', {&#10;        type: &quot;int&quot;,&#10;        value: 1&#10;    });&#10;    this.input('brightness', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('hue', {&#10;        type: &quot;number&quot;,&#10;        value: 65280&#10;    });&#10;    this.input('saturation', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    this.input('on', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.input('transitionTime', {&#10;        type: &quot;int&quot;,&#10;        value: 4&#10;    });&#10;    this.input('trigger', {value: true});&#10;};&#10;&#10;/** Initialize connection.&#10; *  Register user if not registered&#10; *  Input handlers are not added here in case we need to wait for user to register.&#10; *  @param retry True if this is a retry.&#10; */&#10;exports.initialize = function(retry) {&#10;&#10;    if (!retry) {&#10;        retryCount = 0;&#10;    }&#10;	&#10;    var ipAddress = this.get('bridgeIPAddress');&#10;    userName = this.getParameter('userName');&#10;&#10;    if (userName.length &lt; 11) {&#10;        throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;    }&#10;&#10;    if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;        throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;    }&#10;&#10;    url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;    &#10;    var self = this;&#10;    &#10;    // First make sure the bridge is actually there and responding.&#10;    var bridgeRequest = http.get(url, function (response) {&#10;    	if (response != null) {&#10;    	    // NOTE: null response is handled by the error handler registered below.&#10;	        if (response.statusCode != 200) {&#10;	            // Response is other than OK.&#10;	            bridgeRequestErrorHandler.call(self, response.statusMessage);&#10;	        } else {&#10;	            // Contacting the bridge succeeded. Next step is validating that the&#10;	            // provided username is valid.&#10;	            url = url + &quot;api/&quot;;&#10;	            http.get(url + userName + '/', function (response) {&#10;	            	if (response != null) {&#10;		                if (response.statusCode == 200) {&#10;		                    var lights = JSON.parse(response.body);&#10;		&#10;		                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;		                        var description = lights[0].error.description;&#10;		&#10;		                        if (description.match(&quot;unauthorized user&quot;)) {&#10;		                            // Add this user.&#10;		                            error(userName + &quot; is not a registered user.\n&quot; +&#10;		                                        &quot; Push the link button on the Hue bridge to register.&quot;);&#10;		                            registerUser.call(self);&#10;		                        } else {&#10;		                            console.error('Error occurred when trying to get Hue light status.');&#10;		                            error(description);&#10;		                        }&#10;		                    } else if (lights.lights) {&#10;		                        // Proceed to next stage of initialization&#10;		                        getReachableLights.call(self);&#10;		                    } else {&#10;		                        error(&quot;Unknown error. Could not authorize user.&quot;);&#10;		                    }&#10;		                } else {&#10;		                    error('Error with HTTP GET for lights status. Code: ' + response.statusCode);&#10;		                }&#10;	            	}&#10;                }).on('error', bridgeRequestErrorHandler.bind(this));&#10;	        }&#10;    	}&#10;    });&#10;    bridgeRequest.on('error', bridgeRequestErrorHandler.bind(this));&#10;};&#10;&#10;/** Handle an error. This will report it on the console and then retry a fixed number&#10; *  of times before giving up.  A retry is a re-invocation of initialize().&#10; */&#10;function bridgeRequestErrorHandler(err) {&#10;    // FIXME: We should do a UPnP discovery here and find a bridge.&#10;    // Could not connect to the bridge&#10;    console.log('Error connecting to Hue basestation.');&#10;    console.error(err);&#10;    // FIXME: Hardwired constants for number of retries and time between retries.&#10;    if (retryCount &lt; 5) {&#10;        console.log('Will retry');&#10;        retryCount++;&#10;        var self = this;&#10;        setTimeout(function() {&#10;            exports.initialize.call(self, true);&#10;        }, 1000);&#10;    } else {&#10;        error('Could not reach the Hue basestation at '&#10;                + this.get('bridgeIPAddress')&#10;                + ' after ' + retryCount + ' attempts.');&#10;    }&#10;}&#10;&#10;/** Register a new user.&#10; *  This function repeats at registerInterval until registration is&#10; *  successful, or until registerTimeout.&#10; *  It does so because it needs to wait until the user clicks&#10; *  the button on the Hue bridge.&#10; */&#10;function registerUser() {&#10;&#10;	var registerData = {&#10;		devicetype : userName,&#10;		username : userName&#10;	};&#10;    var options = {&#10;    		body : JSON.stringify(registerData),&#10;    		timeout: 10000,&#10;    		url : url&#10;    };&#10;    &#10;    var self = this;&#10;    &#10;    http.post(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            var description = response[0].error.description;&#10;&#10;            if (description.match(&quot;link button not pressed&quot;)) {&#10;                //repeat registration attempt unless registerTimeout has been reached&#10;                console.log('link button');&#10;                registerAttempts++;&#10;                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;                        &quot;s.&quot;;&#10;                }&#10;                handleRegisterUser = setTimeout(registerUser.bind(self), registerInterval);&#10;                return;&#10;            } else {&#10;                throw description;&#10;            }&#10;        } else if ((isNonEmptyArray(response) &amp;&amp; response[0].success) || &#10;        		JSON.parse(response.body)[0].success) {&#10;        		&#10;            //registration is successful - proceed to next stage of initialization&#10;            if (handleRegisterUser !== null) {&#10;                clearTimeout(handleRegisterUser);&#10;            }&#10;            getReachableLights.call(self);&#10;        } else {&#10;        	console.log(&quot;response &quot; + JSON.stringify(response));&#10;        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;            throw &quot;Error registering new user&quot;;&#10;        }&#10;    });&#10;}&#10;&#10;/** This function is only called after user has been registered.&#10; * Get reachable lights.&#10; * Add input handlers&#10; */&#10;function getReachableLights() {&#10;    url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;    http.get(url, function (response) {&#10;        if (response.statusCode == 200) {&#10;            var lights = JSON.parse(response.body);&#10;            for (var id in lights) {&#10;                if (lights[id].state.reachable) {&#10;                    reachableLights.push(id);&#10;                    console.log('Reachable bulb ID: ' + id);&#10;                }&#10;            }&#10;        }&#10;    });&#10;    this.addInputHandler('trigger', inputHandler.bind(this));&#10;}&#10;&#10;/** Get light settings from inputs and PUT */&#10;function inputHandler() {&#10;    // Check if light is reachable&#10;    var lightID = this.get('lightID').toString();&#10;    if (reachableLights.indexOf(lightID) == -1) {&#10;        console.log('Light ' + lightID + ' may not be reachable.');&#10;    }&#10;    // Keep track of changed lights to turn off during wrap up&#10;    if (changedLights.indexOf(lightID) == -1) {&#10;        changedLights.push(lightID);&#10;    }&#10;&#10;    // Get inputs and send command to light&#10;    var command = {&#10;        on: this.get('on') === true,&#10;        bri: limit(this.get('brightness'), 0, 255),&#10;        hue: limit(this.get('hue'), 0, 65280),&#10;        sat: limit(this.get('saturation'), 0, 255),&#10;        transitiontime: limit(this.get('transitionTime'), 0, 65535)&#10;    };&#10;&#10;    var cmd = JSON.stringify(command);&#10;    var options = {&#10;    		body : cmd,&#10;    		timeout : 10000,&#10;    		url : url + lightID + &quot;/state/&quot;&#10;    };&#10;    &#10;    http.put(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            error(&quot;Server responds with error: &quot; + response[0].error.description);&#10;        } &#10;    });&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = { };&#10;    &#10;    for (var i = 0; i &lt; changedLights.length; i++) {&#10;        options = {&#10;            body : cmd,&#10;            timeout : 10000, &#10;            url : url + changedLights[i] + &quot;/state/&quot;&#10;        };&#10;        &#10;        var self = this;&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = self.get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;&#10;/** Utility function to check that an object is a nonempty array.&#10; *  @param obj The object.&#10; */&#10;function isNonEmptyArray(obj) {&#10;    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;}&#10;&#10;/** Utility function to limit the range of a number&#10; *  and to force it to be an integer. If the value argument&#10; *  is a string, then it will be converted to a Number.&#10; *  @param value The value to limit.&#10; *  @param low The low value.&#10; *  @param high The high value.&#10; */&#10;function limit(value, low, high) {&#10;    var parsed = parseInt(value);&#10;    if (!parsed) {&#10;        error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;        return 0;&#10;    }&#10;    if (parsed &lt; low) {&#10;        return low;&#10;    } else if (parsed &gt; high) {&#10;        return high;&#10;    } else {&#10;        return parsed;&#10;    }&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="&quot;192.168.1.50&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.StringParameter" value="ptolemyuser565565">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="lightID" class="ptolemy.actor.parameters.PortParameter" value="1">
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="100.0">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <property name="saturation" class="ptolemy.actor.parameters.PortParameter" value="254.0">
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="1">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 365.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb.&lt;/p&gt;&#10;&lt;p&gt; It sets the parameters of the specified&#10; light according to the input values.&lt;/p&gt;&#10;&lt;p&gt; Logging on: This script attempts to access the bridge as a user with&#10; name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &amp;quot;ptolemyuser&amp;quot;. &#10; If there is no such user on the bridge, the script registers such a user and requests&#10; (via an alert dialog) that the&#10; link button on the bridge be pushed to authorize registration of this user.&#10; The user is given 20s to do this before an exception is thrown&#10; If it fails to reach the bridge, it will try again a few times before giving up.&lt;/p&gt;&#10;&lt;p&gt; Verifying the light: The final initialization step is to get a list of accessible lights.&#10; If the input light is not accessible, this accessor warns but does not error.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; and may be valid in the future. Rather than terminating the model, we hope&#10; that the lights come back.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; swarmlet could be created that runs periodically on a local network and publishes&#10; the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The user name for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.">
            </property>
            <property name="bridgeIPAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
        </property>
        <property name="trigger" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="RosSubscriber" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the &#10; *  WebSocketClient accessor to do so. &#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;. &#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function() {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function() {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */ &#10;exports.initialize = function() {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function() {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function() {&#10;    &#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;;&#10;    var fragmentCount = 0;&#10;    &#10;    var processMessage = function(message){&#10;&#10;        //Check for missing fragment&#10;        if (fragmentCount != message.num){&#10;            console.error(&quot;Fragment &quot;&#10;                + fragmentCount&#10;                + &quot; of message is missing. Instead received fragment number &quot;&#10;                + message.num);&#10;        }&#10;&#10;        //Accumulate data from fragment.&#10;        if (fragmentCount === 0){&#10;            originalMessage = message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount &lt; message.total - 1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount == message.total -1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount = 0;&#10;            return originalMessage;&#10;        } else {&#10;            console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;            return null;&#10;        }&#10;    };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function(message){&#10;    &#10;    var messageToSend;&#10;    if (getParameter('outputCompleteResponseOnly') &amp;&amp; message.op == &quot;fragment&quot;){&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null){&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/robotics/RosSubscriber.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/pose">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 360.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the &#10; WebSocketClient accessor to do so. &#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttle_rate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;int&quot;]}) The minimum amount of time (in ms) that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queue_length (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;int&quot;]}) The ROS size of the queue to buffer messages. Messages are buffered as a result of the throttle_rate. Defaults to 1.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="throttle_rate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queue_length" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragment_size" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="compression" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="throttleRate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queueLength" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragmentSize" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={1172, 293, 170, 193}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[170, 172]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 260.0]">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/**&#10; *  &lt;p&gt;This accessor takes in the current pose of the Scarab, and a lightMap which gives the lightID's &#10; *  and positions of available Hue lights in JSON form.&lt;/p&gt;&#10; *  &lt;pre&gt;&#10; *  lightMap = { &#10; *    &quot;lights&quot;: [&#10; *                {&quot;id&quot;: 1, &quot;position&quot;: {x, y, z}}, &#10; *                {&quot;id&quot;: 2, &quot;position&quot;: {x, y, z}}&#10; *              ]&#10; *  } &lt;/pre&gt;&#10; *  &lt;p&gt;At a given interval, it gets the closest light to the Scarab's current&#10; *  position. If this light is closer than a set threshold, it turns on this light to the given setting.  *  This interval, threshold and the light settings are parameters.&#10; *  parameters.&lt;/p&gt; &#10; *&#10; *  @accessor ScarabHueController&#10; *  @input {JSON} pose The current pose of the Scarab, formatted according to the ROS datatype geometry_msgs/Pose.&#10; *  @parameter {JSON} lightMap The coordinates and light id's of the Hue bulbs.&#10; *  @parameter {integer} checkLightsInterval The interval, in milliseconds, to find the nearest light bulb to the Scarab. &#10; *  @parameter {number} brightness Brightness of the light (number between 0-255). &#10; *  @parameter {number} hue Hue of the light (number between 0 - 62580). &#10; *  @parameter {number} saturation Saturation of the light (number between 0-255).&#10; *  @parameter {integer} transitionTime Transition time between light states, in multiples of 100 ms.&#10; *  @parameter {number} distanceThreshold. If the closest light's distance is less than distanceThresholdin m, turn the light on.&#10; *  @output {integer} lightID id of the light to turn on. &#10; *  @output {number} brightnessOut Brightness of the light (number between 0-255). &#10; *  @output {number} hueOut Hue of the light (number between 0 - 62580). &#10; *  @output {number} saturationOut Saturation of the light (number between 0-255).&#10; *  @output {boolean} onOut whether the light is on (true) or off (false). &#10; *  @output {integer} transitionTimeOut Transition time between light states, in mulitples of 100 ms. &#10; *&#10; */&#10;&#10;var lightMap;&#10;var handle;&#10;&#10;/** Define inputs, parameters and outputs. */&#10;exports.setup = function() {&#10;  this.input('pose');&#10;  this.parameter('lightMap', {&#10;    type: 'JSON', &#10;    value: {}&#10;  });&#10;  this.parameter('brightness', {&#10;    type: 'number',&#10;    value: 255&#10;  });&#10;  this.parameter('on', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;  this.parameter('hue', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;  this.parameter('saturation', {&#10;    type: 'number',&#10;    value: 254&#10;  });&#10;  this.parameter('transitionTime', {&#10;    type: 'int',&#10;    value: 1&#10;  });&#10;  this.parameter('checkLightsInterval', {&#10;    type: 'int', &#10;    value: 1000&#10;  });&#10;  this.parameter('distanceThreshold', {&#10;    type: 'number',&#10;    value: 1&#10;   });&#10;  this.output('lightIDOut', {&#10;    type: 'int'&#10;  });&#10;  this.output('brightnessOut', {&#10;    type: 'number'&#10;  });&#10;  this.output('hueOut', {&#10;    type: 'number'&#10;  });&#10;  this.output('saturationOut', {&#10;    type: 'number'&#10;  });&#10;  this.output('onOut', {&#10;    type: 'boolean'&#10;  });&#10;  this.output('transitionTimeOut', {&#10;    type: 'int'&#10;  });&#10; this.output('trigger', {&#10;    type: 'boolean'&#10;  });&#10;}&#10;&#10;/** check parameters and set interval to check lights */&#10;exports.initialize = function() {&#10;  lightMap = this.getParameter('lightMap');&#10;  if (lightMap == null || lightMap.lights == null ) {&#10;     throw &quot;Invalid light map&quot;;&#10;   }&#10;  handle = setInterval(checkLights, this.getParameter('checkLightsInterval'));&#10;}&#10;&#10;/** get closest light and send light data */&#10;function checkLights() {&#10;  var pose = this.get('pose');&#10;  //make sure pose isn't empty&#10;  if (Object.keys(pose) == 0) {&#10;    console.log('no pose yet');&#10;    return;&#10;  }&#10;  var sortedLights = []; //array of lights sorted by closest distance to Scarab&#10;  var nearestLight = {&quot;id&quot;: null, &quot;distance&quot;: null};&#10;&#10;  //get nearest light&#10;  for (var i = 0; i &lt; lightMap.lights.length; i++) {&#10;    var light = lightMap.lights[i];&#10;    var dx = Math.pow(pose.msg.pose.position.x-light.position[0], 2);&#10;    var dy = Math.pow(pose.msg.pose.position.y-light.position[1], 2);&#10;    var dz = Math.pow(pose.msg.pose.position.z-light.position[2], 2);&#10;    var distance = Math.sqrt(dx+dy+dz);&#10;    if (nearestLight.distance == null || distance &lt; nearestLight.distance) {&#10;       nearestLight.id = light.id;&#10;       nearestLight.distance = distance;&#10;    }&#10;  }&#10;&#10;  //send light information&#10;  if (nearestLight.distance &lt; this.getParameter('distanceThreshold')) {&#10;    this.send('lightIDOut', nearestLight.id);&#10;    this.send('transitionTimeOut', this.getParameter('transitionTime'));&#10;    this.send('onOut', this.getParameter('on'));&#10;    this.send('hueOut', this.getParameter('hue'));&#10;    this.send('brightnessOut', this.getParameter('brightness'));&#10;    this.send('saturationOut', this.getParameter('saturation'));&#10;    this.send('trigger', true);&#10;  }&#10;}&#10;&#10;/** clear timeout interval. */&#10;exports.wrapup = function() {&#10;  clearTimeout(handle);&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[280.0, 370.0]">
        </property>
        <property name="lightMap" class="ptolemy.data.expr.Parameter" value="lightMap">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="brightness" class="ptolemy.data.expr.Parameter" value="255.0">
        </property>
        <property name="on" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="hue" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="saturation" class="ptolemy.data.expr.Parameter" value="254.0">
        </property>
        <property name="transitionTime" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <property name="checkLightsInterval" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="distanceThreshold" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="lightIDOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="brightnessOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="hueOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="saturationOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="onOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="transitionTimeOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[380.0, 300.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Hue.lightID" relation="relation8"/>
    <link port="Hue.brightness" relation="relation2"/>
    <link port="Hue.hue" relation="relation3"/>
    <link port="Hue.saturation" relation="relation4"/>
    <link port="Hue.on" relation="relation5"/>
    <link port="Hue.transitionTime" relation="relation6"/>
    <link port="Hue.trigger" relation="relation7"/>
    <link port="RosSubscriber.received" relation="relation"/>
    <link port="Display.input" relation="relation8"/>
    <link port="JavaScript.pose" relation="relation"/>
    <link port="JavaScript.lightIDOut" relation="relation8"/>
    <link port="JavaScript.brightnessOut" relation="relation2"/>
    <link port="JavaScript.hueOut" relation="relation3"/>
    <link port="JavaScript.saturationOut" relation="relation4"/>
    <link port="JavaScript.onOut" relation="relation5"/>
    <link port="JavaScript.transitionTimeOut" relation="relation6"/>
    <link port="JavaScript.trigger" relation="relation7"/>
</entity>
