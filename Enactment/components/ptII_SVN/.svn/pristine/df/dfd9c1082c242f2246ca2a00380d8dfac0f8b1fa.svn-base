<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ThreadedJS" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{70.0, 30.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={68, 23, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{350.0, 262.0}">
    </property>
    <entity name="ThreadedComposite" class="ptolemy.actor.lib.hoc.ThreadedComposite">
        <doc>Execute the contained model in a separate thread with optional real-time properties.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.CopyCatIcon">
            <property name="echos" class="ptolemy.data.expr.Parameter" value="1">
            </property>
            <property name="echoBoxColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 1.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_configurer" class="ptolemy.actor.gui.EditorPaneFactory">
        </property>
        <property name="_configurer2" class="ptolemy.actor.gui.InsideEntityEditorPaneFactory">
        </property>
        <property name="_tableauFactory" class="ptolemy.actor.gui.LevelSkippingTableauFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{175.0, 145.0}">
        </property>
        <port name="input" class="ptolemy.actor.lib.hoc.MirrorPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.lib.hoc.MirrorPort">
            <property name="output"/>
        </port>
        <entity name="ThreadedCompositeInside" class="ptolemy.actor.lib.hoc.MirrorComposite$MirrorCompositeContents">
            <property name="annotation" class="ptolemy.kernel.util.Attribute">
                <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                    <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Make sure there is a director here!</text></svg></configure>
                </property>
                <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                    <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
                </property>
                <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                </property>
                <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="-5.0, 5.0">
                </property>
            </property>
            <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
                <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 65.0]">
                </property>
            </property>
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={373, 261, 934, 634}, maximized=false}">
            </property>
            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
            </property>
            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.1537211494463449">
            </property>
            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{305.3367443084716, 236.9635209290878}">
            </property>
            <port name="input" class="ptolemy.actor.lib.hoc.MirrorPort">
                <property name="input"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.lib.hoc.MirrorPort">
                <property name="output"/>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{580.0, 200.0}">
                </property>
            </port>
            <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
                <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('input');&#10;	this.output('output');&#10;};&#10;exports.fire = function() {&#10;&#10;   var value = this.get('input');&#10;   var request = (value != null &amp;&amp; !value.equals(&quot;&quot;)) ? value : &quot;{\&quot;request\&quot;:\&quot;null\&quot;}&quot;;&#10;&#10;   request=JSON.parse(request);&#10;&#10;&#10;   request=JSON.stringify(request);&#10;&#10;   this.send('output', request);&#10;}">
                    <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                        <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                        </property>
                    </property>
                </property>
                <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                    </property>
                    <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                    </property>
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="{270.0, 190.0}">
                </property>
                <port name="input" class="ptolemy.actor.TypedIOPort">
                    <property name="input"/>
                </port>
                <port name="output" class="ptolemy.actor.TypedIOPort">
                    <property name="output"/>
                </port>
            </entity>
            <entity name="Display" class="ptolemy.actor.lib.gui.Display">
                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 346, 499, 208}, maximized=false}">
                </property>
                <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="[325.0, 290.0]">
                </property>
            </entity>
            <relation name="relation" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            </relation>
            <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            </relation>
            <link port="input" relation="relation"/>
            <link port="output" relation="relation2"/>
            <link port="JavaScript.error" relation="relation3"/>
            <link port="JavaScript.input" relation="relation"/>
            <link port="JavaScript.output" relation="relation2"/>
            <link port="Display.input" relation="relation3"/>
        </entity>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="value" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{50.0, 145.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={831, 91, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{355.0, 145.0}">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{470.0, 90.0}">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{375.0, 90.0}">
        </property>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;1&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{370, 210}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ThreadedComposite.input&quot;,x=175.0,y=145.0}, tail={id=&quot;SingleEvent.output&quot;,x=50.0,y=145.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{305.0, 145.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;relation3.vertex1&quot;,x=305.0,y=145.0}, tail={id=&quot;Const.trigger&quot;,x=375.0,y=90.0}, points={305.0,90.0} },{ head={id=&quot;ThreadedComposite.output&quot;,x=175.0,y=145.0}, tail={id=&quot;relation3.vertex1&quot;,x=305.0,y=145.0}, points={} },{ head={id=&quot;Display.input&quot;,x=355.0,y=145.0}, tail={id=&quot;relation3.vertex1&quot;,x=305.0,y=145.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const.output&quot;,x=375.0,y=90.0}, tail={id=&quot;Stop.input&quot;,x=470.0,y=90.0}, points={} } }">
        </property>
    </relation>
    <link port="ThreadedComposite.input" relation="relation"/>
    <link port="ThreadedComposite.output" relation="relation3"/>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Display.input" relation="relation3"/>
    <link port="Stop.input" relation="relation2"/>
    <link port="Const.output" relation="relation2"/>
    <link port="Const.trigger" relation="relation3"/>
    <link port="Test.input" relation="relation3"/>
</entity>
