<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="http://dygraphs.com/dygraph-combined.js"></script>
<script>
	function drawChart(isMainChart){
		var mainChart;
		var config = {autoResize: true, graphTitle: 'Ptolemy II Simulation Result', enableLegend: true, horizontalAlign: 'center', verticalAlign: 'bottom', dataConnectWidth: 2, enableDataMarker: false, dataMarkerRadius: 3, eventsConnectWidth: 0, enableEventsMarker: true, eventsMarkerRadius: 4, xAxisMode: 'datetime', drawVerticalGridLine: false, xAxisTitle: 'Date & Time', yAxisMode: 'linear', drawHorizontalGridLine: true, yAxisTitle: 'Temperature'};
		var dataTable, seriesLabels;
		var divID = isMainChart ? 'mainChart' : 'previousChart';
		
		function createChart() {
			mainChart = new Dygraph(
				document.getElementById(divID),
				dataTable,
				{
					labels: seriesLabels,
					xlabel: config.xAxisTitle,
					ylabel: config.yAxisTitle,
					title: isMainChart ? 'Current Simulation Result' : 'Previous Simulation Result',
					avoidMinZero: true,
					drawXGrid: config.drawVerticalGridLine,
					drawYGrid: config.drawHorizontalGridLine,
					logscale: (config.yAxisMode == 'logarithmic'),
					legend: config.enableLegend ? 'always' : 'onmouseover',
					rangeSelectorHeight: 60,
					showRangeSelector: true,
					connectSeparatedPoints: true,
					labelsDiv: "legend-container",
					labelsSeparateLines: true,
					pointClickCallback: function(e, point) {
						jQuery("#eventsInfo-container").html('<b>Events at ' + 
								parseDatetime(point.xval) + '</b>: <br>' +
								getEvents(point.xval));
					}
				}
			);// End of new Dygraph()

			// customize for each series
			var seriesOpts = [], pointShapes = [], panelContent = '';
			for(var shape in Dygraph.Circles){
				pointShapes.push(Dygraph.Circles[shape]);
			}
			var strokePatterns = [null, [6, 3], [2, 3], [6, 2, 2, 2],
			                     [6, 2, 2, 2, 2, 2], [2, 4],
			                     [12, 5], [18, 5], [12, 5, 2, 5],
			                     [18, 5, 2, 5], [18, 5, 2, 5, 2, 5]];
			
			jQuery.each(seriesLabels, function(i, seriesName){
				
				// customize data series
				if(isEventTrace(seriesName)){
					seriesOpts[seriesName] = {
							drawPoints: config.enableEventsMarker,
							pointSize: config.eventsMarkerRadius,
							highlightCircleSize: config.eventsMarkerRadius + 2,
							drawPointCallback: pointShapes[i % pointShapes.length],
							strokePattern: strokePatterns[i % strokePatterns.length],
							strokeWidth: config.eventsConnectWidth
					};
				}else{
					seriesOpts[seriesName] = {
							drawPoints: config.enableDataMarker,
							pointSize: config.dataMarkerRadius,
							drawPointCallback: pointShapes[i % pointShapes.length],
							strokePattern: strokePatterns[i % strokePatterns.length],
							strokeWidth: config.dataConnectWidth,
							highlightCircleSize: config.dataMarkerRadius + 2,
							drawHighlightPointCallback: pointShapes[i % pointShapes.length]
					};
				}
			});
			mainChart.updateOptions(seriesOpts);
		}// End of createMainChart()
		
		// Parse the data and events series to the native format
		function parseJSON(){
			seriesLabels = ['x'], dataTable = [];
			var dataObj = {};
			var data = isMainChart ? newData : oldData;
			var events = isMainChart ? newEvents : oldEvents;
			
			jQuery.each(data, function(i, dataTrace){
				seriesLabels.push(dataTrace.name); 
				jQuery.each(dataTrace.value, function(j, item){
					var rowObj = {}, pointObj = {};
					pointObj[dataTrace.name] = item.y;
					rowObj[item.x] = pointObj;
					dataObj = jQuery.extend(true, dataObj, rowObj);
				});
			});
			
			jQuery.each(events, function(i, eventTrace){
				seriesLabels.push(eventTrace.name);
				jQuery.each(eventTrace.value, function(j, item){
					var rowObj = {}, pointObj = {};
					pointObj[eventTrace.name] = item.y;
					rowObj[item.x] = pointObj;
					dataObj = jQuery.extend(true, dataObj, rowObj);
				});
			});

			jQuery.each(dataObj, function(x, rowObj){
				var row = [];
				if(config.xAxisMode == 'datetime'){
					row.push(new Date(Number(x)));
				}else{
					row.push(Number(x));
				}
				jQuery.each(seriesLabels, function(i, name){
					if(i >= 1){
						if(name in rowObj){
							row.push(rowObj[name]);
						}else{
							row.push(null);
						}
					}
				});
				dataTable.push(row);
			});
		}

		// Get all events at a certain X axis point
		function getEvents(xPoint){
			var text = '';
			var events = isMainChart ? newEvents : oldEvents;
			jQuery.each(events, function(i, eventTrace){
				var tempArray = jQuery.grep(eventTrace.value, function(item, j){
					return (item.x == xPoint);
				});
				
				if(tempArray.length > 0){
					text += '<b>' + eventTrace.name + '</b>: ';
					jQuery.each(tempArray, function(j, item){
						if(j > 0)
							text += ', ';
						text += item.text;
					});
            		text += '<br>';
				}
			});
			return text||'None';
		}

		// Parse Datetime
		function parseDatetime(value){
			if(config.xAxisMode == 'datetime')
				return new Date(value).toUTCString();
			else 
				return value;
		}

		function isEventTrace(name){
			var count = 0;
			var events = isMainChart ? newEvents : oldEvents;
			jQuery.each(events, function(i, eventTrace){
				if(eventTrace.name == name)
					count++;
			});
			return (count > 0);
		}
		// create the main chart and in its callback, create the pie chart
		parseJSON();
		createChart();
	}
	
	// Use jQuery instead of dollar sign shorthand here, since some Ptolemy 
	// actors interpret dollar sign to mean "evaluate the expression" which will 
	// cause an error
	jQuery(document).ready(function () {
	  	jQuery('#TDay').val(params.TDay);
	  	jQuery('#TNight').val(params.TNight);
	  	jQuery('#LTime').val(params.LTime);
	  	jQuery('#RTime').val(params.RTime);
	  	
		drawChart(true);
		if(oldData.length > 0){
			drawChart(false);
		}
	});
</script>

