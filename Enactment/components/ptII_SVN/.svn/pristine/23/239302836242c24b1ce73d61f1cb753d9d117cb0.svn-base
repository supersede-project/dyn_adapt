<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ScarabArrowKeyController" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for the RosPublisher and RosSubscriber accessors, with the Scarab simulator.&#10;&#10;To use this with the Scarab simulation, you must have a Scarab or Scarab simulator&#10;publishing (current position) to the /pose topic, &#10;and subscibing to the /goal topic (for waypoints).&#10;The Scarab/simulator must also be running rosbridge to expose its topics to&#10;non-ROS programs. &#10;&#10;Follow instructions to setup simulation at &#10;https://www.terraswarm.org/accessors/wiki/Main/InstallingTheScarabsROSPackages#Run&#10; &#10;This accessor needs a RosSubscriber, subscribed to the /pose topic to give it pose input. &#10;It computes the next waypoint, based on arrow key input and outputs it to ScarabGoalPublisher,&#10;which will publish it to the goal topic. &#10;'U' moves robot forward, 'L' rotates left, 'R' rotates right, 'D' returns to origin.&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[30.0, 412.5]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={249, 27, 1038, 869}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[804, 759]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{402.0, 379.5}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 60.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <entity name="ArrowKeySensor" class="ptolemy.actor.lib.gui.ArrowKeySensor">
        <doc>Create a JFrame for sensing up, left, right, and down arrow key presses and releases</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 157.5]">
        </property>
    </entity>
    <entity name="NewGoal" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={65, 472, 1375, 408}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1375, 387]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[605.0, 272.5]">
        </property>
    </entity>
    <entity name="CurrentPose" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={114, 689, 1242, 193}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1242, 144]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[360.0, 337.5]">
        </property>
    </entity>
    <entity name="RosSubscriber2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the &#10; *  WebSocketClient accessor to do so. &#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;. &#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function() {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function() {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */ &#10;exports.initialize = function() {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function() {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function() {&#10;    &#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;;&#10;    var fragmentCount = 0;&#10;    &#10;    var processMessage = function(message){&#10;&#10;        //Check for missing fragment&#10;        if (fragmentCount != message.num){&#10;            console.error(&quot;Fragment &quot;&#10;                + fragmentCount&#10;                + &quot; of message is missing. Instead received fragment number &quot;&#10;                + message.num);&#10;        }&#10;&#10;        //Accumulate data from fragment.&#10;        if (fragmentCount === 0){&#10;            originalMessage = message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount &lt; message.total - 1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount++;&#10;            return null;&#10;        } else if (fragmentCount == message.total -1 ){&#10;            originalMessage += message.data;&#10;            fragmentCount = 0;&#10;            return originalMessage;&#10;        } else {&#10;            console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;            return null;&#10;        }&#10;    };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function(message){&#10;    &#10;    var messageToSend;&#10;    if (getParameter('outputCompleteResponseOnly') &amp;&amp; message.op == &quot;fragment&quot;){&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null){&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/robotics/RosSubscriber.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="192.168.131.15">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/pose">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 257.5]">
        </property>
        <property name="throttle_rate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queue_length" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragment_size" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="compression" class="ptolemy.data.expr.StringParameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the &#10; WebSocketClient accessor to do so. &#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;. &#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="throttleRate" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="queueLength" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="fragmentSize" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="RosPublisher" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor advertises and publishes to a ROS topic. It extends&#10; * the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&#10; *&#10; * During intialize, it will advertise the topic it will publish to,&#10; * along with its type. The purpose of 'advertise' here is to&#10; * establish the ROS topic if isn't already established. This is&#10; * slightly different from the 'advertise' function in NodeHandle&#10; * which simply publicizes that the the node will be publishing&#10; * messages to the topic.&#10; * &lt;ul&gt;&#10; * &lt;li&gt;If the topic does not already exist, and the type is valid, a&#10; * topic will be established with this type.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with a different type, no new topic&#10; * will be established&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with the same type, no new topic&#10; * will be established.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10; * topic will be established.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; *  On input from 'toSend', this accessor publishes that input to the &#10; *  aforementioned topic. &#10; *  The input from 'toSend' must be in JSON form, and must match the message&#10; *  datatype that the ROS topic is expecting. For example if ROS topic is &#10; *  expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; *  as follows:&#10; *  &lt;pre&gt; { &quot;data&quot;: &quot;hello world&quot; } &lt;/pre&gt;&#10; *  Some ROS types contain a header which consists of a sequence,&#10; *  timestamp, and a frame_id. If the ROS type has a header, you can&#10; *  either:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt;send the message on toSend without the header, and check the&#10; *  parameter 'addHeader'. This sends the message with a header with&#10; *  only the frame_id specified, and rosbridge will add the sequence&#10; *  and timestamp for you.&lt;/li&gt;&#10; *  &lt;li&gt;send a fully formed message with all fields in the header&#10; *  included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; *  &lt;/ul&gt;&#10; *  This accessor doesn't do any error checking. All error messages&#10; *  orginate from rosbridge and will appear on the console running&#10; *  rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; *  protocol specification&lt;/a&gt; site.&#10; *&#10; *  @accessor robotics/RosPublisher&#10; *  @parameter {string} topic The ROS topic to publish to.&#10; *  @parameter {string} ROStype The ROS datatype of the topic.&#10; *  @parameter {boolean} addHeader If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.&#10; *  @parameter {string} frame_id The frame_id of the header (only needed if a header is required).&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports, extend, get, getParameter, parameter */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in&#10; * WebSocketClient. Adds additional parameters regarding the ROS topic&#10; * to which to publish to.&#10; */ &#10;exports.setup = function() {&#10;    this.extend('net/WebSocketClient');&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('ROStype', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('addHeader', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.parameter('frame_id', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;};&#10;&#10;/** Override inputHandler on 'toSend' from WebSocketClient. */&#10;exports.toSendInputHandler = function() {&#10;    var msg = this.get('toSend');&#10;    // Add a header with a blank time and sequence info. This will be added by rosbridge.&#10;    if (this.getParameter('addHeader')) {&#10;        msg.header = {&#10;            &quot;frame_id&quot;: this.getParameter('frame_id')&#10;        };&#10;    }&#10;    &#10;    var data = {&#10;        &quot;op&quot;: &quot;publish&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;msg&quot;: msg &#10;    };&#10;    &#10;    this.exports.sendToWebSocket.call(this, data);&#10;};&#10;&#10;/**  Inherits initialize from WebSocketClient. &#10; *   Advertise the topic we are publishing to.&#10; */ &#10;exports.initialize = function() {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    var advertise = {&#10;        &quot;op&quot;: &quot;advertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;type&quot;: this.getParameter('ROStype')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, advertise);&#10;    &#10;};&#10;&#10;/** Unadvertise the topic and inherit wrapup from WebSocketClient. */&#10;exports.wrapup = function() {&#10;    var unadvertise = {&#10;        &quot;op&quot;: &quot;unadvertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unadvertise);&#10;    this.ssuper.wrapup();&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/robotics/RosPublisher.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/goal">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="ROStype" class="ptolemy.data.expr.StringParameter" value="geometry_msgs/PoseStamped">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="addHeader" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="frame_id" class="ptolemy.data.expr.StringParameter" value="map_hokuyo">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[665.0, 162.5]">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="connectTimeout" class="ptolemy.data.expr.Parameter" value="60000">
        </property>
        <property name="maxFrameSize" class="ptolemy.data.expr.Parameter" value="65536">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor advertises and publishes to a ROS topic. It extends&#10;the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&lt;/p&gt;&#10;&lt;p&gt;During intialize, it will advertise the topic it will publish to,&#10;along with its type. The purpose of 'advertise' here is to&#10;establish the ROS topic if isn't already established. This is&#10;slightly different from the 'advertise' function in NodeHandle&#10;which simply publicizes that the the node will be publishing&#10;messages to the topic.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the topic does not already exist, and the type is valid, a&#10;topic will be established with this type.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with a different type, no new topic&#10;will be established&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with the same type, no new topic&#10;will be established.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10;topic will be established.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt; On input from 'toSend', this accessor publishes that input to the &#10; aforementioned topic. &#10; The input from 'toSend' must be in JSON form, and must match the message&#10; datatype that the ROS topic is expecting. For example if ROS topic is &#10; expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; as follows:&#10; &lt;pre&gt; { &amp;quot;data&amp;quot;: &amp;quot;hello world&amp;quot; } &lt;/pre&gt;&#10; Some ROS types contain a header which consists of a sequence,&#10; timestamp, and a frame_id. If the ROS type has a header, you can&#10; either:&#10; &lt;ul&gt;&#10; &lt;li&gt;send the message on toSend without the header, and check the&#10; parameter 'addHeader'. This sends the message with a header with&#10; only the frame_id specified, and rosbridge will add the sequence&#10; and timestamp for you.&lt;/li&gt;&#10; &lt;li&gt;send a fully formed message with all fields in the header&#10; included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; This accessor doesn't do any error checking. All error messages&#10; orginate from rosbridge and will appear on the console running&#10; rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; protocol specification&lt;/a&gt; site.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to publish to.">
            </property>
            <property name="ROStype (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS datatype of the topic.">
            </property>
            <property name="addHeader (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.">
            </property>
            <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The frame_id of the header (only needed if a header is required).">
            </property>
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** &#10; * This accessor controls the Scarab movements based on arrow keypresses.&#10; * It takes in keypress inputs and the current position of the Scarab robot.&#10; * 'U' moves the robot forward, 'L' rotates left, 'R' rotates right, and&#10; * 'D' returns to origin.&#10; * It then computes and outputs the next waypoint to the Scarab.  &#10; * This accessor does not do any publishing or subscribing. It should take in inputs  &#10; * from a RosSubscriber accessor, subscribed to the topic /pose. &#10; * It should output the next waypoint to a ScarabGoalPublisher accessor. &#10; *&#10; *  @accessor ScarabArrowKeyController&#10; *  @input {integer} U input the number (1) when Up arrow is pressed.&#10; *  @input {integer} L input the number (1) when Up arrow is pressed.&#10; *  @input {integer} D input the number (1) when Up arrow is pressed.&#10; *  @input {integer} R input the number (1) when Up arrow is pressed.&#10; *  @input {JSON} pose Current pose of the Scarab formatted as the ROS datatype geometry_msgs/Pose. &#10; *  @output {JSON} newGoal Waypoint formatted according to the ROS datatype geometry_msgs/Pose.&#10; *  @author Marcus Pan &#10; */&#10;&#10;&#10;//change in radius and angle for each step&#10;var deltaRadius = 0.5;&#10;var deltaTheta = 0.5;&#10;&#10;//current cartesian position (w is angle) &#10;var px, py, pz, pw; &#10;//current quaternion orientation&#10;var qx, qy, qz, qw;&#10;&#10;var handleU, handleR, handleL, handleD;&#10;&#10;/** Define inputs and outputs */&#10;exports.setup = function() {&#10;  this.input('U', {&#10;    type: &quot;int&quot;,&#10;    value: 0&#10;  });&#10;  this.input('L', {&#10;    type: &quot;int&quot;,&#10;    value: 0&#10;  });&#10;  this.input('R', {&#10;    type: &quot;int&quot;,&#10;    value: 0&#10;  });&#10;  this.input('D', {&#10;    type: &quot;int&quot;,&#10;    value: 0&#10;  });&#10;  this.input('pose');&#10;  this.output('newGoal');&#10;}&#10;&#10;&#10;/** Attach function hanlders to key inputs. */&#10;exports.initialize = function() {&#10;  handleU = this.addInputHandler('U', uHandler);&#10;  handleR = this.addInputHandler('R', rHandler);&#10;  handleL = this.addInputHandler('L', lHandler);&#10;  //D returns to origin&#10;  handleD = this.addInputHandler('D', function() {&#10;      sendNewGoal(0, 0, 0, 1, 0, 0, 0);&#10;  });&#10;}&#10;&#10;/** Format waypoint according to ROS datatype getometry_msgs/Pose */&#10;function sendNewGoal(px, py, pz, qw, qx, qy, qz) {&#10;    var newGoal = {&#10;      &quot;pose&quot;: {&#10;         &quot;position&quot;: {&#10;           &quot;x&quot;: px,&#10;           &quot;y&quot;: py,&#10;           &quot;z&quot;: pz &#10;         },&#10;         &quot;orientation&quot;: {&#10;           &quot;w&quot;: qw, &#10;           &quot;x&quot;: qx, &#10;           &quot;y&quot;: qy,&#10;           &quot;z&quot;: qz&#10;         }&#10;      } &#10;    };&#10;    this.send('newGoal', newGoal);&#10;}&#10;&#10;/** Load global vars with current pose information. */&#10;function getCurrentPose() {&#10;  var currentPose = this.get('pose');&#10;  if (currentPose == null) {&#10;    console.log('null pose');&#10;  } else {&#10;    qw = currentPose.msg.pose.orientation.w;&#10;    qx = currentPose.msg.pose.orientation.x;&#10;    qy = currentPose.msg.pose.orientation.y;&#10;    qz = currentPose.msg.pose.orientation.z;&#10;    px = currentPose.msg.pose.position.x;&#10;    py = currentPose.msg.pose.position.y;&#10;    pz = currentPose.msg.pose.position.z;&#10;    //Scarab is a ground robot, so only rotation about z-axis is understood&#10;    if (qx != 0 || qy != 0) {&#10;      console.err('Rotation must be about z-axis.');&#10;    }&#10;    //get euclidean angle (0 deg faces x-axis), theta,  of current robot orientation, &#10;    //based on the following formulas:&#10;    //qw = cos(0.5*theta), qz = sin(0.5*theta)&#10;    var theta = 2*Math.acos(qw);&#10;    if (qw &gt; 0) {&#10;      if (qz &gt; 0) pw = theta;&#10;      else pw = -theta;&#10;    } else {&#10;      if (qz &gt; 0) pw = theta;&#10;      else pw = -theta;&#10;    }&#10;  }&#10;}&#10;/** Move forward by deltaRadius. */ &#10;function uHandler() { &#10;  if (get('U') == 1) { &#10;    getCurrentPose();&#10;    sendNewGoal(px + deltaRadius*Math.cos(pw), py + deltaRadius*Math.sin(pw), 0.0, &#10;      qw, 0.0, 0.0, qz); &#10;  }&#10;}&#10;&#10;/** Rotate left by detlaTheta. */&#10;function lHandler() {&#10;  if (get('L') == 1) {&#10;    getCurrentPose();&#10;    var phi = 0.5*(pw + deltaTheta);&#10;    sendNewGoal(px, py, 0.0, &#10;      Math.cos(phi), 0.0, 0.0, Math.sin(phi)); &#10;  }&#10;}&#10;&#10;/** Rotate right by detlaTheta. */&#10;function rHandler() {&#10;  if (get('R') == 1) {&#10;    getCurrentPose();&#10;    var phi = 0.5*(pw - deltaTheta);&#10;    sendNewGoal(px, py, 0.0,&#10;      Math.cos(phi),0.0, 0.0, Math.sin(phi)); &#10;  }&#10;}&#10;&#10;/** Remove input handlers. */&#10;function wrapup() {&#10;  this.removeInputHandler(handleU, 'U');&#10;  this.removeInputHandler(handleR, 'R');&#10;  this.removeInputHandler(handleL, 'L');&#10;  this.removeInputHandler(handleD, 'D');&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[450.0, 152.5]">
        </property>
        <property name="U" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="L" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="R" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="D" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <port name="U" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="L" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="R" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="D" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="newGoal" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[550.0, 167.5]">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[355.0, 197.5]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ArrowKeySensor.upArrow" relation="relation"/>
    <link port="ArrowKeySensor.leftArrow" relation="relation2"/>
    <link port="ArrowKeySensor.rightArrow" relation="relation3"/>
    <link port="ArrowKeySensor.downArrow" relation="relation4"/>
    <link port="NewGoal.input" relation="relation6"/>
    <link port="CurrentPose.input" relation="relation7"/>
    <link port="RosSubscriber2.received" relation="relation7"/>
    <link port="RosPublisher.toSend" relation="relation6"/>
    <link port="JavaScript.U" relation="relation"/>
    <link port="JavaScript.L" relation="relation2"/>
    <link port="JavaScript.R" relation="relation3"/>
    <link port="JavaScript.D" relation="relation4"/>
    <link port="JavaScript.pose" relation="relation7"/>
    <link port="JavaScript.newGoal" relation="relation6"/>
</entity>
