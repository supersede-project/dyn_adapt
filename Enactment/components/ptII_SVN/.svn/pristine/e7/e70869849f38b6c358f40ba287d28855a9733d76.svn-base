<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Testing" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="68.0, 32.0">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 928, 617}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{355.0, 244.265625}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The MochaTest accessor reads and executes a Mocha test file.&#10;This test file exercises capabilities of the common host.&#10;Results are sent to the output and also logged to the console.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{165.0, 10.0}">
        </property>
    </property>
    <entity name="MochaTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// A composite accessor that accepts a test file name and executes the tests.&#10;//&#10;// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** A composite accessor that accepts a test file name and executes the tests.&#10; *  Tests are written using the Mocha framework.  The test results are displayed &#10; *  to the console window.&#10; *  &#10; *  To run:&#10; *  For the browser, first, start the test server.  Please see:&#10; *  /accessors/web/hosts/browser/test/README.txt&#10; *  Open a browser window and point to:&#10; *  http://localhost:8088/hosts/browser/test/test/testRunner.html&#10; *  Click &quot;react to inputs&quot;.  The test output will appear at the top of the &#10; *  page, and also in the browser console window.  You may need to open a &#10; *  debugging pane to see the console window.  &#10; *  &#10; *  In node, from the command prompt, change to the directory:&#10; *  /accessors/web/hosts/node/test/mocha&#10; *  Execute:&#10; *  node ../../nodeHostShell.js &lt; ./testCommon.js&#10; *  &#10; *  In Cape Code, there is a demo available at:&#10; *  $PTII/ptolemy/actor/lib/jjs/modules/testing/demo/Testing/Testing.xml&#10; *  &#10; *  The Mocha framework allows developers to describe a test case, execute code, &#10; *  then check assertions.  Mocha tracks each assertion and reports if the &#10; *  assertion is satisfied or if it fails.  Add-on libraries extend Mocha's &#10; *  capabilities.  Chai is an assertion library offering &quot;should&quot;, &quot;expect&quot;, and &#10; *  &quot;assert&quot; styles.  Sinon is used for creating test spies, stubs and mocks; &#10; *  for example, mocking an HTTP response.   &#10; *  Please see this page for instructions on installing Mocha, Chai and Sinon &#10; *  and writing tests.  &#10; *  https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha&#10; *  &#10; *  For an overview of the testing capabilities of different hosts, please see:  &#10; *  https://www.terraswarm.org/accessors/wiki/Main/Testing&#10; *&#10; *  Test results are send to the output port and logged to the console.  &#10; *  A future improvement is to format results JUnit-style.&#10; *&#10; *  @accessor test/Test&#10; *  @input testFile The test file to execute.&#10; *  @output result The test result.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports, require*/&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;// FIXME:  Why does this not work if defined in testing.js vs. here??&#10;if (typeof window === 'undefined') {&#10;	var window = {};&#10;}&#10;&#10;try {&#10;    var commonHost = require('commonHost.js');&#10;} catch (err) {&#10;    // Needed for node host.&#10;    // Do not remove this unless (cd accessors/web; ant test.mocha) works.&#10;    var commonHost = require('../common/commonHost.js');&#10;}&#10;try {&#10;    var Testing = require('testing');&#10;    var testing = new Testing.Testing();&#10;} catch (err) {&#10;    if (commonHost.accessorHost === commonHost.accessorHostsEnum.NODE) {&#10;        // Needed for node host.&#10;        // Do not remove this unless (cd accessors/web; ant test.mocha) works.&#10;        console.error(&quot;require('testing') failed.  This happens under node.&quot;);&#10;    } else {&#10;        throw err;&#10;    }&#10;}&#10;&#10;exports.setup = function () {&#10;	// TODO:  Same file for all.  Put in common?  Or in test/Test?&#10;    this.input('testFile', {'type': 'string', 'value': &quot;/accessors/hosts/common/modules/mocha/testCommon.js&quot;});&#10;    this.output('result', {'type': 'string'});&#10;};&#10;&#10;exports.initialize = function () {&#10;    // Capture 'this' for use in callback.&#10;    var self = this;&#10;	&#10;    this.addInputHandler('testFile', function () {&#10;        var fileName = self.get('testFile');&#10;        if (fileName !== null &amp;&amp; fileName !== &quot;&quot;) {&#10;        	testing.loadTestFile(fileName);&#10;        	testing.run();&#10;        }&#10;    });&#10;    &#10;    try {&#10;        // Register an event listener for the test results.&#10;        testing.on('end', function(result) {&#10;    	    self.send('result', result);&#10;        });&#10;    } catch (err) {&#10;        if (commonHost.accessorHost === commonHost.accessorHostsEnum.NODE) {&#10;            // Needed for node host.&#10;            // Do not remove this unless (cd accessors/web; ant test.mocha) works.&#10;            console.error(&quot;testing.on failed.  This happens under node.&quot;);&#10;        } else {&#10;            throw err;&#10;        }&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/test/MochaTest.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[425.0, 105.0]">
        </property>
        <property name="testFile" class="ptolemy.actor.parameters.PortParameter" value="&quot;testing/demo/Testing/testFile.js&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="testFile" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;testing/demo/Testing/testFile.js&quot;">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{265.0, 105.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={503, 261, 359, 246}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[343, 186]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 105.0]">
        </property>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 105.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="MochaTest.testFile" relation="relation"/>
    <link port="MochaTest.result" relation="relation2"/>
    <link port="Const.output" relation="relation"/>
    <link port="Const.trigger" relation="relation3"/>
    <link port="Display.input" relation="relation2"/>
    <link port="SingleEvent.output" relation="relation3"/>
</entity>
