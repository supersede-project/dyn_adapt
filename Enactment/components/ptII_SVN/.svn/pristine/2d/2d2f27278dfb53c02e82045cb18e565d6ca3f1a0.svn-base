<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<!-- $Id$ -->













  
  
  
  
  
  
  
  
  
  
  
  
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">












  
  
  
  
  
  
  
  
  
  
  
  
  <title>Automatic FSMActor Synthesis</title>
</head>


<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#000099" link="#000099" vlink="#990099">













<h1><img style="width: 45px; height: 44px;" alt="G4LTL" src="G4LTL.gif">&nbsp; FSMActor synthesis from&nbsp;specifications</h1>













This is an attempt that tries to equip Ptolemy II with novel abilities to
automatically synthesize controllers from high-level specifications.
The underlying synthesis engine is based on a modified (without GUI) version of <a href="http://sourceforge.net/projects/g4ltl/#in_browser" target="_top">G4LTL</a>, a research tool developed by <a href="http://www.fortiss.org/en/home/">fortiss GmbH (An-Institut Technische Universit&auml;t M&uuml;nchen)</a>.
<h2>Methodology</h2>






The synthesis methodology follows concepts within (1) signals and
systems and (2) actor-oriented programming, where a controller takes
input tokens and produces subsequently output tokens. The synthesized
controller is a <span style="font-style: italic;">Mealy machine</span>.<br>






<br>






<table style="text-align: left; width: 752px; height: 422px;" border="1" cellpadding="2" cellspacing="2">






  <tbody>






    <tr>






      <td style="width: 489px;">Instructions</td>






      <td style="width: 213px;">Example</td>






    </tr>






    <tr>






      <td style="width: 489px;"><small>Specify input and output variables.&nbsp;</small></td>






      <td style="width: 213px;"><small>## Use two inputs and two outputs<br>






      <span style="font-style: italic; font-weight: bold;">INPUT req1, req2</span><br style="font-style: italic; font-weight: bold;">






      <span style="font-style: italic; font-weight: bold;">OUTPUT grant1, grant2</span></small></td>






    </tr>






    <tr>






      <td style="width: 489px;"><small>1. Specify the desired
behavior of the controller as a formula using logical operators, temporal operators,
and connect subformulas with appropriate parentheses.</small><br>






      
      
      
      
      
      
      <ul>






        <li><small>Logical operators: use "||", "&amp;&amp;", "!" ,&nbsp; "-&gt;" for logical or, and, not, and imply.</small></li>






        <li><small>Temporal operators (let A, B be subformulas):</small></li>






        
        
        
        
        
        
        <ul>






          <li><small>Use "ALWAYS (A)" to specify that the scenario A always holds</small></li>






          <li><small>Use "EVENTUALLY (A)" to specify that the scenario A eventually holds</small></li>






          <li><small>Use "NEXT (A)" to specify that in the next round, scenario A holds</small></li>






          <li><small>Use "A UNTIL B" to specify that A holds until B holds</small></li>






        
        
        
        
        
        
        </ul>






      
      
      
      
      
      
      </ul>






      <small>2. Every line in the specification is connected with &amp;&amp; implicitly.<br>






      <br>






      </small><small>3. A&nbsp;line starting with ASSUME means the
assumptions posed on the environment. Originally, in the synthesis
framework, the input is uncontrollable. Using
ASSUME allows to constrain unreasonable scenarios that the environment
never produces.<br>






      </small></td>






      <td style="width: 213px;"><small>## whenever the received input req1 is true, the produced token of grant1 should be true<br>






      </small><small><br>






      <span style="font-weight: bold; font-style: italic;">ALWAYS (req1 -&gt;&nbsp; grant1)</span><br>






      <br>






      </small><small>## whenever req1 is true, the next produced token of grant1 should be true<br>






      </small><small><br>






      <span style="font-weight: bold; font-style: italic;">ALWAYS (req1 -&gt;&nbsp; NEXT grant1)</span><br>






      <br>






      </small><small>## whenever req1 is true, eventually the controller should produce grant1 that is also true<br>






      <br>






      <span style="font-weight: bold; font-style: italic;">ALWAYS (req1 -&gt; EVENTUALLY grant1)</span></small></td>






    </tr>






    <tr>






      <td style="width: 489px;"><small>Invoke the synthesis engine to generate a correct controller.&nbsp;</small></td>






      <td style="width: 213px;"><small></small></td>






    </tr>






  
  
  
  
  
  
  </tbody>
</table>






<h2>Demonstrations</h2>













<ul>













  <li> <a href="#Demo_1">Demo 1: Simple arbitor</a></li>













  <li> <a href="#Demo_2">Demo 2: Arbitor with
guaranteed service for a super client</a></li>




  <li><a href="#Demo_3">Demo 3: Controller with error handling</a></li>













  <li> <a href="#Demo_3">Demo 4: Controllers with numerical
conditions</a></li>













</ul>













<h2><a name="Demo_1"> Demo 1: Simple arbitor</a></h2>













 In this demo, we illustrate how to automatically create an FSMActor from specification.
<ol>













  <li> Open <a href="demo/Arbitor/Arbitor.xml">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/Arbitor/Arbitor.xml</a>
  </li>













  <li>On the menu bar, select "File -&gt; Import -&gt; Import design using synthesis" </li>













  <li> A dialog box will appear, asking you to provide the
specification. The specification describes "what" should a controller
do without detailing how such controller is implemented. It is located
at <a href="demo/Arbitor/ArbitorLTL.txt">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/Arbitor/ArbitorLTL.txt</a></li>













  <li> One can select synthesis techniques
between&nbsp;Co-Buechi and Buechi solvers. Here we try Co-Buchi (both
solvers work). Select the unroll depth to be "<span style="font-weight: bold;">1"</span>.
Higher unroll depth enables to explore more possibilities in strategy
finding. However the synthesis&nbsp; time will also take longer.&nbsp;</li>








  <li>The synthesized FSMActor named "<span style="font-weight: bold; font-style: italic;">model</span>" now appears on the screen. To perform simulation, create links between ports.</li>








  
  
  
  
  
  
  
  
  <ul>








    <li>[Feed input to FSMActor] Link the output of <span style="font-weight: bold; font-style: italic;">Client1</span> to the port <span style="font-weight: bold; font-style: italic;">req1</span> in <span style="font-weight: bold; font-style: italic;">model</span>, and similarly, link the output of <span style="font-weight: bold; font-style: italic;">Client2</span> to the port <span style="font-weight: bold; font-style: italic;">req2</span> in <span style="font-weight: bold; font-style: italic;">model</span>.</li>








    <li>[Produce output from FSMActor] Link model.<span style="font-style: italic; font-weight: bold;">grant1</span> to the output screen <span style="font-style: italic; font-weight: bold;">Grant1</span>, and model.<span style="font-style: italic; font-weight: bold;">grant2</span> to the output screen <span style="font-weight: bold; font-style: italic;">Grant2</span>.</li>








  
  
  
  
  
  
  
  
  </ul>








  <li>The model is fully connected and can be executed with simulation.&nbsp;</li>








</ol>













<h2><a name="Demo_2"> </a>Demo 2: Arbitor
with guaranteed service for a super-client</h2>













<p> In this demo, we illustrate how to automatically create an arbitor which set explicit guarantees for the super-client. </p>













<ol>













  <li> Open&nbsp;<a href="demo/PriorityArbitor/PriorityArbitor.xml">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/PriorityArbitor/PriorityArbitor.xml</a></li>








  <li>On the menu bar, select "File -&gt; Import -&gt; Import design using synthesis" </li>








  <li>
A dialog box will appear, asking you to provide the specification. The
specification describes "what" should a controller do without detailing
how such controller is implemented. It is located at <a href="demo/PriorityArbitor/PriorityArbitorLTL.txt">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/PriorityArbitor/PriorityArbitorLTL.txt</a></li>








  <li>
One can select synthesis techniques between&nbsp;Co-Buechi and Buechi
solvers. Here we try Co-Buchi (both solvers work). Select the unroll
depth to be <span style="font-weight: bold;">"3"</span>. In this example, using unroll depth 1 is not sufficient to find a controller.</li>








  <li>The synthesized FSMActor named "<span style="font-weight: bold; font-style: italic;">model</span>" now appears on the screen. To perform simulation, create links between ports.</li>








  
  
  
  
  
  
  
  
  <ul>








    <li>[Feed input to FSMActor] Link the output of <span style="font-weight: bold; font-style: italic;">ImportantClient1</span> to the port <span style="font-weight: bold; font-style: italic;">req1</span> in <span style="font-weight: bold; font-style: italic;">model</span>, and similarly, link the output of <span style="font-weight: bold; font-style: italic;">Client2 / Client3</span> to the port <span style="font-weight: bold; font-style: italic;">req2 / req3</span> in <span style="font-weight: bold; font-style: italic;">model</span>.</li>








    <li>[Produce output from FSMActor] Link port&nbsp;<span style="font-style: italic;"><span style="font-weight: bold;"></span></span><span style="font-weight: bold; font-style: italic;">grant1 / grant2 / grant3</span> to the output screen <span style="font-style: italic; font-weight: bold;">Grant1 / Grant2 / Grant3</span>.</li>








  
  
  
  
  
  
  
  
  </ul>








  <li>The model is fully connected and can be executed with simulation.&nbsp;</li>








</ol>













<h2><a name="Demo_3"> </a>Demo 3: Controller with error handling&nbsp;</h2>













<p> In this example, we illustrate&nbsp;how to automatically create an
arbitor that allows to suspend itself when encountering errors.&nbsp;</p>




<ol>




  <li>Open&nbsp;<a href="demo/ErrorHandling/ErrorHandling.xml">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/ErrorHandling/ErrorHandling.xml</a></li>




  <li>On the menu bar, select "File -&gt; Import -&gt; Import design using synthesis" </li>




  <li>
A dialog box will appear, asking you to provide the specification. The
specification describes "what" should a controller do without detailing
how such controller is implemented. It is located at&nbsp;<a href="demo/ErrorHandling/ErrorHandlingLTL.txt">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/ErrorHandling/ErrorHandlingLTL.txt</a></li>




  <li>
One can select synthesis techniques between&nbsp;Co-Buechi and Buechi
solvers. Here we try Co-Buchi (both solvers work). Select the unroll
depth to be <span style="font-weight: bold;">"3"</span>. In this example, using unroll depth 1 is not sufficient to find a controller.</li>




  <li>The synthesized FSMActor named "<span style="font-weight: bold; font-style: italic;">model</span>" now appears on the screen. To perform simulation, create links between ports.</li>




  
  
  
  
  <ul>




    <li>[Feed input to FSMActor] Link the output of <span style="font-weight: bold;">SetVariable(V_err) /</span><span style="font-weight: bold;"> SetVariable2(V_oper) /</span><span style="font-weight: bold;"> SetVariable7(V_req1) /</span><span style="font-weight: bold;"> SetVariable6(V_req2)</span> to the port <span style="font-weight: bold; font-style: italic;">error/operator/req1/req2</span> in <span style="font-weight: bold; font-style: italic;">model</span><span style="font-weight: bold; font-style: italic;"></span>.</li>




    <li>[Produce output from FSMActor] Link port&nbsp;<span style="font-style: italic;"><span style="font-weight: bold;"></span></span><span style="font-weight: bold; font-style: italic;">grant1 / grant2 / stop </span>to the input of &nbsp;<span style="font-weight: bold;">SetVariable3</span><span style="font-style: italic; font-weight: bold;"> /&nbsp;</span><span style="font-weight: bold;">SetVariable4</span><span style="font-style: italic; font-weight: bold;"> /&nbsp;</span><span style="font-weight: bold;">SetVariable5.</span></li>




  
  
  
  
  </ul>




  <li>The model is fully connected and can be executed with simulation.&nbsp;</li>




</ol>














<ol>








</ol>












<h2><a name="Demo_4"> </a>Demo 4: Numerical
conditions&nbsp;</h2>













<p> In this example, we illustrate how can FSMActor synthesis be
extended with non-Boolean inputs. Please follow the instruction in the
model <a href="demo/Numerical/Numerical.xml">$PTII/ptolemy/vergil/basic/imprt/g4ltl/demo/Numerical/Numerical.xml</a> </p>




























</body>
</html>
