<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="JavaScript13" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={373, 208, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{340.0, 252.0}">
    </property>
    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="AUTO">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 25.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Construct a Ptolemy model by executing a script,&#10;run the model, and observe its final output.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 0.0]">
        </property>
    </property>
    <entity name="ExecuteActor" class="ptolemy.actor.lib.hoc.ExecuteActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 125.0]">
        </property>
        <port name="actor" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="count" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{580.0, 200.0}">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="step" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{9}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{295, 125}">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="2">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55, 125}">
        </property>
    </entity>
    <entity name="JavaScript2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Declare Java types that we will use.&#10;var TypedCompositeActor = Java.type('ptolemy.actor.TypedCompositeActor');&#10;var Ramp = Java.type('ptolemy.actor.lib.Ramp');&#10;var FileWriter = Java.type('ptolemy.actor.lib.FileWriter');&#10;var SetVariable = Java.type('ptolemy.actor.lib.SetVariable');&#10;var SDFDirector = Java.type('ptolemy.domains.sdf.kernel.SDFDirector');&#10;var Parameter = Java.type('ptolemy.data.expr.Parameter');&#10;&#10;exports.setup = function() {&#10;	this.parameter('iterations', {'type':'int', 'value':1});&#10;	this.output('model', {'type':'actor'});&#10;}&#10;&#10;exports.fire = function() {&#10;    // Create a model consisting of a Ramp (counter) feeding a FileWriter&#10;    // (which sends to standard out by default).&#10;    var toplevel = new TypedCompositeActor();&#10;    var ramp = new Ramp(toplevel, &quot;ramp&quot;);&#10;    var writer = new FileWriter(toplevel, &quot;writer&quot;);&#10;&#10;   // Create a top-level parameter named &quot;count&quot; that&#10;    // cause the ExecuteActor to produce on its &quot;count&quot;&#10;    // output the final count.&#10;    var setVariable = new SetVariable(toplevel, &quot;setVariable&quot;);&#10;    setVariable.variableName.setExpression(&quot;count&quot;);&#10;    new Parameter(toplevel, &quot;count&quot;);&#10;&#10;    // Connect the model.&#10;    var relation = toplevel.connect(ramp.output, writer.input);&#10;    setVariable.input.link(relation);&#10;&#10;    // Create a director and set its iterations parameter.&#10;    var director = new SDFDirector(toplevel, &quot;SDFDirector&quot;);&#10;&#10;    // Note that this actor has a parameter &quot;iterations&quot; which&#10;    // shadows that of the director, so we use getAttribute()&#10;    // to get the director parameter rather than just&#10;    // director.iterations, which would otherwise work.&#10;    director.getAttribute('iterations').setExpression(getParameter('iterations'));&#10;&#10;    // Send the constructed model to the output.&#10;    this.send('model', toplevel);&#10; &#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[50.0, 205.0]">
        </property>
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <port name="model" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="actor">
            </property>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ExecuteActor.actor" relation="relation4"/>
    <link port="ExecuteActor.count" relation="relation"/>
    <link port="ExecuteActor.step" relation="relation3"/>
    <link port="Test.input" relation="relation"/>
    <link port="Const.output" relation="relation3"/>
    <link port="JavaScript2.model" relation="relation4"/>
</entity>
