<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="completeCube" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="CCodeGenerator" class="ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator">
        <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$HOME/cg/">
        </property>
        <property name="generatorPackageList" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c.mbed">
        </property>
        <property name="variablesAsArrays" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[505.0, 60.0]">
        </property>
    </property>
    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="UNBOUNDED">
        </property>
        <property name="allowRateChanges" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="constrainBufferSizes" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="period" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 65.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator" class="ptolemy.cg.adapter.generic.program.procedural.adapters.ptolemy.actor.sched.StaticSchedulingDirectorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
            <property name="padBuffers" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="allowDynamicMultiportReference" class="ptolemy.data.expr.Parameter" value="false">
            </property>
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={20, 25, 855, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[621, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000187">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{363.40364583337544, 280.15540907130276}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <entity name="LEDCube" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[632.5, 175.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={253, 50, 934, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000095">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{339.9999999999997, 251.99999999999264}">
        </property>
        <port name="deltaSize" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 170.0]">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="deltaX" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[140.0, 205.0]">
            </property>
        </port>
        <port name="deltaY" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[125.0, 245.0]">
            </property>
        </port>
        <port name="deltaZ" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[110.0, 285.0]">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 320.0]">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
        <entity name="NeoPixel_LED_Strip" class="ptolemy.cg.lib.EmbeddedCodeActor">
            <property name="generatorPackage" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c">
            </property>
            <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#ifdef __MBED__&#10;#include &quot;mbed.h&quot;&#10;#include &quot;WS2812.h&quot;&#10;#endif&#10;#define WS2812_BUF 300&#10;int pixels[WS2812_BUF];&#10;#ifdef __MBED__&#10;WS2812 ws(D9, WS2812_BUF, 0, 5, 5, 0);&#10;#endif&#10;/**/&#10;&#10;/***initBlock***/&#10;for (int i = 0; i &lt; WS2812_BUF; i++) {&#10;pixels[i] = 0x000000;&#10;}&#10;#ifdef __MBED__&#10;ws.write(pixels);&#10;#endif&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;if ($getAndFree(clear)) {&#10;for (int i = 0; i &lt; WS2812_BUF; i++) {&#10;pixels[i] = 0x000000;&#10;}&#10;}&#10;Token *  indexTokenArray = $get(ledIndex);&#10;Token *  colorsTokenArray = $get(color);&#10;int arraySize = indexTokenArray-&gt;payload.IntArray-&gt;size;&#10;for (int i = 0; i &lt; arraySize; i++) {&#10;    pixels[IntArray_get(indexTokenArray, i)] = IntArray_get(colorsTokenArray,i);&#10;}&#10;IntArray_delete(indexTokenArray);&#10;IntArray_delete(colorsTokenArray);&#10;free(indexTokenArray);&#10;free(colorsTokenArray);&#10;#ifdef __MBED__&#10;ws.write(pixels);&#10;//wait(0.1);&#10;#endif&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;&#10;&#10;">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[590.0, 315.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
            <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                <property name="localClock" class="ptolemy.actor.LocalClock">
                    <property name="globalTimeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1.0E-10">
                    </property>
                    <property name="clockRate" class="ptolemy.data.expr.Parameter" value="1.0">
                    </property>
                </property>
                <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="vectorizationFactor" class="ptolemy.data.expr.Parameter" value="1">
                </property>
                <property name="allowDisconnectedGraphs" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="allowRateChanges" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="constrainBufferSizes" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="period" class="ptolemy.data.expr.Parameter" value="0.0">
                </property>
                <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="Scheduler" class="ptolemy.domains.sdf.kernel.SDFScheduler">
                    <property name="constrainBufferSizes" class="ptolemy.data.expr.Parameter" value="constrainBufferSizes">
                    </property>
                </property>
            </property>
            <property name="CodeGenerator_AutoAdded" class="ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator">
                <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$HOME/cg/">
                    <property name="allowFiles" class="ptolemy.data.expr.Parameter" value="false">
                    </property>
                    <property name="allowDirectories" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                </property>
                <property name="generateInSubdirectory" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="generatorPackage" class="ptolemy.data.expr.StringParameter" value="">
                </property>
                <property name="generatorPackageList" class="ptolemy.data.expr.StringParameter" value="generic.program.procedural.c">
                </property>
                <property name="overwriteFiles" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="generateComment" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="inline" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="maximumLinesPerBlock" class="ptolemy.data.expr.Parameter" value="2500">
                </property>
                <property name="measureTime" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="run" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="make -f @modelName@.mk run">
                </property>
                <property name="useMake" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="variablesAsArrays" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="verbosity" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="compile" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="compileCommand" class="ptolemy.data.expr.StringParameter" value="make -f @modelName@.mk">
                </property>
                <property name="generateEmbeddedCode" class="ptolemy.data.expr.Parameter" value="true">
                </property>
                <property name="generateCpp" class="ptolemy.data.expr.Parameter" value="false">
                </property>
                <property name="sourceLineBinding" class="ptolemy.data.expr.Parameter" value="false">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="60">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0, 0, 0, 1.0}">
                    </property>
                </property>
                <property name="rectangle3" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[-16.0, -1.0]">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="15.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="14.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                    </property>
                </property>
                <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[-16.0, -1.0]">
                    </property>
                    <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0.0">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="10.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="10.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.7, 0.7, 0.7, 1.0}">
                    </property>
                </property>
                <property name="rectangle4" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, -1.0]">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="15.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="14.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                    </property>
                </property>
                <property name="ellipse2" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, -1.0]">
                    </property>
                    <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0.0">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="10.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="10.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.7, 0.7, 0.7, 1.0}">
                    </property>
                </property>
                <property name="ellipse3" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, -8.0]">
                    </property>
                    <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0.0">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.78, 0.2, 1.0}">
                    </property>
                </property>
                <property name="ellipse4" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                    </property>
                    <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0.0">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.78, 0.2, 1.0}">
                    </property>
                </property>
                <property name="ellipse5" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 8.0]">
                    </property>
                    <property name="lineWidth" class="ptolemy.data.expr.Parameter" value="0.0">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="6.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.78, 0.2, 1.0}">
                    </property>
                </property>
                <property name="rectangle2" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                    <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                    </property>
                    <property name="width" class="ptolemy.data.expr.Parameter" value="59.0">
                    </property>
                    <property name="height" class="ptolemy.data.expr.Parameter" value="26.0">
                    </property>
                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                    </property>
                    <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.4}">
                    </property>
                    <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                    </property>
                </property>
                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={253, 133, 934, 634}, maximized=false}">
                </property>
                <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                </property>
                <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                </property>
                <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                </property>
            </property>
            <port name="ledIndex" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
                </property>
            </port>
            <port name="color" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
                </property>
            </port>
            <port name="clear" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="paramsToIndexes" class="ptolemy.cg.lib.EmbeddedCodeActor">
            <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#ifdef __MBED__&#10;#include &quot;mbed.h&quot;&#10;#endif&#10;#define nCOLs 10&#10;int xPos;&#10;int yPos;&#10;int zPos;&#10;int cubeSize;&#10;/**/&#10;&#10;/***initBlock***/&#10;xPos = 0;&#10;yPos = 0;&#10;zPos = 0;&#10;cubeSize = 2;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;&#10;////////////////////////////////////////////////////////&#10;xPos += $getAndFree(deltaX);&#10;yPos += $getAndFree(deltaY);&#10;zPos += $getAndFree(deltaZ);&#10;int red = $getAndFree(r);&#10;int green = $getAndFree(g);&#10;int blue = $getAndFree(b);&#10;cubeSize += $getAndFree(deltaSize);&#10;&#10;            if (xPos &lt; 0) {&#10;                xPos = 0;&#10;            }&#10;            if (yPos &lt; 0) {&#10;                yPos = 0;&#10;            }&#10;            if (zPos &lt; 0) {&#10;                zPos = 0;&#10;            }&#10;            if (xPos &gt;= nCOLs) {&#10;                xPos = nCOLs - 1;&#10;            }&#10;            if (yPos &gt;= nCOLs) {&#10;                yPos = nCOLs - 1;&#10;            }&#10;            if (zPos &gt;= nCOLs) {&#10;                zPos = nCOLs - 1;&#10;            }&#10;            if (cubeSize &gt;= nCOLs) {&#10;                cubeSize = nCOLs;&#10;            }&#10;            if (cubeSize &lt; 2) {&#10;                cubeSize = 2;&#10;            }&#10;&#10;if (!((xPos + cubeSize) &lt;= nCOLs &amp;&amp; (yPos + cubeSize) &lt;= nCOLs &amp;&amp; (zPos + cubeSize) &lt;= nCOLs)) {&#10;            if ((xPos + cubeSize) &gt; nCOLs) {&#10;                xPos += nCOLs - (xPos + cubeSize);&#10;            }&#10;            if ((yPos + cubeSize) &gt; nCOLs) {&#10;                yPos += nCOLs - (yPos + cubeSize);&#10;            }&#10;            if ((zPos + cubeSize) &gt; nCOLs) {&#10;                zPos += nCOLs - (zPos + cubeSize);&#10;            }&#10;}&#10;&#10;&#10;Token * intTokenArray = IntArray_new(0, 0);&#10;Token * colorTokenArray = IntArray_new(0, 0);&#10;&#10;    double bright;&#10;    bright = 1.0 / ((yPos + 1) * (yPos + 1));&#10;    for(int i = xPos; i &lt; xPos + cubeSize; i++) {&#10;        for(int j = zPos; j &lt; zPos + cubeSize; j++) {&#10;            int led;&#10;        if (j % 2 == 0) {&#10;            led = nCOLs*2 * j + i;&#10;        }&#10;        else {&#10;            led = nCOLs*2 * j + nCOLs + ((nCOLs - 1) - i);&#10;        }&#10;                IntArray_insert(intTokenArray, led);&#10;                IntArray_insert(colorTokenArray, ((int)(red*bright) &lt;&lt; 16) + ((int)(green*bright) &lt;&lt; 8) + ((int)(blue*bright)));&#10;        }&#10;    }&#10;    &#10;    //Panel 2&#10;    bright = 1.0 / (((nCOLs-1) - xPos - (cubeSize-1) + 1) * ((nCOLs-1) - xPos - (cubeSize-1) + 1));&#10;    for(int i = yPos; i &lt; yPos + cubeSize; i++) {&#10;        for(int j = zPos; j &lt; zPos + cubeSize; j++) {&#10;            int led;&#10;        if (j % 2 == 0) {&#10;            led = nCOLs*2 * j + nCOLs + i;&#10;        }&#10;        else {&#10;            led = nCOLs*2 * j + ((nCOLs - 1) - i);&#10;        }&#10;                IntArray_insert(intTokenArray, led);&#10;                IntArray_insert(colorTokenArray, ((int)(red*bright) &lt;&lt; 16) + ((int)(green*bright) &lt;&lt; 8) + ((int)(blue*bright)));&#10;        }&#10;    }&#10;    &#10;    //Panel 3&#10;    bright = 1.0 / (((nCOLs-1) - zPos - (cubeSize-1) + 1) * ((nCOLs-1) - zPos - (cubeSize-1) + 1));   &#10;    for(int i = xPos; i &lt; xPos + cubeSize; i++) {&#10;        for(int j = yPos; j &lt; yPos + cubeSize; j++) {&#10;            int led;&#10;        if (j % 2 == 0) {&#10;            led = nCOLs * j + i + 200;&#10;        }&#10;        else {&#10;            led = nCOLs * j + ((nCOLs - 1) - i) + 200;&#10;        }&#10;                IntArray_insert(intTokenArray, led);&#10;                IntArray_insert(colorTokenArray, ((int)(red*bright) &lt;&lt; 16) + ((int)(green*bright) &lt;&lt; 8) + ((int)(blue*bright)));&#10;        }&#10;    }&#10;&#10;&#10;$put(indexes, intTokenArray);&#10;$put(colors, colorTokenArray);&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[425.0, 310.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
            </property>
            <port name="deltaSize" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="indexes" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
                </property>
            </port>
            <port name="deltaX" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="deltaY" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="deltaZ" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="colors" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="r" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="g" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="b" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 390.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
        </entity>
        <entity name="HSBtoRGB" class="ptolemy.cg.lib.EmbeddedCodeActor">
            <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#include &lt;math.h&gt;&#10;/**/&#10;&#10;/***initBlock***/&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;double hue_in = $getAndFree(hue);&#10;double saturation_in = $getAndFree(saturation);&#10;double brightness_in = $getAndFree(brightness);&#10;    int red = 0, green = 0, blue = 0;&#10;    if (saturation == 0) {&#10;        red = green = blue = (int) (brightness_in * 255.0 + 0.5);&#10;    } else {&#10;        double h = (hue_in - (double)floor(hue_in)) * 6.0;&#10;        double f = h - (double)floor(h);&#10;        double p = brightness_in * (1.0 - saturation_in);&#10;        double q = brightness_in * (1.0 - saturation_in * f);&#10;        double t = brightness_in * (1.0 - (saturation_in * (1.0 - f)));&#10;        switch ((int) h) {&#10;            case 0:&#10;                red = (int) (brightness_in * 255.0 + 0.5);&#10;                green = (int) (t * 255.0 + 0.5);&#10;                blue = (int) (p * 255.0 + 0.5);&#10;                break;&#10;            case 1:&#10;                red = (int) (q * 255.0 + 0.5);&#10;                green = (int) (brightness_in * 255.0 + 0.5);&#10;                blue = (int) (p * 255.0 + 0.5);&#10;                break;&#10;            case 2:&#10;                red = (int) (p * 255.0 + 0.5);&#10;                green = (int) (brightness_in * 255.0 + 0.5);&#10;                blue = (int) (t * 255.0 + 0.5);&#10;                break;&#10;            case 3:&#10;                red = (int) (p * 255.0 + 0.5);&#10;                green = (int) (q * 255.0 + 0.5);&#10;                blue = (int) (brightness_in * 255.0 + 0.5);&#10;                break;&#10;            case 4:&#10;                red = (int) (t * 255.0 + 0.5);&#10;                green = (int) (p * 255.0 + 0.5);&#10;                blue = (int) (brightness_in * 255.0 + 0.5);&#10;                break;&#10;            case 5:&#10;                red = (int) (brightness_in * 255.0 + 0.5);&#10;                green = (int) (p * 255.0 + 0.5);&#10;                blue = (int) (q * 255.0 + 0.5);&#10;                break;&#10;        }&#10;    }&#10;    $put(r, red);&#10;    $put(g, green);&#10;    $put(b, blue);&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 330.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
            <port name="hue" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="saturation" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="brightness" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="r" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="g" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="b" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="Const2" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="1.0">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 395.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="0.5">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 450.0]">
            </property>
            <property name="DecoratorAttributesFor_CCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
                <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
                </property>
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation13" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="deltaSize" relation="relation3"/>
        <link port="deltaX" relation="relation4"/>
        <link port="deltaY" relation="relation5"/>
        <link port="deltaZ" relation="relation6"/>
        <link port="hue" relation="relation7"/>
        <link port="NeoPixel_LED_Strip.ledIndex" relation="relation2"/>
        <link port="NeoPixel_LED_Strip.color" relation="relation"/>
        <link port="NeoPixel_LED_Strip.clear" relation="relation8"/>
        <link port="paramsToIndexes.deltaSize" relation="relation3"/>
        <link port="paramsToIndexes.indexes" relation="relation2"/>
        <link port="paramsToIndexes.deltaX" relation="relation4"/>
        <link port="paramsToIndexes.deltaY" relation="relation5"/>
        <link port="paramsToIndexes.deltaZ" relation="relation6"/>
        <link port="paramsToIndexes.colors" relation="relation"/>
        <link port="paramsToIndexes.r" relation="relation9"/>
        <link port="paramsToIndexes.g" relation="relation11"/>
        <link port="paramsToIndexes.b" relation="relation12"/>
        <link port="Const.output" relation="relation8"/>
        <link port="HSBtoRGB.hue" relation="relation7"/>
        <link port="HSBtoRGB.saturation" relation="relation10"/>
        <link port="HSBtoRGB.brightness" relation="relation13"/>
        <link port="HSBtoRGB.r" relation="relation9"/>
        <link port="HSBtoRGB.g" relation="relation11"/>
        <link port="HSBtoRGB.b" relation="relation12"/>
        <link port="Const2.output" relation="relation10"/>
        <link port="Const3.output" relation="relation13"/>
    </entity>
    <entity name="SensorDataToGesture" class="ptolemy.cg.lib.EmbeddedCodeActor">
        <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#define MAX_COUNT 0&#10;int counter;&#10;int secondCounter;&#10;bool flag;&#10;/**/&#10;&#10;/***initBlock***/&#10;counter = 0;&#10;secondCounter = 0;&#10;flag = false;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;int finger1_val = $getAndFree(finger1);&#10;int finger2_val = $getAndFree(finger2);&#10;int finger3_val = $getAndFree(finger3);&#10;int finger4_val = $getAndFree(finger4);&#10;int finger5_val = $getAndFree(finger5);&#10;double roll_val = $getAndFree(roll);&#10;double pitch_val = $getAndFree(pitch);&#10;double yaw_val = $getAndFree(yaw);&#10;&#10;int deltaSize_val = 0;&#10;int deltaX_val = 0;&#10;int deltaY_val = 0;&#10;int deltaZ_val = 0;&#10;double hue_val = 0;&#10;&#10;int fingerThreshold = 350;&#10;int thumbThreshold = 200;&#10;&#10;if (++counter &gt;= MAX_COUNT) { &#10;    secondCounter++;&#10;    bool fBent[5];&#10;&#10;    fBent[0] = finger1_val &gt; fingerThreshold;&#10;    fBent[1] = finger2_val &gt; fingerThreshold;&#10;    fBent[2] = finger3_val &gt; fingerThreshold;&#10;    fBent[3] = finger4_val &gt; fingerThreshold;&#10;    fBent[4] = finger5_val &gt; thumbThreshold;&#10;    &#10;    if (secondCounter &gt; 3) {&#10;        //printf(&quot;%d %d %d %d %d\r\n&quot;, fBent[0], fBent[1], fBent[2], fBent[3], fBent[4]);&#10;        secondCounter = 0;&#10;    }&#10;    // Change size based on finger gesture  &#10;    if (flag) {  &#10;        if (fBent[0] &amp;&amp; fBent[1] &amp;&amp; fBent[2] &amp;&amp; (!fBent[3]) &amp;&amp; fBent[4]) &#10;            deltaSize_val = -1; &#10;        else if (fBent[0] &amp;&amp; fBent[1] &amp;&amp; (!fBent[2]) &amp;&amp; (!fBent[3]) &amp;&amp; fBent[4]) &#10;            deltaSize_val = 1; &#10;        flag = !flag;&#10;    }&#10;    else {&#10;        flag = !flag;&#10;    }&#10;    &#10;    if (fBent[0] &amp;&amp; (fBent[1]) &amp;&amp; (fBent[2]) &amp;&amp; (!fBent[4]))&#10;        hue_val = finger4_val/1000.0;  &#10;    &#10;    //Change position. Roll, pitch, and yaw are given as degrees. &#10;    if (roll_val &gt; 10 )&#10;        deltaX_val = -1;&#10;    else if (roll_val &lt; -10)&#10;        deltaX_val = 1;&#10;    if (pitch_val &gt; 10)&#10;        deltaZ_val = 1;&#10;    else if (pitch_val &lt; -10)&#10;        deltaZ_val = -1;&#10;    if (yaw_val &gt; 10)&#10;        deltaY_val = -1;&#10;    else if (yaw_val &lt; -10)&#10;        deltaY_val = 1;&#10;       &#10;    counter = 0;&#10;        &#10;} &#10;$put(deltaSize, deltaSize_val);&#10;$put(deltaX, deltaX_val);&#10;$put(deltaY, deltaY_val);&#10;$put(deltaZ, deltaZ_val);&#10;$put(hue, hue_val);&#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[487.5, 175.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <port name="deltaSize" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="deltaX" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="deltaY" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="deltaZ" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
        <port name="finger1" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger2" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger3" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger4" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger5" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="roll" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pitch" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="yaw" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="PacketToSensor" class="ptolemy.cg.lib.EmbeddedCodeActor">
        <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#define STREAM_FINGERS_QUATERNION 1&#10;#define STREAM_QUATERNION 2&#10;#define STREAM_FINGERS_RAW 3&#10;#define STREAM_RAW 4&#10;#define STREAM_FINGERS 5&#10;&#10;int q0, q1, q2, q3;&#10;double q00, q11, q22, q33;&#10;&#10;float roll, pitch, yaw;&#10;&#10;int iter, timeOfArrival, id, pkgtype;&#10;char bcc;&#10;&#10;// Stores the correction matrix&#10;int glove_roll;&#10;int glove_pitch;&#10;int glove_yaw;&#10;int glove_finger1;&#10;int glove_finger2;&#10;int glove_finger3;&#10;int glove_finger4;&#10;int glove_finger5;&#10;int k, j;&#10;double norm;&#10;/**/&#10;&#10;/***initBlock***/&#10;k = 0;&#10;j = 0;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;Token * sensor_data = $get(sensor_packet);&#10;&#10;int array_size = sensor_data-&gt;payload.IntArray-&gt;size;&#10;&#10;int *Buf = malloc(array_size * sizeof(int));&#10;&#10;for (iter = 0; iter &lt; array_size; iter++) {&#10;    Buf[iter] = IntArray_get(sensor_data, iter);&#10;}&#10;&#10;if ((int) Buf[0] == 0x24) {&#10;    if ((char) Buf[1] == 0x0a) {&#10;        //timeOfArrival = (Buf[6] &lt;&lt; 24) + (Buf[7] &lt;&lt; 16) + (Buf[8] &lt;&lt; 8) + Buf[9];&#10;        //id = (Buf[4] &lt;&lt; 8) + Buf[5];&#10;        pkgtype = Buf[3];&#10;&#10;        switch (pkgtype){&#10;            case STREAM_FINGERS_QUATERNION:&#10;            {&#10;                k = 10;&#10;                q0 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q1 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q2 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q3 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;        &#10;                glove_finger1 = ((Buf[k] &lt;&lt; 8) + Buf[k + 1]);&#10;                k += 2;&#10;                glove_finger2 = ((Buf[k] &lt;&lt; 8) + Buf[k + 1]);&#10;                k += 2;&#10;                glove_finger3 = ((Buf[k] &lt;&lt; 8) + Buf[k + 1]);&#10;                k += 2;&#10;                glove_finger4 = ((Buf[k] &lt;&lt; 8) + Buf[k + 1]);&#10;                k += 2;&#10;                glove_finger5 = ((Buf[k] &lt;&lt; 8) + Buf[k + 1]);&#10;                k += 2;&#10;        &#10;                q00 = q0 / 32768.0;&#10;                q11 = q1 / 32768.0;&#10;                q22 = q2 / 32768.0;&#10;                q33 = q3 / 32768.0;&#10;&#10;                norm = sqrt(q00 * q00 + q11 * q11 + q22 * q22 + q33 * q33);&#10;&#10;                roll = 180.0 * atan2(2 * (q00 * q11 + q22 * q33), 1 - 2 * (q11 * q11 + q22 * q22)) / 3.1415;       &#10;                pitch = 180.0 * asin(2 * (q00 * q22 - q33 * q11)) / 3.1415;&#10;                yaw = 180.0 * atan2(2 * (q00 * q33 + q11 * q22), 1 - 2 * (q22 * q22 + q33 * q33)) / 3.1415;&#10;&#10;                glove_roll = (int) roll;&#10;                glove_pitch = (int) pitch;&#10;                glove_yaw = (int) yaw;&#10;            }&#10;            break;&#10;            case STREAM_QUATERNION:&#10;            {&#10;                k = 10;&#10;                q0 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q1 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q2 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                q3 = (Buf[k] &lt;&lt; 24) + (Buf[k+1] &lt;&lt; 16) + (Buf[k+2] &lt;&lt; 8) + Buf[k+3];&#10;                k += 4;&#10;                &#10;                glove_finger1 = 0;&#10;                glove_finger2 = 0;&#10;                glove_finger3 = 0;&#10;                glove_finger4 = 0;&#10;                glove_finger5 = 0;&#10;&#10;                q00 = q0 / 32768.0;&#10;                q11 = q1 / 32768.0;&#10;                q22 = q2 / 32768.0;&#10;                q33 = q3 / 32768.0;&#10;&#10;                norm = sqrt(q00 * q00 + q11 * q11 + q22 * q22 + q33 * q33);&#10;                roll = 180.0 * atan2(2 * (q00 * q11 + q22 * q33), 1 - 2 * (q11 * q11 + q22 * q22)) / 3.1415;       &#10;                pitch = 180.0 * asin(2 * (q00 * q22 - q33 * q11)) / 3.1415;&#10;                yaw = 180.0 * atan2(2 * (q00 * q33 + q11 * q22), 1 - 2 * (q22 * q22 + q33 * q33)) / 3.1415;&#10;&#10;                glove_roll = (int) roll;&#10;                glove_pitch = (int) pitch;&#10;                glove_yaw = (int) yaw;&#10;            }&#10;            break;&#10;            case STREAM_FINGERS_RAW:&#10;            {&#10;                k = 10;&#10;                /*&#10;                TODO: If you want to use the gyro, accel or magn data implement this.&#10;                You will need to create new ports and send the data here to them.&#10;                for (j = 0; j &lt; 3; j++)&#10;                {&#10;                    gl.gyro[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (glove_gyro[j] &gt; 0x7fff) &#10;                        glove_gyro[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                for (j = 0; j &lt; 3; j++)&#10;                {&#10;                    gl.magn[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (glove_magn[j] &gt; 0x7fff) &#10;                        glove_magn[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                for (j = 0; j &lt; 3; j++)&#10;                {&#10;                    gl.accel[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (glove_accel[j]&gt;0x7fff) &#10;                        glove_accel[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                */&#10;&#10;                //Doing this to move over the gyro, accel and magn data&#10;                for (j = 0; j &lt; 9; j++) {&#10;                    k += 2;&#10;                }&#10;&#10;                glove_finger1 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger2 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger3 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger4 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger5 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;&#10;                glove_roll = 0;&#10;                glove_pitch = 0;&#10;                glove_yaw = 0;&#10;            }&#10;            break;&#10;            case STREAM_RAW:&#10;            {&#10;                k = 10;&#10;                /*&#10;                TODO: If you want to use the gyro, accel or magn data implement this.&#10;                You will need to create new ports and send the data here to them.&#10;                for (j = 0; j &lt; 3; j++){&#10;                    gl.gyro[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (gl.gyro[j] &gt; 0x7fff) &#10;                        gl.gyro[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                for (j = 0; j &lt; 3; j++){&#10;                    gl.magn[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (gl.magn[j] &gt; 0x7fff) &#10;                        gl.magn[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                for (j = 0; j &lt; 3; j++){&#10;                    gl.accel[j] = (Buf[k] &lt;&lt; 8) + (Buf[k+1]);&#10;                    if (gl.accel[j] &gt; 0x7fff) &#10;                        gl.accel[j] -= 0x10000;&#10;                    k += 2;&#10;                }&#10;                int y = 0;&#10;                for (y = 0; y &lt; 5; y++){&#10;                    gl.fingers[y] = 0.0;&#10;                }&#10;                */&#10;                &#10;                glove_finger1 = 0;&#10;                glove_finger2 = 0;&#10;                glove_finger3 = 0;&#10;                glove_finger4 = 0;&#10;                glove_finger5 = 0;&#10;&#10;                glove_roll = 0;&#10;                glove_pitch = 0;&#10;                glove_yaw = 0;&#10;            }&#10;            break;&#10;&#10;            case STREAM_FINGERS:&#10;            {&#10;                k = 10;&#10;&#10;                glove_finger1 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger2 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger3 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger4 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                glove_finger5 = ((Buf[k] &lt;&lt; 8) + Buf[k+1]);&#10;                k += 2;&#10;                &#10;                glove_roll = 0;&#10;                glove_pitch = 0;&#10;                glove_yaw = 0;&#10;            }&#10;            break;&#10;        }&#10;    }&#10;}&#10;&#10;IntArray_delete(sensor_data);&#10;free(sensor_data);&#10;free(Buf);&#10;&#10;$put(finger1_out, glove_finger1);&#10;$put(finger2_out, glove_finger2);&#10;$put(finger3_out, glove_finger3);&#10;$put(finger4_out, glove_finger4);&#10;$put(finger5_out, glove_finger5);&#10;$put(roll_out, glove_roll);&#10;$put(pitch_out, glove_pitch);&#10;$put(yaw_out, glove_yaw);&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 175.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <port name="finger1_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="finger2_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="finger3_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="finger4_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="finger5_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="roll_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="pitch_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="yaw_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
        <port name="sensor_packet" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="CCThreeThousand" class="ptolemy.cg.lib.EmbeddedCodeActor">
        <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#include &quot;mbed.h&quot;&#10;#include &quot;cc3000.h&quot;&#10;#include &quot;TCPSocketConnection.h&quot;&#10;#include &quot;TCPSocketServer.h&quot;&#10;#include &quot;mbed.h&quot;&#10;#define SSID &quot;CubeNet&quot;//&quot;Network1521&quot;//&#10;#define PASSWORD &quot;modelbased&quot;//&quot;gbvonaue7b8ahpa7&quot; //&#10;&#10;#define ECHO_SERVER_ADDRESS     &quot;192.168.1.33&quot;&#10;#define ECHO_SERVER_PORT        2000&#10;#define MMA8451_I2C_ADDRESS     (0x1d&lt;&lt;1)&#10;&#10;boolean sending;&#10;TCPSocketServer * server;&#10;TCPSocketConnection * socket;&#10;cc3000 * wifi;&#10;int numR;&#10;int packetSize;&#10;char *buf;&#10;int *bufInt;&#10;int dropCount;&#10;int retval;&#10;/**/&#10;&#10;/***initBlock***/&#10;&#10;//Init from the cc3000 example&#10;//DigitalOut PWR_EN1(PTB2);&#10;//DigitalOut PWR_EN2(PTB3);&#10;numR = 0;&#10;dropCount = 0;&#10;retval = 0;&#10;&#10;// Wi-Go set current to 500mA since we're turning on the Wi-Fi&#10;/*PWR_EN1 = 0;&#10;PWR_EN2 = 1;&#10;&#10;NVIC_set_all_irq_priorities(0x3);&#10;NVIC_SetPriority(SPI0_IRQn, 0x0);     // Wi-Fi SPI interrupt must be higher priority than SysTick&#10;NVIC_SetPriority(PORTA_IRQn, 0x1);&#10;NVIC_SetPriority(SysTick_IRQn, 0x2);  // SysTick set to lower priority than Wi-Fi SPI bus interrupt&#10;PORTA-&gt;PCR[16] |= PORT_PCR_ISF_MASK;&#10;PORTA-&gt;ISFR |= (1 &lt;&lt; 16);*/&#10;&#10;wifi = new cc3000(PTD4, PTC9, PTD0, SPI(PTD2, PTD3, PTD1), SSID, PASSWORD, WPA2, false); &#10;//wifi = new cc3000(PTD4, PTC9, PTC4, SPI(PTC6, PTC7, PTC5), SSID, PASSWORD, WPA2, false);&#10;wifi-&gt;init();&#10;if (wifi-&gt;connect() == -1) &#10;{&#10;    printf(&quot;Failed to connect. Please verify connection details and try again. \r\n&quot;);&#10;} else &#10;{&#10;    printf(&quot;IP address: %s \r\n&quot;, wifi-&gt;getIPAddress());&#10;}&#10;server = new TCPSocketServer;&#10;&#10;server-&gt;bind(ECHO_SERVER_PORT);&#10;server-&gt;listen();&#10;&#10;socket = new TCPSocketConnection;&#10;server-&gt;accept(*socket);&#10;socket-&gt;set_blocking(false, 1500);&#10;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;Token * packetToSend = $get(packetToSend_in);&#10;sending = $getAndFree(sending_in);&#10;packetSize = $getAndFree(packetSize_in);&#10;&#10;int array_size = packetToSend-&gt;payload.IntArray-&gt;size;&#10;int iter;&#10;&#10;char *packetString = new char[array_size];//malloc(array_size * sizeof(char));&#10;&#10;buf = new char[packetSize];&#10;&#10;for (iter = 0; iter &lt; array_size; iter++) {&#10;    packetString[iter] = (char) IntArray_get(packetToSend, iter);&#10;}&#10;&#10;if (sending == true) {&#10;    socket-&gt;send_all((char *)packetString, array_size);&#10;}&#10;else {&#10;    if (packetSize &gt; 0) {&#10;        while (numR &lt; packetSize) {&#10;            int retval = socket-&gt;receive(buf+numR, packetSize);&#10;            if(retval &lt; 0)&#10;            {&#10;                dropCount++;&#10;            } else&#10;            {&#10;                dropCount = 0;&#10;                numR += retval;&#10;            }&#10;            if(dropCount &gt; 1)&#10;            {&#10;                socket-&gt;close();&#10;                delete socket;&#10;                socket = new TCPSocketConnection;&#10;                server-&gt;accept(*socket);&#10;                socket-&gt;set_blocking(false, 1500);&#10;                dropCount = 0;&#10;            }&#10;        }&#10;        numR = 0;&#10;    }&#10;    else {&#10;        while (retval &lt; 0) {&#10;            int retval = socket-&gt;receive(buf, packetSize); &#10;        }&#10;    }&#10;}&#10;&#10;Token * bufInt = IntArray_new(0,0);&#10;&#10;for (iter = 0; iter &lt; packetSize; iter++) {&#10;    IntArray_insert(bufInt, (int) buf[iter]);&#10;}&#10;&#10;$put(data_out, bufInt);&#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{325.0, 340.0}">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <port name="data_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="packetToSend_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="sending_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="packetSize_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Correction" class="ptolemy.cg.lib.EmbeddedCodeActor">
        <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#define initTime 50&#10;#define alpha 0.5&#10;unsigned int count;&#10;// Stores the correction matrix&#10;double correction_roll;&#10;double correction_pitch;&#10;double correction_yaw;&#10;int correction_finger1;&#10;int correction_finger2;&#10;int correction_finger3;&#10;int correction_finger4;&#10;int correction_finger5;&#10;&#10;// Stores the corrected glove values&#10;double corrected_roll;&#10;double corrected_pitch;&#10;double corrected_yaw;&#10;int corrected_finger1;&#10;int corrected_finger2;&#10;int corrected_finger3;&#10;int corrected_finger4;&#10;int corrected_finger5;&#10;/**/&#10;&#10;/***initBlock***/&#10;count = 0;&#10;//correction = new Glove;&#10;//corrected = new Glove;&#10;//Initialize correction values to 0&#10;correction_roll = 0.0;&#10;correction_pitch = 0.0;&#10;correction_yaw = 0.0;&#10;correction_finger1 = 0;&#10;correction_finger2 = 0;&#10;correction_finger3 = 0;&#10;correction_finger4 = 0;&#10;correction_finger5 = 0;&#10;&#10;corrected_roll = 0.0;&#10;corrected_pitch = 0.0;&#10;corrected_yaw = 0.0;&#10;corrected_finger1 = 0;&#10;corrected_finger2 = 0;&#10;corrected_finger3 = 0;&#10;corrected_finger4 = 0;&#10;corrected_finger5 = 0;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;int gloveData_finger1 = $getAndFree(finger1_in);&#10;int gloveData_finger2 = $getAndFree(finger2_in);&#10;int gloveData_finger3 = $getAndFree(finger3_in);&#10;int gloveData_finger4 = $getAndFree(finger4_in);&#10;int gloveData_finger5 = $getAndFree(finger5_in);&#10;double gloveData_roll = $getAndFree(roll_in);&#10;double gloveData_pitch = $getAndFree(pitch_in);&#10;double gloveData_yaw = $getAndFree(yaw_in);&#10;&#10;int iter;&#10;&#10;// Normalize sensor data for initTime&#10;if (count &lt; initTime) {&#10;    count++;&#10;    correction_roll = (correction_roll*count + gloveData_roll)/(count+1);&#10;    correction_pitch = (correction_pitch*count + gloveData_pitch)/(count+1);&#10;    correction_yaw = (correction_yaw*count + gloveData_yaw)/(count+1);&#10;&#10;    correction_finger1 = (correction_finger1*count + gloveData_finger1)/(count+1);&#10;    correction_finger2 = (correction_finger2*count + gloveData_finger2)/(count+1);&#10;    correction_finger3 = (correction_finger3*count + gloveData_finger3)/(count+1);&#10;    correction_finger4 = (correction_finger4*count + gloveData_finger4)/(count+1);&#10;    correction_finger5 = (correction_finger5*count + gloveData_finger5)/(count+1);&#10;}&#10;else if (count &lt; 2*initTime) {&#10;    count++;&#10;}&#10;else {&#10;    corrected_roll = alpha*(gloveData_roll - correction_roll) + (1.0-alpha)*corrected_roll;&#10;    corrected_pitch = alpha*(gloveData_pitch - correction_pitch) + (1.0-alpha)*corrected_pitch;&#10;    corrected_yaw = alpha*(gloveData_yaw - correction_yaw) + (1.0-alpha)*corrected_yaw;&#10;&#10;    corrected_finger1 = alpha*(gloveData_finger1 - correction_finger1) + (1.0-alpha)*corrected_finger1;&#10;    corrected_finger2 = alpha*(gloveData_finger2 - correction_finger2) + (1.0-alpha)*corrected_finger2;&#10;    corrected_finger3 = alpha*(gloveData_finger3 - correction_finger3) + (1.0-alpha)*corrected_finger3;&#10;    corrected_finger4 = alpha*(gloveData_finger4 - correction_finger4) + (1.0-alpha)*corrected_finger4;&#10;    corrected_finger5 = alpha*(gloveData_finger5 - correction_finger5) + (1.0-alpha)*corrected_finger5;&#10;}&#10;&#10;$put(finger1_out, corrected_finger1);&#10;$put(finger2_out, corrected_finger2);&#10;$put(finger3_out, corrected_finger3);&#10;$put(finger4_out, corrected_finger4);&#10;$put(finger5_out, corrected_finger5);&#10;$put(roll_out, corrected_roll);&#10;$put(pitch_out, corrected_pitch);&#10;$put(yaw_out, corrected_yaw);&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/&#10;&#10;">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[320.0, 175.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <port name="finger1_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger2_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger3_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger4_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger5_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="roll_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pitch_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="yaw_out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger1_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger2_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger3_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger4_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="finger5_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="roll_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="pitch_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="yaw_in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="EmbeddedCodeActor" class="ptolemy.cg.lib.EmbeddedCodeActor">
        <property name="embeddedCode" class="ptolemy.kernel.util.StringAttribute" value="/***preinitBlock***/&#10;#include &quot;mbed.h&quot;&#10;#define bufferSize 6&#10;int sendBuf[bufferSize];&#10;boolean sending_val;&#10;int state;&#10;int numberOfPackets;&#10;&#10;/**/&#10;&#10;/***initBlock***/&#10;state = 0;&#10;numberOfPackets = 40;&#10;/**/&#10;&#10;/***fireBlock***/&#10;// The following is ordinary C code, except for&#10;// the macro references to the input and output&#10;// ports.&#10;&#10;if (state == 0) {&#10;    //Init packet&#10;    sendBuf[0] = 0x24;&#10;    sendBuf[1] = 0x0A;&#10;    sendBuf[2] = 0x03;&#10;    sendBuf[3] = 0x00;&#10;    sendBuf[4] = (sendBuf[0]+sendBuf[1]+sendBuf[2]+sendBuf[3])%256;&#10;    sendBuf[5] = '#';&#10;&#10;    sending_val = true;&#10;&#10;    state = 1;&#10;}&#10;else if (state == 1) {&#10;    //Packet for data request&#10;    sendBuf[0] = 0x24;&#10;    sendBuf[1] = 0x0A;&#10;    sendBuf[2] = 0x03;&#10;    sendBuf[3] = 0x01;&#10;    sendBuf[4] = (sendBuf[0]+sendBuf[1]+sendBuf[2]+sendBuf[3])%256;&#10;    sendBuf[5] = '#';&#10;&#10;    sending_val = true;&#10;&#10;    state = 2;&#10;}&#10;else {&#10;    //Empty packet while getting data&#10;    sendBuf[0] = 0;&#10;    sendBuf[1] = 0;&#10;    sendBuf[2] = 0;&#10;    sendBuf[3] = 0;&#10;    sendBuf[4] = 0;&#10;    sendBuf[5] = 0;&#10;&#10;    sending_val = false;&#10;}&#10;&#10;Token * sendArray = IntArray_new(0,0);&#10;&#10;int i;&#10;for (i = 0; i &lt; bufferSize; i++) {&#10;IntArray_insert(sendArray, sendBuf[i]);&#10;}&#10;&#10;$put(a, sendArray);&#10;$put(b, sending_val);&#10;$put(c, numberOfPackets);&#10;&#10;/**/&#10;&#10;/***wrapupBlock***/&#10;/**/">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="embeddedCode">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 340.0]">
        </property>
        <property name="DecoratorAttributesFor_CCodeGenerator2" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="CCodeGenerator">
            </property>
        </property>
        <port name="a" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(int)">
            </property>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="b" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="boolean">
            </property>
        </port>
        <port name="c" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation22" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation21" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation19" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation18" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation15" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation14" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation20" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation13" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation23" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation24" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation25" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="LEDCube.deltaSize" relation="relation"/>
    <link port="LEDCube.deltaX" relation="relation2"/>
    <link port="LEDCube.deltaY" relation="relation3"/>
    <link port="LEDCube.deltaZ" relation="relation4"/>
    <link port="LEDCube.hue" relation="relation5"/>
    <link port="SensorDataToGesture.deltaSize" relation="relation"/>
    <link port="SensorDataToGesture.deltaX" relation="relation2"/>
    <link port="SensorDataToGesture.deltaY" relation="relation3"/>
    <link port="SensorDataToGesture.deltaZ" relation="relation4"/>
    <link port="SensorDataToGesture.hue" relation="relation5"/>
    <link port="SensorDataToGesture.finger1" relation="relation14"/>
    <link port="SensorDataToGesture.finger2" relation="relation15"/>
    <link port="SensorDataToGesture.finger3" relation="relation16"/>
    <link port="SensorDataToGesture.finger4" relation="relation17"/>
    <link port="SensorDataToGesture.finger5" relation="relation18"/>
    <link port="SensorDataToGesture.roll" relation="relation19"/>
    <link port="SensorDataToGesture.pitch" relation="relation20"/>
    <link port="SensorDataToGesture.yaw" relation="relation21"/>
    <link port="PacketToSensor.finger1_out" relation="relation6"/>
    <link port="PacketToSensor.finger2_out" relation="relation7"/>
    <link port="PacketToSensor.finger3_out" relation="relation8"/>
    <link port="PacketToSensor.finger4_out" relation="relation9"/>
    <link port="PacketToSensor.finger5_out" relation="relation10"/>
    <link port="PacketToSensor.roll_out" relation="relation11"/>
    <link port="PacketToSensor.pitch_out" relation="relation12"/>
    <link port="PacketToSensor.yaw_out" relation="relation13"/>
    <link port="PacketToSensor.sensor_packet" relation="relation22"/>
    <link port="CCThreeThousand.data_out" relation="relation22"/>
    <link port="CCThreeThousand.packetToSend_in" relation="relation23"/>
    <link port="CCThreeThousand.sending_in" relation="relation24"/>
    <link port="CCThreeThousand.packetSize_in" relation="relation25"/>
    <link port="Correction.finger1_out" relation="relation14"/>
    <link port="Correction.finger2_out" relation="relation15"/>
    <link port="Correction.finger3_out" relation="relation16"/>
    <link port="Correction.finger4_out" relation="relation17"/>
    <link port="Correction.finger5_out" relation="relation18"/>
    <link port="Correction.roll_out" relation="relation19"/>
    <link port="Correction.pitch_out" relation="relation20"/>
    <link port="Correction.yaw_out" relation="relation21"/>
    <link port="Correction.finger1_in" relation="relation6"/>
    <link port="Correction.finger2_in" relation="relation7"/>
    <link port="Correction.finger3_in" relation="relation8"/>
    <link port="Correction.finger4_in" relation="relation9"/>
    <link port="Correction.finger5_in" relation="relation10"/>
    <link port="Correction.roll_in" relation="relation11"/>
    <link port="Correction.pitch_in" relation="relation12"/>
    <link port="Correction.yaw_in" relation="relation13"/>
    <link port="EmbeddedCodeActor.a" relation="relation23"/>
    <link port="EmbeddedCodeActor.b" relation="relation24"/>
    <link port="EmbeddedCodeActor.c" relation="relation25"/>
</entity>
