<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="SecureCommServer" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="startTime" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 52.5]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={231, 150, 1024, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[790, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{395.0, 261.0}">
    </property>
    <property name="PROJECT_PATH" class="ptolemy.data.expr.Parameter" value="&quot;$PTII/vendors/iotauth&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[245.0, 42.5]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The AuthManager checks out the iotAuth repo from &#10;https://github.com/iotauth/iotauth.git&#10;and creates $PTII/vendors/iotautho&#10;.&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 52.5]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 397.5]">
        </property>
    </property>
    <property name="AuthManager" class="ptolemy.actor.lib.jjs.modules.iotAuth.AuthManager">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 62.5]">
        </property>
    </property>
    <entity name="Listening" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={941, 103, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 160.0]">
        </property>
    </entity>
    <entity name="Connection" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={81, 509, 901, 391}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[901, 347]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[615.0, 170.0]">
        </property>
    </entity>
    <entity name="Received" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={323, 482, 887, 418}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[887, 374]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[625.0, 285.0]">
        </property>
    </entity>
    <entity name="Error" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 629, 2054, 271}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[2054, 227]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[320.0, 260.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <property name="init" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[495.0, 345.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="Expression" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;server response #&quot; + count + &quot; to message: &quot; + received">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[225.0, 310.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="count" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="ReceivedID" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={553, 299, 887, 418}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[887, 374]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[425.0, 260.0]">
        </property>
    </entity>
    <entity name="SecureCommServer" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor is used for accessing authorization service provided by&#10; *  a local authorization entity, Auth (https://github.com/iotauth/iotauth),&#10; *  and for secure communication with a SecureCommClient.&#10; *&#10; *  This accessor requires the 'iotAuth', and 'dataConverter' modules.&#10; *&#10; *  @accessor net/SecureCommServer&#10; *  TODO: populate inputs/outputs/parameters&#10; *&#10; *  @author Hokeun Kim&#10; *  @version $$Id$$&#10; */&#10;&#10;&quot;use strict&quot;;&#10;&#10;var iotAuth = require('iotAuth');&#10;var dataConverter = require('dataConverter');&#10;var msgType = iotAuth.msgType;&#10;&#10;exports.setup = function () {&#10;    // Inputs and outputs&#10;    this.input('toSend');&#10;    this.input('toSendID', {&#10;        type: 'int',&#10;        value: -1&#10;    });&#10;    this.output('listening', {&#10;        type: 'int'&#10;    });&#10;    this.output('connection');&#10;    this.output('received', {&#10;        spontaneous: true&#10;    });&#10;    this.output('receivedID', {&#10;        type: 'int',&#10;        spontaneous: true&#10;    });&#10;    // Server information&#10;    this.parameter('serverName', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('serverPort', {&#10;        type : 'int',&#10;        value : 4000&#10;    });&#10;    // For communication with Auth&#10;    this.parameter('authHost', {&#10;        type : 'string',&#10;        value : 'localhost'&#10;    });&#10;    this.parameter('authPort', {&#10;        value: -1,&#10;        type: 'int'&#10;    });&#10;    this.parameter('authCertPath', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('serverPrivateKeyPath', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    // Spec for communication with Auth&#10;    this.parameter('publicKeyCryptoSpec', {&#10;        type: 'string',&#10;        options: iotAuth.publicKeyCryptoSpecs,&#10;        value: iotAuth.publicKeyCryptoSpecs[0]&#10;    });&#10;    this.parameter('distributionCryptoSpec', {&#10;        type: 'string',&#10;        options: iotAuth.symmetricCryptoSpecs,&#10;        value: iotAuth.symmetricCryptoSpecs[0]&#10;    });&#10;    // For communication with client&#10;    this.parameter('sessionCryptoSpec', {&#10;        type: 'string',&#10;        options: iotAuth.symmetricCryptoSpecs,&#10;        value: iotAuth.symmetricCryptoSpecs[0]&#10;    });&#10;    // Send/receive type&#10;    this.parameter('receiveType', {&#10;        type : 'string',&#10;        value : 'string',&#10;        options : ['string', 'image', 'byteArray']&#10;    });&#10;    this.parameter('sendType', {&#10;        type : 'string',&#10;        value : 'string',&#10;        options : ['string', 'image', 'byteArray']&#10;    });&#10;};&#10;&#10;&#10;// local variables&#10;var self;&#10;var receiveType;&#10;var sendType;&#10;var authPublicKey;&#10;var serverPrivateKey;&#10;var currentDistributionKey = null;&#10;var server = null;&#10;var sockets = [];&#10;var currentSessionKey = null;&#10;&#10;function outputError(errorMessage) {&#10;    console.log(errorMessage);&#10;    self.send('error', errorMessage);&#10;};&#10;&#10;/*&#10;callbackParameters = {&#10;    keyId,&#10;    sendHandshake2Callback,&#10;    handshake1Payload,&#10;    serverSocket&#10;}&#10;*/&#10;function sessionKeyResponseCallback(status, distributionKey, sessionKeyList, callbackParameters) {&#10;    if (status.error) {&#10;        console.log('session key request failed: ' + status.error);&#10;        return;&#10;    }&#10;    console.log('session key request succeeded');&#10;&#10;    if (distributionKey) {&#10;        console.log('Updating to a new distribution key key');&#10;        currentDistributionKey = distributionKey;&#10;    }&#10;&#10;    console.log('received ' + sessionKeyList.length + ' session keys');&#10;    var receivedSessionKey;&#10;    for (var i = 0; i &lt; sessionKeyList.length; i++) {&#10;        receivedSessionKey = sessionKeyList[i];&#10;    }&#10;    console.log('Session key arrived');    &#10;    if (receivedSessionKey.id == callbackParameters.keyId) {&#10;        console.log('Session key id is as expected');&#10;        currentSessionKey = receivedSessionKey;&#10;        callbackParameters.sendHandshake2Callback(callbackParameters.handshake1Payload,&#10;            callbackParameters.serverSocket, receivedSessionKey);&#10;    }&#10;    else {&#10;        outputError('Session key id is NOT as expected');&#10;    }&#10;};&#10;&#10;// event handlers for the listening server&#10;function onServerListening(listeningPort) {&#10;    console.log('Server: Listening for socket connection requests on port ' + listeningPort);&#10;    self.send('listening', listeningPort);&#10;};&#10;function onServerError(message) {&#10;    outputError('Error in server - details: ' + message);&#10;};&#10;function onClientRequest(handshake1Payload, serverSocket, sendHandshake2Callback) {&#10;    var keyId = handshake1Payload.readUIntBE(0, iotAuth.SESSION_KEY_ID_SIZE);&#10;    if (currentSessionKey != null &amp;&amp; currentSessionKey.id == keyId) {&#10;        sendHandshake2Callback(handshake1Payload, serverSocket, currentSessionKey);&#10;    }&#10;    else {&#10;        console.log('session key NOT found! sending session key id to AuthService');&#10;        var options = {&#10;            authHost: self.getParameter('authHost'),&#10;            authPort: self.getParameter('authPort'),&#10;            entityName: self.getParameter('serverName'),&#10;            numKeysPerRequest: 1,&#10;            purpose: {keyId: keyId},&#10;            distributionKey: currentDistributionKey,&#10;            distributionCryptoSpec: self.getParameter('distributionCryptoSpec'),&#10;            publicKeyCryptoSpec: self.getParameter('publicKeyCryptoSpec'),&#10;            authPublicKey: authPublicKey,&#10;            entityPrivateKey: serverPrivateKey&#10;        };&#10;        var callbackParameters = {&#10;            keyId: keyId,&#10;            sendHandshake2Callback: sendHandshake2Callback,&#10;            handshake1Payload: handshake1Payload,&#10;            serverSocket: serverSocket&#10;        }&#10;        iotAuth.sendSessionKeyRequest(options, sessionKeyResponseCallback, callbackParameters);&#10;    }&#10;};&#10;&#10;// event handlers for individual sockets&#10;function onClose(socketID) {&#10;    console.log('secure connection with the client closed.');&#10;    sockets[socketID] = null;&#10;    self.send('connection', 'socket #' + socketID + ' closed');&#10;};&#10;function onError(message, socketID) {&#10;    outputError('Error in secure server socket #' + socketID +&#10;        ' details: ' + message);&#10;};&#10;function onConnection(socketInstance, entityServerSocket) {&#10;    console.log('secure connection with the client established.');&#10;    self.send('connection', socketInstance);&#10;    sockets[socketInstance.id] = entityServerSocket;&#10;};&#10;function onData(data, socketID) {&#10;    console.log('data received from server via secure communication');&#10;    &#10;    if (receiveType == 'string') {&#10;        self.send('received', data.toString());&#10;    }&#10;    else if (receiveType == 'image') {&#10;        self.send('received', dataConverter.jsArrayToImage(data.getArray()));&#10;    }&#10;    else if (receiveType == 'byteArray') {&#10;        self.send('received', data.getArray());&#10;    }&#10;    self.send('receivedID', socketID);&#10;}&#10;&#10;exports.toSendInputHandler = function () {&#10;    var toSend = this.get('toSend');&#10;    if (sendType == 'image') {&#10;        toSend = dataConverter.imageToJSArray(toSend);&#10;    }&#10;&#10;    var toSendID = this.get('toSendID');&#10;    // broadcasting&#10;    if (toSendID &lt; 0) {&#10;        for (var i = 0; i &lt; sockets.length; i++) {&#10;            if (!sockets[i]) {&#10;                continue;&#10;            }&#10;            if (!sockets[i].checkSessionKeyValidity()) {&#10;                outputError('session key expired!');&#10;            }&#10;            else if (!sockets[i].send(toSend)) {&#10;                outputError('Error in sending data');&#10;            }&#10;        }&#10;    }&#10;    else if (sockets[toSendID]) {&#10;        sockets[toSendID].send(toSend);&#10;    } else {&#10;        console.log('Socket with ID ' + idToSendTo + ' is not open. Discarding data.');&#10;    }&#10;};&#10;&#10;exports.initialize = function () {&#10;    currentSessionKey = null;&#10;    authPublicKey = iotAuth.loadPublicKey(this.getParameter('authCertPath'));&#10;    serverPrivateKey = iotAuth.loadPrivateKey(this.getParameter('serverPrivateKeyPath'));&#10;    receiveType = this.getParameter('receiveType');&#10;    sendType = this.getParameter('sendType');&#10;&#10;    self = this;&#10;    var options = {&#10;        serverPort: this.getParameter('serverPort'),&#10;        sessionCryptoSpec: this.getParameter('sessionCryptoSpec')&#10;    };&#10;    var eventHandlers = {&#10;        onServerError: onServerError,&#10;        onServerListening: onServerListening,&#10;        onClientRequest: onClientRequest,&#10;&#10;        onData: onData,&#10;        onClose: onClose,&#10;        onError: onError,&#10;        onConnection: onConnection&#10;    };&#10;    server = iotAuth.initializeSecureServer(options, eventHandlers);&#10;    &#10;    this.addInputHandler('toSend', exports.toSendInputHandler.bind(this));&#10;};&#10;&#10;exports.wrapup = function() {&#10;    sockets = [];&#10;    if (server !== null) {&#10;        server.stop();&#10;        server = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/net/SecureCommServer.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="serverName" class="ptolemy.data.expr.Parameter" value="net1.ptServer">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="authHost" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="authCertPath" class="ptolemy.data.expr.Parameter" value="$PROJECT_PATH/entity/auth_certs/Auth101EntityCert.pem">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="serverPrivateKeyPath" class="ptolemy.data.expr.Parameter" value="$PROJECT_PATH/entity/credentials/keys/net1/PtServerKey.der">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="publicKeyCryptoSpec" class="ptolemy.data.expr.Parameter" value="RSA/ECB/PKCS1PADDING:SHA256withRSA">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="distributionCryptoSpec" class="ptolemy.data.expr.Parameter" value="AES-128-CBC:HmacSHA256">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sessionCryptoSpec" class="ptolemy.data.expr.Parameter" value="AES-128-CBC:HmacSHA256">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="string">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="string">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="toSendID" class="ptolemy.actor.parameters.PortParameter" value="-1">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 180.0]">
        </property>
        <property name="serverPort" class="ptolemy.data.expr.Parameter" value="21200">
        </property>
        <property name="authPort" class="ptolemy.data.expr.Parameter" value="21900">
        </property>
        <port name="toSendID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="connection" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="receivedID" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[525.0, 280.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[360.0, 230.0]">
        </vertex>
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[360.0, 285.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[190.0, 285.0]">
        </vertex>
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[525.0, 190.0]">
        </vertex>
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[190.0, 170.0]">
        </vertex>
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[40.0, 190.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Listening.input" relation="relation"/>
    <link port="Connection.input" relation="relation2"/>
    <link port="Received.input" relation="relation5"/>
    <link port="Ramp.output" relation="relation6"/>
    <link port="Ramp.trigger" relation="relation5"/>
    <link port="Expression.output" relation="relation12"/>
    <link port="Expression.received" relation="relation5"/>
    <link port="Expression.count" relation="relation6"/>
    <link port="ReceivedID.input" relation="relation9"/>
    <link port="SecureCommServer.toSendID" relation="relation11"/>
    <link port="SecureCommServer.toSend" relation="relation12"/>
    <link port="SecureCommServer.listening" relation="relation"/>
    <link port="SecureCommServer.connection" relation="relation2"/>
    <link port="SecureCommServer.received" relation="relation10"/>
    <link port="SecureCommServer.receivedID" relation="relation9"/>
    <link relation1="relation5" relation2="relation10"/>
    <link relation1="relation9" relation2="relation8"/>
    <link relation1="relation8" relation2="relation4"/>
    <link relation1="relation4" relation2="relation11"/>
</entity>
