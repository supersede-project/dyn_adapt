<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="RESTPostDataTypes" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={21, 23, 1343, 693}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1109, 583]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.6400000000000006">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{650.0150753768844, 376.0100502512563}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 30.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Test POSTing bodies of different data types.&#10;Forms: RecordToken generated on getParameters output of HttpActor&#10;Audio, images, video:  ArrayToken of IntToken generated on getBody output of HttpActor&#10;Other: StringToken generated on getBody output of HttpActor &#10;&#10;Note: Parameters may be passed as part of URL for any data type body">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[155.0, -50.0]">
        </property>
    </property>
    <property name="baseURL" class="ptolemy.data.expr.Parameter" value="&quot;http://localhost:8001&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 125.0]">
        </property>
    </property>
    <property name="WebServer" class="org.ptolemy.ptango.lib.WebServer">
        <property name="preferredPort" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="resourceLocation" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/ptolemy/actor/lib/jjs/modules/httpClient/test/auto">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[840.0, 20.0]">
        </property>
    </property>
    <property name="port" class="ptolemy.data.expr.Parameter" value="8001">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 100.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Wait a few seconds&#10;for server to start">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 100.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Form data:  As body&#10;Content-Type: application/x-www-form-urlencoded">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-35.0, -80.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Client">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Form data: As part of URL, no body&#10;Content-Type: not specified">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[57.5, -55.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Client2">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Form data:  Both as body and as part of URL&#10;Content-Type: application/x-www-form-urlencoded">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[55.0, -60.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Client3">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation7" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="JSON body&#10;Content-Type: application/json">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[115.0, -50.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Client5">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
        <property name="style" class="ptolemy.actor.gui.style.CheckBoxStyle">
        </property>
    </property>
    <property name="Annotation13" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="enableBackwardTypeInference true &#10;(otherwise, postParameter ports of HttpActors need annotations)">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[530.0, 140.0]">
        </property>
    </property>
    <property name="Annotation14" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Image&#10;Content-Type: image/gif">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[80.0, -45.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Client4">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 180.0]">
        </property>
    </entity>
    <entity name="Init" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[845.0, 105.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 934, 632}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{340.0, 240.0}">
        </property>
        <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 50.0]">
            </property>
        </entity>
        <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
            <property name="init" class="ptolemy.actor.parameters.PortParameter" value="WebServer.getAttribute(&quot;deployedPort&quot;).getToken().intValue()">
            </property>
            <doc>Create a sequence of tokens with increasing value</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 60.0]">
            </property>
        </entity>
        <entity name="SetVariable" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="port">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 60.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;http://localhost:&quot; + port ">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 105.0]">
            </property>
            <port name="port" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="SetVariable2" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="baseURL">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[485.0, 105.0]">
            </property>
        </entity>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[245.0, 60.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="SingleEvent.output" relation="relation"/>
        <link port="Ramp.output" relation="relation3"/>
        <link port="Ramp.trigger" relation="relation"/>
        <link port="SetVariable.input" relation="relation3"/>
        <link port="Expression.output" relation="relation2"/>
        <link port="Expression.port" relation="relation3"/>
        <link port="SetVariable2.input" relation="relation2"/>
    </entity>
    <entity name="Service" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[280.0, 235.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 934, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{907.0, 418.265625}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="&quot;test&quot; output type set to string">
            </property>
            <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-150.0, 55.0]">
                <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="RecordDisassembler">
                </property>
                <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
                </property>
            </property>
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[900.0, 225.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/form1">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 360.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 280.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 225.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 225.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received &quot; + parameters + &quot;&lt;/body&gt;&lt;/html&gt;&quot;">
                <property name="style" class="ptolemy.actor.gui.style.LineStyle">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1035.0, 350.0]">
            </property>
            <port name="parameters" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[805.0, 390.0]">
            </property>
            <port name="test" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;hello&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[970.0, 455.0]">
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[635.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[845.0, 410.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1225.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="done" relation="relation3"/>
        <link port="HttpActor.response" relation="relation5"/>
        <link port="HttpActor.postParameters" relation="relation2"/>
        <link port="MicrostepDelay.input" relation="relation"/>
        <link port="MicrostepDelay.output" relation="relation5"/>
        <link port="MicrostepDelay2.input" relation="relation5"/>
        <link port="MicrostepDelay2.output" relation="relation4"/>
        <link port="Const.output" relation="relation3"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="Expression.output" relation="relation"/>
        <link port="Expression.parameters" relation="relation7"/>
        <link port="RecordDisassembler.input" relation="relation2"/>
        <link port="RecordDisassembler.test" relation="relation7"/>
        <link port="Test.input" relation="relation7"/>
    </entity>
    <entity name="Client" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, 180.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={53, 127, 1387, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1153, 494]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.246369558064176">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{279.53173828124994, 423.19907692202537}">
        </property>
        <property name="annotation" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Strip any \r since these do not occur on all operating systems</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{300.0, 440.0}">
            </property>
        </property>
        <property name="annotation2" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Pass in options to force evaluating the baseURL parameter just prior to 
executing the REST accessor, so that baseURL's port number is updated</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{0.0, 220.0}">
            </property>
        </property>
        <port name="start" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-160.0, 415.0]">
            </property>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{625.0, 350.0}">
            </property>
        </port>
        <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80. &#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; * &#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {'type':'JSON', 'value':''});&#10;    this.input('command', {'type':'string', 'value':''});&#10;    this.input('arguments', {'type':'JSON', 'value':''});&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {'type':'string'});&#10;    this.output('headers');&#10;    this.parameter('timeout', {'value': 5000, 'type': 'int'});&#10;    this.parameter('outputCompleteResponseOnly', {'value':true, 'type':'boolean'});&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function() {&#10;    // Remove any leading slash that might be present.&#10;    var command = this.get('command').replace(/^\//, '');&#10;    // Encode any characters that are not allowed in a URL.&#10;    var encodedArgs = querystring.stringify(this.get('arguments'));&#10;    if (encodedArgs) {&#10;        return command + '?' + encodedArgs;&#10;    }&#10;    return command;&#10;};&#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function(response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else if (typeof options.url === 'string') {&#10;        command.url = options.url + '/' + encodedPath;&#10;    } else {&#10;        command.url.path = '/' + encodedPath;&#10;    }&#10;    command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;    &#10;    if (typeof body !== 'undefined') {&#10;    	command.body = body; &#10;    }&#10;    &#10;    // console.log(&quot;REST request to: &quot; + JSON.stringify(command));&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    // FIXME: Probably not necessary.  Bound before being passed.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    };&#10;&#10;    request = httpClient.request(command, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        if (message.body) {&#10;            this.send('response', this.exports.filterResponse.call(this, message.body));&#10;        } else {&#10;            this.send('response', this.exports.filterResponse.call(this, message));&#10;        }&#10;        if (message.statusCode) {&#10;            this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;        }&#10;        if (message.headers) {&#10;            this.send('headers', message.headers);&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	this.addInputHandler('trigger',&#10;	        this.exports.issueCommand.bind(this),&#10;	        this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/REST.js">
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;${baseURL}&quot;}">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="form1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{240.0, 385.0}">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80. &#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
                </property>
                <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
                </property>
                <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
                </property>
                <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;test=hello&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-80.0, 415.0]">
            </property>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;\&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\\\&quot;utf-8\\\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received hello&lt;/body&gt;&lt;/html&gt;\&quot;&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{655.0, 395.0}">
            </property>
        </entity>
        <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
            <property name="pattern" class="ptolemy.actor.parameters.PortParameter" value="\r">
            </property>
            <property name="stringToEdit" class="ptolemy.actor.parameters.PortParameter" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received hello&lt;/body&gt;&lt;/html&gt;&quot;">
            </property>
            <doc>Replace the patterns that match a regular expression</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{555.0, 395.0}">
            </property>
        </entity>
        <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 405.0}">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 350.0}">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{510.0, 350.0}">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[110.0, 370.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/x-www-form-urlencoded\&quot;}, \&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;&quot; + baseURL + &quot;\&quot;}&quot;">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[195.0, 285.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="{325.0, 405.0}">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[-10.0, 415.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="start" relation="relation8"/>
        <link port="done" relation="relation12"/>
        <link port="REST.options" relation="relation3"/>
        <link port="REST.trigger" relation="relation"/>
        <link port="REST.response" relation="relation9"/>
        <link port="REST.body" relation="relation2"/>
        <link port="Const3.output" relation="relation2"/>
        <link port="Const3.trigger" relation="relation8"/>
        <link port="Test.input" relation="relation7"/>
        <link port="StringReplace.stringToEdit" relation="relation10"/>
        <link port="StringReplace.output" relation="relation7"/>
        <link port="TokenToExpression.input" relation="relation9"/>
        <link port="TokenToExpression.output" relation="relation10"/>
        <link port="Const4.output" relation="relation11"/>
        <link port="Const4.trigger" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation11"/>
        <link port="MicrostepDelay.output" relation="relation12"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation2"/>
        <link port="Expression.output" relation="relation3"/>
        <link port="Expression.trigger" relation="relation2"/>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[485.0, 230.0]">
        </property>
    </entity>
    <entity name="RecordAssembler" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[415.0, 200.0]">
        </property>
        <port name="clientDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="serviceDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[600.0, 230.0]">
        </property>
    </entity>
    <entity name="Service2" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{165.0, 420.0}">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 934, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{907.0, 418.265625}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="&quot;test&quot; output type set to string">
            </property>
            <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-125.0, 65.0]">
                <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="RecordDisassembler">
                </property>
                <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
                </property>
            </property>
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[900.0, 225.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/form2">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 360.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 280.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 225.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 225.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received &quot; + parameters + &quot;&lt;/body&gt;&lt;/html&gt;&quot;">
                <property name="style" class="ptolemy.actor.gui.style.LineStyle">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1035.0, 350.0]">
            </property>
            <port name="parameters" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{805.0, 390.0}">
            </property>
            <port name="test" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;hello&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[970.0, 455.0]">
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[635.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[845.0, 410.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1225.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="done" relation="relation3"/>
        <link port="HttpActor.response" relation="relation5"/>
        <link port="HttpActor.postParameters" relation="relation2"/>
        <link port="MicrostepDelay.input" relation="relation"/>
        <link port="MicrostepDelay.output" relation="relation5"/>
        <link port="MicrostepDelay2.input" relation="relation5"/>
        <link port="MicrostepDelay2.output" relation="relation4"/>
        <link port="Const.output" relation="relation3"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="Expression.output" relation="relation"/>
        <link port="Expression.parameters" relation="relation7"/>
        <link port="RecordDisassembler.input" relation="relation2"/>
        <link port="RecordDisassembler.test" relation="relation7"/>
        <link port="Test.input" relation="relation7"/>
    </entity>
    <entity name="Client2" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 370.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={53, 127, 1166, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[932, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{463.0, 430.265625}">
        </property>
        <property name="annotation" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Strip any \r since these do not occur on all operating systems</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 440.0]">
            </property>
        </property>
        <property name="annotation2" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Pass in options to force evaluating the baseURL parameter just prior to 
executing the REST accessor, so that baseURL's port number is updated</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 250.0]">
            </property>
        </property>
        <port name="start" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 425.0]">
            </property>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{625.0, 350.0}">
            </property>
        </port>
        <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80. &#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; * &#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {'type':'JSON', 'value':''});&#10;    this.input('command', {'type':'string', 'value':''});&#10;    this.input('arguments', {'type':'JSON', 'value':''});&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {'type':'string'});&#10;    this.output('headers');&#10;    this.parameter('timeout', {'value': 5000, 'type': 'int'});&#10;    this.parameter('outputCompleteResponseOnly', {'value':true, 'type':'boolean'});&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function() {&#10;    // Remove any leading slash that might be present.&#10;    var command = this.get('command').replace(/^\//, '');&#10;    // Encode any characters that are not allowed in a URL.&#10;    var encodedArgs = querystring.stringify(this.get('arguments'));&#10;    if (encodedArgs) {&#10;        return command + '?' + encodedArgs;&#10;    }&#10;    return command;&#10;};&#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function(response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else if (typeof options.url === 'string') {&#10;        command.url = options.url + '/' + encodedPath;&#10;    } else {&#10;        command.url.path = '/' + encodedPath;&#10;    }&#10;    command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;    &#10;    if (typeof body !== 'undefined') {&#10;    	command.body = body; &#10;    }&#10;    &#10;    // console.log(&quot;REST request to: &quot; + JSON.stringify(command));&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    // FIXME: Probably not necessary.  Bound before being passed.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    };&#10;&#10;    request = httpClient.request(command, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        if (message.body) {&#10;            this.send('response', this.exports.filterResponse.call(this, message.body));&#10;        } else {&#10;            this.send('response', this.exports.filterResponse.call(this, message));&#10;        }&#10;        if (message.statusCode) {&#10;            this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;        }&#10;        if (message.headers) {&#10;            this.send('headers', message.headers);&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	this.addInputHandler('trigger',&#10;	        this.exports.issueCommand.bind(this),&#10;	        this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/REST.js">
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;${baseURL}&quot;}">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="form2?test=hello">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{240.0, 415.0}">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80. &#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
                </property>
                <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
                </property>
                <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
                </property>
                <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;\&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\\\&quot;utf-8\\\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received hello&lt;/body&gt;&lt;/html&gt;\&quot;&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{655.0, 395.0}">
            </property>
        </entity>
        <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
            <property name="pattern" class="ptolemy.actor.parameters.PortParameter" value="\r">
            </property>
            <property name="stringToEdit" class="ptolemy.actor.parameters.PortParameter" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received hello&lt;/body&gt;&lt;/html&gt;&quot;">
            </property>
            <doc>Replace the patterns that match a regular expression</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{555.0, 395.0}">
            </property>
        </entity>
        <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 405.0}">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 350.0}">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{510.0, 350.0}">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 425.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;{\&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;&quot; + baseURL + &quot;\&quot;}&quot;">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 340.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="{325.0, 405.0}">
            </vertex>
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.trigger&quot;,x=410.0,y=350.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={325.0,350.0} },{ head={id=&quot;REST.response&quot;,x=240.0,y=415.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} },{ head={id=&quot;TokenToExpression.input&quot;,x=360.0,y=405.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Test.input&quot;,x=655.0,y=395.0}, tail={id=&quot;StringReplace.output&quot;,x=555.0,y=395.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;StringReplace.stringToEdit&quot;,x=555.0,y=395.0}, tail={id=&quot;TokenToExpression.output&quot;,x=360.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.output&quot;,x=410.0,y=350.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;done._location&quot;,x=625.0,y=350.0}, tail={id=&quot;MicrostepDelay.output&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[60.0, 425.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="start" relation="relation3"/>
        <link port="done" relation="relation12"/>
        <link port="REST.options" relation="relation2"/>
        <link port="REST.trigger" relation="relation"/>
        <link port="REST.response" relation="relation9"/>
        <link port="Test.input" relation="relation7"/>
        <link port="StringReplace.stringToEdit" relation="relation10"/>
        <link port="StringReplace.output" relation="relation7"/>
        <link port="TokenToExpression.input" relation="relation9"/>
        <link port="TokenToExpression.output" relation="relation10"/>
        <link port="Const4.output" relation="relation11"/>
        <link port="Const4.trigger" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation11"/>
        <link port="MicrostepDelay.output" relation="relation12"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation3"/>
        <link port="Expression.output" relation="relation2"/>
        <link port="Expression.trigger" relation="relation3"/>
    </entity>
    <entity name="RecordAssembler2" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[302.5, 390.0]">
        </property>
        <port name="clientDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="serviceDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[372.5, 425.0]">
        </property>
    </entity>
    <entity name="Const2" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[490.0, 425.0]">
        </property>
    </entity>
    <entity name="Service3" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[680.0, 420.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 934, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{907.0, 418.265625}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="&quot;testbody&quot; and &quot;testURL&quot; output types set to string">
            </property>
            <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-200.0, 105.0]">
                <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="RecordDisassembler">
                </property>
                <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
                </property>
            </property>
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[900.0, 225.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/form3">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 360.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 280.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 225.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 225.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received parameters: &quot; + testURL + &quot;, body: &quot; + testbody + &quot; &lt;/body&gt;&lt;/html&gt;&quot;">
                <property name="style" class="ptolemy.actor.gui.style.LineStyle">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1037.5536804199219, 350.52430725097656]">
            </property>
            <port name="testbody" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="testURL" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[810.0, 395.0]">
            </property>
            <port name="testbody" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="testURL" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;body&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[975.0, 425.0]">
            </property>
        </entity>
        <entity name="Test2" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;url&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[975.0, 485.0]">
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[635.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1225.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[770.0, 420.0]">
            </vertex>
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[850.0, 405.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[830.0, 440.0]">
            </vertex>
        </relation>
        <link port="done" relation="relation3"/>
        <link port="HttpActor.response" relation="relation5"/>
        <link port="HttpActor.postParameters" relation="relation2"/>
        <link port="MicrostepDelay.input" relation="relation"/>
        <link port="MicrostepDelay.output" relation="relation5"/>
        <link port="MicrostepDelay2.input" relation="relation5"/>
        <link port="MicrostepDelay2.output" relation="relation4"/>
        <link port="Const.output" relation="relation3"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="Expression.output" relation="relation"/>
        <link port="Expression.testbody" relation="relation6"/>
        <link port="Expression.testURL" relation="relation7"/>
        <link port="RecordDisassembler.input" relation="relation2"/>
        <link port="RecordDisassembler.testbody" relation="relation6"/>
        <link port="RecordDisassembler.testURL" relation="relation7"/>
        <link port="Test.input" relation="relation6"/>
        <link port="Test2.input" relation="relation7"/>
    </entity>
    <entity name="Client3" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[605.0, 365.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={53, 127, 1166, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[932, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{463.0, 430.265625}">
        </property>
        <property name="annotation" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Strip any \r since these do not occur on all operating systems</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 440.0]">
            </property>
        </property>
        <property name="annotation2" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Pass in options to force evaluating the baseURL parameter just prior to 
executing the REST accessor, so that baseURL's port number is updated</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[5.0, 230.0]">
            </property>
        </property>
        <port name="start" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{15.0, 435.0}">
            </property>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{625.0, 350.0}">
            </property>
        </port>
        <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80. &#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; * &#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {'type':'JSON', 'value':''});&#10;    this.input('command', {'type':'string', 'value':''});&#10;    this.input('arguments', {'type':'JSON', 'value':''});&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {'type':'string'});&#10;    this.output('headers');&#10;    this.parameter('timeout', {'value': 5000, 'type': 'int'});&#10;    this.parameter('outputCompleteResponseOnly', {'value':true, 'type':'boolean'});&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function() {&#10;    // Remove any leading slash that might be present.&#10;    var command = this.get('command').replace(/^\//, '');&#10;    // Encode any characters that are not allowed in a URL.&#10;    var encodedArgs = querystring.stringify(this.get('arguments'));&#10;    if (encodedArgs) {&#10;        return command + '?' + encodedArgs;&#10;    }&#10;    return command;&#10;};&#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function(response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else if (typeof options.url === 'string') {&#10;        command.url = options.url + '/' + encodedPath;&#10;    } else {&#10;        command.url.path = '/' + encodedPath;&#10;    }&#10;    command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;    &#10;    if (typeof body !== 'undefined') {&#10;    	command.body = body; &#10;    }&#10;    &#10;    // console.log(&quot;REST request to: &quot; + JSON.stringify(command));&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    // FIXME: Probably not necessary.  Bound before being passed.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    };&#10;&#10;    request = httpClient.request(command, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        if (message.body) {&#10;            this.send('response', this.exports.filterResponse.call(this, message.body));&#10;        } else {&#10;            this.send('response', this.exports.filterResponse.call(this, message));&#10;        }&#10;        if (message.statusCode) {&#10;            this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;        }&#10;        if (message.headers) {&#10;            this.send('headers', message.headers);&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	this.addInputHandler('trigger',&#10;	        this.exports.issueCommand.bind(this),&#10;	        this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/REST.js">
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;${baseURL}&quot;}">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="form3?testURL=url">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{240.0, 415.0}">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80. &#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
                </property>
                <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
                </property>
                <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
                </property>
                <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;testbody=body&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 435.0]">
            </property>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;\&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\\\&quot;utf-8\\\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received parameters: url, body: body &lt;/body&gt;&lt;/html&gt;\&quot;&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{655.0, 395.0}">
            </property>
        </entity>
        <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
            <property name="pattern" class="ptolemy.actor.parameters.PortParameter" value="\r">
            </property>
            <property name="stringToEdit" class="ptolemy.actor.parameters.PortParameter" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received parameters: url, body: body &lt;/body&gt;&lt;/html&gt;&quot;">
            </property>
            <doc>Replace the patterns that match a regular expression</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{555.0, 395.0}">
            </property>
        </entity>
        <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 405.0}">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 350.0}">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{510.0, 350.0}">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 380.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/x-www-form-urlencoded\&quot;}, \&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;&quot; + baseURL + &quot;\&quot;}&quot;">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, 310.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="{325.0, 405.0}">
            </vertex>
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.trigger&quot;,x=410.0,y=350.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={325.0,350.0} },{ head={id=&quot;REST.response&quot;,x=240.0,y=415.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} },{ head={id=&quot;TokenToExpression.input&quot;,x=360.0,y=405.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Test.input&quot;,x=655.0,y=395.0}, tail={id=&quot;StringReplace.output&quot;,x=555.0,y=395.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;StringReplace.stringToEdit&quot;,x=555.0,y=395.0}, tail={id=&quot;TokenToExpression.output&quot;,x=360.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.output&quot;,x=410.0,y=350.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;done._location&quot;,x=625.0,y=350.0}, tail={id=&quot;MicrostepDelay.output&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[155.0, 435.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{156.0, 435.265625}">
            </vertex>
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="start" relation="relation8"/>
        <link port="done" relation="relation12"/>
        <link port="REST.options" relation="relation4"/>
        <link port="REST.trigger" relation="relation"/>
        <link port="REST.response" relation="relation9"/>
        <link port="REST.body" relation="relation2"/>
        <link port="Const3.output" relation="relation3"/>
        <link port="Const3.trigger" relation="relation8"/>
        <link port="Test.input" relation="relation7"/>
        <link port="StringReplace.stringToEdit" relation="relation10"/>
        <link port="StringReplace.output" relation="relation7"/>
        <link port="TokenToExpression.input" relation="relation9"/>
        <link port="TokenToExpression.output" relation="relation10"/>
        <link port="Const4.output" relation="relation11"/>
        <link port="Const4.trigger" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation11"/>
        <link port="MicrostepDelay.output" relation="relation12"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation2"/>
        <link port="Expression.output" relation="relation4"/>
        <link port="Expression.trigger" relation="relation3"/>
        <link relation1="relation2" relation2="relation3"/>
    </entity>
    <entity name="RecordAssembler3" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[814.3235473632812, 390.44105529785156]">
        </property>
        <port name="clientDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="serviceDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1100.0, 605.0]">
        </property>
    </entity>
    <entity name="Const3" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[490.0, 620.0]">
        </property>
    </entity>
    <entity name="MicrostepDelay3" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[875.0, 430.0]">
        </property>
    </entity>
    <entity name="Service4" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 610.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 928, 617}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{907.0, 418.265625}">
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[900.0, 225.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/image">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 360.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 280.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 225.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 225.0]">
            </property>
        </entity>
        <entity name="Const2" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;OK&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[815.0, 320.0]">
            </property>
        </entity>
        <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={413, 157, 200, 284}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[200, 240]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[885.0, 420.0]">
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[635.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1225.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[770.0, 420.0]">
            </vertex>
        </relation>
        <link port="done" relation="relation3"/>
        <link port="HttpActor.response" relation="relation5"/>
        <link port="HttpActor.postBody" relation="relation2"/>
        <link port="MicrostepDelay.input" relation="relation"/>
        <link port="MicrostepDelay.output" relation="relation5"/>
        <link port="MicrostepDelay2.input" relation="relation5"/>
        <link port="MicrostepDelay2.output" relation="relation4"/>
        <link port="Const.output" relation="relation3"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="Const2.output" relation="relation"/>
        <link port="Const2.trigger" relation="relation2"/>
        <link port="ImageDisplay.input" relation="relation2"/>
    </entity>
    <entity name="Client4" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{105.0, 555.0}">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={53, 127, 1166, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[932, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{463.0, 430.265625}">
        </property>
        <property name="annotation" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Strip any \r since these do not occur on all operating systems</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 440.0]">
            </property>
        </property>
        <property name="annotation3" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Pass in options to force evaluating the baseURL parameter just prior to 
executing the REST accessor, so that baseURL's port number is updated</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[-5.0, 230.0]">
            </property>
        </property>
        <port name="start" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{15.0, 435.0}">
            </property>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{625.0, 350.0}">
            </property>
        </port>
        <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80. &#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; * &#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {'type':'JSON', 'value':''});&#10;    this.input('command', {'type':'string', 'value':''});&#10;    this.input('arguments', {'type':'JSON', 'value':''});&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {'type':'string'});&#10;    this.output('headers');&#10;    this.parameter('timeout', {'value': 5000, 'type': 'int'});&#10;    this.parameter('outputCompleteResponseOnly', {'value':true, 'type':'boolean'});&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function() {&#10;    // Remove any leading slash that might be present.&#10;    var command = this.get('command').replace(/^\//, '');&#10;    // Encode any characters that are not allowed in a URL.&#10;    var encodedArgs = querystring.stringify(this.get('arguments'));&#10;    if (encodedArgs) {&#10;        return command + '?' + encodedArgs;&#10;    }&#10;    return command;&#10;};&#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function(response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else if (typeof options.url === 'string') {&#10;        command.url = options.url + '/' + encodedPath;&#10;    } else {&#10;        command.url.path = '/' + encodedPath;&#10;    }&#10;    command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;    &#10;    if (typeof body !== 'undefined') {&#10;    	command.body = body; &#10;    }&#10;    &#10;    // console.log(&quot;REST request to: &quot; + JSON.stringify(command));&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    // FIXME: Probably not necessary.  Bound before being passed.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    };&#10;&#10;    request = httpClient.request(command, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        if (message.body) {&#10;            this.send('response', this.exports.filterResponse.call(this, message.body));&#10;        } else {&#10;            this.send('response', this.exports.filterResponse.call(this, message));&#10;        }&#10;        if (message.statusCode) {&#10;            this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;        }&#10;        if (message.headers) {&#10;            this.send('headers', message.headers);&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	this.addInputHandler('trigger',&#10;	        this.exports.issueCommand.bind(this),&#10;	        this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/REST.js">
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;image/gif&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;${baseURL}&quot;}">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="image">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{240.0, 415.0}">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80. &#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
                </property>
                <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
                </property>
                <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
                </property>
                <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;\&quot;OK\&quot;&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{655.0, 395.0}">
            </property>
        </entity>
        <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
            <property name="pattern" class="ptolemy.actor.parameters.PortParameter" value="\r">
            </property>
            <property name="stringToEdit" class="ptolemy.actor.parameters.PortParameter" value="&quot;OK&quot;">
            </property>
            <doc>Replace the patterns that match a regular expression</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{555.0, 395.0}">
            </property>
        </entity>
        <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{360.0, 405.0}">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 350.0}">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="{510.0, 350.0}">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 380.0]">
            </property>
        </entity>
        <entity name="ImageReader" class="ptolemy.actor.lib.image.ImageReader">
            <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/doc/img/PtolemyIISmall.gif">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[90.0, 460.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;image/gif\&quot;}, \&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;&quot; + baseURL + &quot;\&quot;}&quot;">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 310.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="{325.0, 405.0}">
            </vertex>
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.trigger&quot;,x=410.0,y=350.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={325.0,350.0} },{ head={id=&quot;REST.response&quot;,x=240.0,y=415.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} },{ head={id=&quot;TokenToExpression.input&quot;,x=360.0,y=405.0}, tail={id=&quot;relation9.vertex1&quot;,x=325.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Test.input&quot;,x=655.0,y=395.0}, tail={id=&quot;StringReplace.output&quot;,x=555.0,y=395.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;StringReplace.stringToEdit&quot;,x=555.0,y=395.0}, tail={id=&quot;TokenToExpression.output&quot;,x=360.0,y=405.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const4.output&quot;,x=410.0,y=350.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;done._location&quot;,x=625.0,y=350.0}, tail={id=&quot;MicrostepDelay.output&quot;,x=510.0,y=350.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[155.0, 435.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="start" relation="relation3"/>
        <link port="done" relation="relation12"/>
        <link port="REST.options" relation="relation4"/>
        <link port="REST.trigger" relation="relation"/>
        <link port="REST.response" relation="relation9"/>
        <link port="REST.body" relation="relation2"/>
        <link port="Test.input" relation="relation7"/>
        <link port="StringReplace.stringToEdit" relation="relation10"/>
        <link port="StringReplace.output" relation="relation7"/>
        <link port="TokenToExpression.input" relation="relation9"/>
        <link port="TokenToExpression.output" relation="relation10"/>
        <link port="Const4.output" relation="relation11"/>
        <link port="Const4.trigger" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation11"/>
        <link port="MicrostepDelay.output" relation="relation12"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation2"/>
        <link port="ImageReader.output" relation="relation2"/>
        <link port="ImageReader.trigger" relation="relation3"/>
        <link port="Expression.output" relation="relation4"/>
        <link port="Expression.trigger" relation="relation2"/>
    </entity>
    <entity name="RecordAssembler4" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[314.32354736328125, 580.4410552978516]">
        </property>
        <port name="clientDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="serviceDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="MicrostepDelay4" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[375.0, 620.0]">
        </property>
    </entity>
    <entity name="Service5" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[655.0, 610.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 928, 617}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 500]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{907.0, 418.265625}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="output types set to string">
            </property>
            <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-100.0, 90.0]">
                <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="RecordDisassembler">
                </property>
                <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
                </property>
            </property>
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[900.0, 225.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/json">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 360.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 280.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 225.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 225.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received json1: &quot; + json1 + &quot;, json2: &quot; + json2 + &quot;, json3: &quot; + json3 + &quot; &lt;/body&gt;&lt;/html&gt;&quot;">
                <property name="style" class="ptolemy.actor.gui.style.LineStyle">
                </property>
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1035.0, 350.0]">
            </property>
            <port name="json1" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="json2" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="json3" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[890.0, 445.0]">
            </property>
            <port name="json1" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="json2" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="json3" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{{&quot;one&quot;, &quot;two&quot;, &quot;3&quot;}}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1075.0, 475.0]">
            </property>
        </entity>
        <entity name="JSONToToken" class="ptolemy.actor.lib.conversions.json.JSONToToken">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[780.0, 430.0]">
            </property>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[635.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[950.0, 430.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1225.0, 280.0]">
            </vertex>
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[950.0, 465.0]">
            </vertex>
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[950.0, 495.0]">
            </vertex>
        </relation>
        <link port="done" relation="relation3"/>
        <link port="HttpActor.response" relation="relation5"/>
        <link port="HttpActor.postBody" relation="relation2"/>
        <link port="MicrostepDelay.input" relation="relation"/>
        <link port="MicrostepDelay.output" relation="relation5"/>
        <link port="MicrostepDelay2.input" relation="relation5"/>
        <link port="MicrostepDelay2.output" relation="relation4"/>
        <link port="Const.output" relation="relation3"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="Expression.output" relation="relation"/>
        <link port="Expression.json1" relation="relation7"/>
        <link port="Expression.json2" relation="relation8"/>
        <link port="Expression.json3" relation="relation9"/>
        <link port="RecordDisassembler.input" relation="relation6"/>
        <link port="RecordDisassembler.json1" relation="relation7"/>
        <link port="RecordDisassembler.json2" relation="relation8"/>
        <link port="RecordDisassembler.json3" relation="relation9"/>
        <link port="Test.input" relation="relation7"/>
        <link port="Test.input" relation="relation8"/>
        <link port="Test.input" relation="relation9"/>
        <link port="JSONToToken.input" relation="relation2"/>
        <link port="JSONToToken.output" relation="relation6"/>
    </entity>
    <entity name="Client5" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{575.0, 555.0}">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={46, 52, 1166, 634}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[932, 524]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{463.0, 430.265625}">
        </property>
        <property name="annotation" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Strip any \r since these do not occur on all operating systems</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[435.0, 435.0]">
            </property>
        </property>
        <property name="annotation2" class="ptolemy.kernel.util.Attribute">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Pass in options to force evaluating the baseURL parameter just prior to 
executing the REST accessor, so that baseURL's port number is updated</text></svg></configure>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
            </property>
            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 240.0]">
            </property>
        </property>
        <port name="start" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{15.0, 435.0}">
            </property>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[754.375, 355.0]">
            </property>
        </port>
        <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80. &#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; * &#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {'type':'JSON', 'value':''});&#10;    this.input('command', {'type':'string', 'value':''});&#10;    this.input('arguments', {'type':'JSON', 'value':''});&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {'type':'string'});&#10;    this.output('headers');&#10;    this.parameter('timeout', {'value': 5000, 'type': 'int'});&#10;    this.parameter('outputCompleteResponseOnly', {'value':true, 'type':'boolean'});&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function() {&#10;    // Remove any leading slash that might be present.&#10;    var command = this.get('command').replace(/^\//, '');&#10;    // Encode any characters that are not allowed in a URL.&#10;    var encodedArgs = querystring.stringify(this.get('arguments'));&#10;    if (encodedArgs) {&#10;        return command + '?' + encodedArgs;&#10;    }&#10;    return command;&#10;};&#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function(response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else if (typeof options.url === 'string') {&#10;        command.url = options.url + '/' + encodedPath;&#10;    } else {&#10;        command.url.path = '/' + encodedPath;&#10;    }&#10;    command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;    &#10;    if (typeof body !== 'undefined') {&#10;    	command.body = body; &#10;    }&#10;    &#10;    // console.log(&quot;REST request to: &quot; + JSON.stringify(command));&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    // FIXME: Probably not necessary.  Bound before being passed.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    };&#10;&#10;    request = httpClient.request(command, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        if (message.body) {&#10;            this.send('response', this.exports.filterResponse.call(this, message.body));&#10;        } else {&#10;            this.send('response', this.exports.filterResponse.call(this, message));&#10;        }&#10;        if (message.statusCode) {&#10;            this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;        }&#10;        if (message.headers) {&#10;            this.send('headers', message.headers);&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	this.addInputHandler('trigger',&#10;	        this.exports.issueCommand.bind(this),&#10;	        this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/net/REST.js">
            </property>
            <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;${baseURL}&quot;}">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="command" class="ptolemy.actor.parameters.PortParameter" value="json">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="outputCompleteResponseOnly" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[360.0, 400.0]">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80. &#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
                </property>
                <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
                </property>
                <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
                </property>
                <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
                </property>
                <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
                </property>
                <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
                </property>
                <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
                </property>
            </property>
            <port name="options" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="command" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="status" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="headers" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="body" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="{json1 = &quot;one&quot;, json2 = &quot;two&quot;, json3 = &quot;3&quot;}">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 480.0]">
            </property>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;\&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\\\&quot;utf-8\\\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received json1: one, json2: two, json3: 3 &lt;/body&gt;&lt;/html&gt;\&quot;&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[803.125, 400.0]">
            </property>
        </entity>
        <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
            <property name="pattern" class="ptolemy.actor.parameters.PortParameter" value="\r">
            </property>
            <property name="stringToEdit" class="ptolemy.actor.parameters.PortParameter" value="&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta charset=\&quot;utf-8\&quot;&gt; &lt;title&gt;Data received&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Received json1: one, json2: two, json3: 3 &lt;/body&gt;&lt;/html&gt;&quot;">
            </property>
            <doc>Replace the patterns that match a regular expression</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[696.875, 400.0]">
            </property>
        </entity>
        <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[498.125, 410.0]">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[541.875, 355.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[643.125, 355.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[225.0, 395.0]">
            </property>
        </entity>
        <entity name="TokenToJSON" class="ptolemy.actor.lib.conversions.json.TokenToJSON">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[115.0, 425.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="&quot;{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;}, \&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;&quot; + baseURL + &quot;\&quot;}&quot;">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[230.0, 325.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[430.0, 405.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[195.0, 425.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="start" relation="relation8"/>
        <link port="done" relation="relation12"/>
        <link port="REST.options" relation="relation4"/>
        <link port="REST.trigger" relation="relation"/>
        <link port="REST.response" relation="relation9"/>
        <link port="REST.body" relation="relation2"/>
        <link port="Const3.output" relation="relation3"/>
        <link port="Const3.trigger" relation="relation8"/>
        <link port="Test.input" relation="relation7"/>
        <link port="StringReplace.stringToEdit" relation="relation10"/>
        <link port="StringReplace.output" relation="relation7"/>
        <link port="TokenToExpression.input" relation="relation9"/>
        <link port="TokenToExpression.output" relation="relation10"/>
        <link port="Const4.output" relation="relation11"/>
        <link port="Const4.trigger" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation11"/>
        <link port="MicrostepDelay.output" relation="relation12"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation2"/>
        <link port="TokenToJSON.input" relation="relation3"/>
        <link port="TokenToJSON.output" relation="relation2"/>
        <link port="Expression.output" relation="relation4"/>
        <link port="Expression.trigger" relation="relation2"/>
    </entity>
    <entity name="MicrostepDelay5" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[860.0, 605.0]">
        </property>
    </entity>
    <entity name="RecordAssembler5" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 575.0]">
        </property>
        <port name="clientDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="serviceDone" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Const4" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1000.0, 605.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation13" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation15" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation18" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation19" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation20" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation21" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation22" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation23" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation14" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation24" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation25" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Service.done" relation="relation6"/>
    <link port="Client.start" relation="relation"/>
    <link port="Client.done" relation="relation2"/>
    <link port="MicrostepDelay.input" relation="relation5"/>
    <link port="MicrostepDelay.output" relation="relation3"/>
    <link port="RecordAssembler.output" relation="relation5"/>
    <link port="RecordAssembler.clientDone" relation="relation2"/>
    <link port="RecordAssembler.serviceDone" relation="relation6"/>
    <link port="Const.output" relation="relation4"/>
    <link port="Const.trigger" relation="relation3"/>
    <link port="Service2.done" relation="relation8"/>
    <link port="Client2.start" relation="relation4"/>
    <link port="Client2.done" relation="relation7"/>
    <link port="RecordAssembler2.output" relation="relation9"/>
    <link port="RecordAssembler2.clientDone" relation="relation7"/>
    <link port="RecordAssembler2.serviceDone" relation="relation8"/>
    <link port="MicrostepDelay2.input" relation="relation9"/>
    <link port="MicrostepDelay2.output" relation="relation11"/>
    <link port="Const2.output" relation="relation10"/>
    <link port="Const2.trigger" relation="relation11"/>
    <link port="Service3.done" relation="relation13"/>
    <link port="Client3.start" relation="relation10"/>
    <link port="Client3.done" relation="relation12"/>
    <link port="RecordAssembler3.output" relation="relation15"/>
    <link port="RecordAssembler3.clientDone" relation="relation12"/>
    <link port="RecordAssembler3.serviceDone" relation="relation13"/>
    <link port="Stop.input" relation="relation24"/>
    <link port="Const3.output" relation="relation25"/>
    <link port="Const3.trigger" relation="relation20"/>
    <link port="MicrostepDelay3.input" relation="relation15"/>
    <link port="MicrostepDelay3.output" relation="relation16"/>
    <link port="Service4.done" relation="relation18"/>
    <link port="Client4.start" relation="relation16"/>
    <link port="Client4.done" relation="relation17"/>
    <link port="RecordAssembler4.output" relation="relation19"/>
    <link port="RecordAssembler4.clientDone" relation="relation17"/>
    <link port="RecordAssembler4.serviceDone" relation="relation18"/>
    <link port="MicrostepDelay4.input" relation="relation19"/>
    <link port="MicrostepDelay4.output" relation="relation20"/>
    <link port="Service5.done" relation="relation23"/>
    <link port="Client5.start" relation="relation25"/>
    <link port="Client5.done" relation="relation22"/>
    <link port="MicrostepDelay5.input" relation="relation21"/>
    <link port="MicrostepDelay5.output" relation="relation14"/>
    <link port="RecordAssembler5.output" relation="relation21"/>
    <link port="RecordAssembler5.clientDone" relation="relation22"/>
    <link port="RecordAssembler5.serviceDone" relation="relation23"/>
    <link port="Const4.output" relation="relation24"/>
    <link port="Const4.trigger" relation="relation14"/>
</entity>
