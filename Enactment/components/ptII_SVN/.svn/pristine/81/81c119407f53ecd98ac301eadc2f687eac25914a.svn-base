<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ContextAwareTest" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{80.0, 100.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={93, 110, 932, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[698, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{346.849853515625, 332.0391845703125}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="&#10; This is just an experimental system, so the UI is very primitive and basic.&#10; To experiment with it, do the following (for the case when no prior selection is made):&#10; &#10; 1. double click on the accessor, make a selection, press commit&#10; 2. double click on the accessor, press the reload button and then press commit&#10; 3. double click on the accessor again and the required input for the selected REST service&#10;     will appear on the editor menu:&#10;        a. for GSN,  enter 'pluto.cs.txstate.edu' for the host, enter '22001' for&#10;             the port, leave the rest as default&#10;        b. for Paraimpu, enter 'api.paraimpu.com' for the host, enter'443' for the&#10;             port, enter this is '46e0ee55195c4dd9dca295a7ac8282d28f4a2259'  for&#10;             access token&#10;        c. for Firebase, enter 'https://sizzling-fire-8605.firebaseio.com' for the host, enter '443' for port &#10;            and leave the rest as default. You can change the type of data you want to retrieve by changing the&#10;            value in path. For example changing it to 'sensors.json' will retrieve data about various sensor last &#10;            recorded values.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 300.0]">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{60.0, 200.0}">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={170, 335, 950, 301}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[950, 257]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{415.0, 170.0}">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{615.0, 260.0}">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{495.0, 260.0}">
        </property>
    </entity>
    <entity name="Const2" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{435.0, 260.0}">
        </property>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;200: OK&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{325.0, 265.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={534, 170, 746, 232}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[746, 188]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[375.0, 105.0]">
        </property>
    </entity>
    <entity name="ContextAwareTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor discovers IOT services on web.&#10; *  It requires the contextAware module.  Please see:&#10; *  https://www.terraswarm.org/accessors/wiki/Version0/ContextAware&#10; * &#10; *  @accessor contextAwareTest&#10; *  @author Anne H. Ngu (angu@btxstate.edu)&#10; *  @input {number} input to the accessor&#10; *	@parameter {{string} the name of the REST service that context aware tries&#10; *     to adapt. A list of available services are presented as option.&#10; &#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, console, exports, extend, get, getParameter, implement, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;// Use the SandBox version for test&#10;var contextAware = require(&quot;contextAwareTest&quot;);&#10;&#10;&#10;// Initialize the context aware service discovery class. Not used currently&#10;var contextAwareService = new contextAware.DiscoveryOfRESTService();  &#10;&#10;var selectedService;&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    // a simple UI interface to start the dialog with users&#10;    this.parameter('RESTSource', { 'type': 'string',&#10;                              'value': 'Make a selection',&#10;                              'options':contextAware.services()}&#10;             );&#10;    selectedService = this.getParameter('RESTSource');&#10;    if (selectedService == 'GSN')&#10;    {&#10;        this.implement(&quot;contextAware/GSNInterface.js&quot;);&#10;        this.input('dataType', &#10;    	      {'type': 'string',&#10;      	       'value': 'all',&#10;      	       'options':contextAware.gsnServices()}); &#10;    }&#10;    else if (selectedService == 'Paraimpu') {&#10;        this.implement(&quot;contextAware/ParaimpuInterface.js&quot;);&#10;        this.input('dataType', {&#10;   	    type: 'string',&#10;   	    value: 'all',&#10;   	    'options':contextAware.paraimpuServices()&#10;   	}); &#10;    }&#10;    else if (selectedService == 'Firebase'){&#10;        this.implement(&quot;contextAware/FirebaseInterface.js&quot;);&#10;        this.input('dataType', {&#10;      	    type: 'string',&#10;      	    value: 'all',&#10;      	    'options':contextAware.firebaseServices()&#10;      	}); &#10;    }&#10;    else {&#10;        console.log(&quot;Cannot load service interface !!&quot;);&#10;    }&#10;    this.extend(&quot;net/REST.js&quot;);&#10;    this.input('command', {'visibility':'expert'});&#10;    this.input('arguments', {'visibility':'expert'});&#10;    this.input('options',{'visibility':'expert'});&#10;    this.output('header',{'visibility':'expert'});&#10;    this.input('trigger',{'visibility':'expert'});&#10;};&#10;&#10;/** Upon receiving details of a REST service, construct a concrete accessor to access it.&#10; */&#10;var handle;&#10;exports.initialize = function () {&#10;    // The superclass registers a handler for the 'trigger' input&#10;    // to issue an HTTP request based on the current inputs.&#10;    this.ssuper.initialize();&#10;    var serviceParam; //the input that is needed for the options port in REST&#10;    &#10;    // Add a handler for the 'input' input.&#10;    handle = this.addInputHandler('input', function() {&#10;        console.log(&quot;ContextAwareTest.js input handler start&quot;);&#10;        serviceParam = contextAwareService.discoverServices();&#10;	console.log(&quot;org/terraswarm/accessor/accessors/web/contextAware/ContextAwareTest.js: serviceParam: &quot; + serviceParam);&#10;        //var serviceURL = this.getParameter('ipAddress');&#10;        var serviceURL = {&quot;url&quot;:{&quot;host&quot;:getParameter('host'), &quot;port&quot;: this.getParameter('port'), &quot;protocol&quot;: this.getParameter('protocol')}};&#10;        this.send('options',  serviceURL);&#10;        this.send('command', this.getParameter('path'));&#10;        if (selectedService == 'Paraimpu') {&#10;            //sample access token to use &quot;46e0ee55195c4dd9dca295a7ac8282d28f4a2259&quot;&#10;            var arg = {&quot;access_token&quot;: this.getParameter('accessToken')};&#10;            console.log(&quot;org/terraswarm/accessor/accessors/web/contextAware/ContextAwareTest.js: access_token:&quot; + arg);&#10;            send ('arguments', arg);&#10;        }&#10;        //ex. of valid json format for reference&#10;        //send('options', {&quot;url&quot;:&quot;http://pluto.cs.txstate.edu:22001&quot;});&#10;        //send('options', {&quot;url&quot;:{&quot;host&quot;:&quot;pluto.cs.txstate.edu&quot;,&quot;port&quot;:22001}});&#10;        &#10;        // Cause the base class handler to issue the HTTP request.&#10;        this.send('trigger', true);&#10;        //send('response', this.issueCommand(handleResponse))&#10;        // console.log(get('response'));&#10;        console.log(&quot;ContextAwareTest.js input handler end&quot;);&#10;    }); &#10;};&#10;&#10;/**&#10; * Filter the response. It overrides the filterResponse() in the base class to&#10; * extract a portion of the response that is defined in the corresponding&#10; * service interface&#10; */&#10;exports.filterResponse = function(response) {&#10;    &#10;    switch(selectedService) {&#10;    case &quot;GSN&quot;:&#10;	getGSNData(response);&#10;	break;&#10;    case &quot;Paraimpu&quot;:&#10;	getParaimpuData(response);&#10;	break;&#10;    case &quot;Firebase&quot;:&#10;	getFirebaseData(response);&#10;	break;&#10;    }&#10;    console.log(&quot;Response&quot; + response);&#10;    return response;&#10;};&#10;&#10;/** Filter the response from Firebase&#10; */&#10;function getFirebaseData(response) {&#10;    var type = this.get('dataType');&#10;    var result=JSON.parse(response);&#10;    switch(type) {&#10;    case &quot;microwave&quot;:&#10;	this.send('microwave', result.Microwave);&#10;	console.log(&quot;ContextAwareTest filterResponse() &quot; + JSON.stringify(result.Microwave));&#10;	break;&#10;    case &quot;microwaveStatus&quot;:&#10;	this.send('microwaveStatus',  result.Microwave.status);&#10;	break;&#10;    case &quot;pastValues&quot;:&#10;	this.send('pastValues', result.Microwave.pastValues);&#10;	break;&#10;    case &quot;all&quot;:&#10;	this.send('microwave', result.Microwave);&#10;	this.send('microwaveStatus',  result.Microwave.status);&#10;	this.send('pastValues', result.Microwave.pastValues);&#10;	break;&#10;    default:&#10;	this.send('microwave', result.Microwave);&#10;    }&#10;}&#10;/** filter the response from Paraimpu&#10; */&#10;function getParaimpuData(response) {&#10;    var type = this.get('dataType');&#10;    var result=JSON.parse(response);&#10;    switch (type) {&#10;    case &quot;payload&quot;:&#10;	this.send('payload', result.payload);&#10;	console.log(&quot;ContextAwareTest filterResponse() &quot; + JSON.stringify(result.payload));&#10;	break;&#10;    case &quot;thingId&quot;:&#10;	this.send('sensorId', result.thingId);&#10;	break;&#10;    case &quot;producer&quot;:&#10;	this.send('producer', result.producer);&#10;	break;&#10;    case &quot;all&quot;:&#10;	this.send('payload', result.payload);&#10;	this.send('sensorId', result.thingId);&#10;	this.send('producer', result.producer);&#10;	break;&#10;    default:&#10;	this.send('response', result);&#10;    }&#10;}&#10;&#10;/** Filter the response from GSN. Need to convert the data to json format first&#10; * &#10; */&#10;function getGSNData(response) {&#10;    var type = this.get('dataType');&#10;    var xmlJson={};&#10;    xmlJson=contextAware.xmlToJson(response);&#10;    var result = JSON.parse(xmlJson);&#10;    switch(type) {&#10;    case &quot;sound&quot;:&#10;        // jsdoc was failing with &quot;line 271: missing name after . operator&quot;&#10;        // This code has no tests because the GSN source on the web does not stay up.&#10;        // http://stackoverflow.com/questions/19217365/missing-name-after-operator-yui-compressor-for-socket-io-js-files&#10;        // suggests using ['..']&#10;	//send('sound', result.&quot;virtual-sensor&quot;[2].field[2]);&#10;        this.send('sound', result['virtual-sensor'][2].field[2]);&#10;	break;&#10;    case &quot;sensorName&quot;:&#10;	//send('sensorName', result.&quot;virtual-sensor&quot;[2].name);&#10;	this.send('sensorName', result['virtual-sensor'][2].name);&#10;	break;&#10;    case &quot;all&quot;:&#10;	//send('sound', result.&quot;virtual-sensor&quot;[2].field[2]);&#10;	this.send('sound', result['virtual-sensor'][2].field[2]);&#10;	//send('sensorName', result.&quot;virtual-sensor&quot;[2].name);&#10;        this.send('sensorName', result['virtual-sensor'][2].name);&#10;	break;&#10;    default:&#10;	//send('response', result.&quot;virtual-sensor&quot;);&#10;	this.send('response', result['virtual-sensor']);&#10;    }&#10;}&#10;&#10;&#10;/*var itemList = [];&#10;  var type = &quot;Microwave&quot;;&#10;  var itemKeys = Object.keys(result);&#10;  for (var x in itemKeys) {&#10;  itemList.push(itemKeys[x]);&#10;  }&#10;  for (var y in itemList) {&#10;  if (itemList[y] == &quot;Microwave&quot;) &#10;  console.log(&quot;ContextAwareTest filterResponse() &quot; + JSON.stringify(&quot;result.&quot;+ type));&#10;  }&#10;  console.log(&quot;ContextAwareTest filterResponse() &quot; + JSON.stringify(result.Microwave.pastValues));&#10;*/&#10;//  return result;&#10;&#10;//};&#10;&#10;&#10;exports.wrapup = function() {&#10;    &#10;    this.removeInputHandler(handle);&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/contextAware/ContextAwareTest.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor discovers IOT services on web.&#10; It requires the contextAware module.  Please see:&#10; https://www.terraswarm.org/accessors/wiki/Version0/ContextAware&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Anne H. Ngu (angu@btxstate.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="to the accessor">
            </property>
            <property name="{{string} (parameter)" class="ptolemy.kernel.util.StringAttribute" value="the name of the REST service that context aware tries&#10;    to adapt. A list of available services are presented as option.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, 200.0]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="RESTSource" class="ptolemy.data.expr.Parameter" value="GSN">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value=" ">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="host" class="ptolemy.data.expr.Parameter" value="sizzling-fire-8605.firebaseio.com">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="443">
        </property>
        <property name="protocol" class="ptolemy.data.expr.Parameter" value="https">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="path" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="username" class="ptolemy.data.expr.Parameter" value="admin">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="password" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="method" class="ptolemy.data.expr.Parameter" value="GET">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="dataType" class="ptolemy.actor.parameters.PortParameter" value="all">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="accessToken" class="ptolemy.data.expr.Parameter" value="46e0ee55195c4dd9dca295a7ac8282d28f4a2259">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="dataType" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="header" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="sound" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="sensorName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="payload" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="producer" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="sensorId" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="microwave" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="microwaveStatus" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="pastValues" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Stop.input&quot;,x=615.0,y=260.0}, tail={id=&quot;MicrostepDelay.output&quot;,x=495.0,y=260.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;MicrostepDelay.input&quot;,x=495.0,y=260.0}, tail={id=&quot;Const2.output&quot;,x=435.0,y=260.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{375.0, 170.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const2.trigger&quot;,x=435.0,y=260.0}, tail={id=&quot;relation7.vertex1&quot;,x=375.0,y=170.0}, points={375.0,260.0} },{ head={id=&quot;Display2.input&quot;,x=415.0,y=170.0}, tail={id=&quot;relation7.vertex1&quot;,x=375.0,y=170.0}, points={} },{ head={id=&quot;relation7.vertex1&quot;,x=375.0,y=170.0}, tail={id=&quot;ContextAwareTest.response&quot;,x=180.0,y=180.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{260.0, 240.0}">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Display2.input" relation="relation7"/>
    <link port="Stop.input" relation="relation5"/>
    <link port="MicrostepDelay.input" relation="relation6"/>
    <link port="MicrostepDelay.output" relation="relation5"/>
    <link port="Const2.output" relation="relation6"/>
    <link port="Const2.trigger" relation="relation7"/>
    <link port="Test.input" relation="relation3"/>
    <link port="Display.input" relation="relation2"/>
    <link port="Display.input" relation="relation4"/>
    <link port="ContextAwareTest.input" relation="relation"/>
    <link port="ContextAwareTest.response" relation="relation7"/>
    <link port="ContextAwareTest.status" relation="relation3"/>
    <link port="ContextAwareTest.sound" relation="relation2"/>
    <link port="ContextAwareTest.sensorName" relation="relation4"/>
</entity>
