<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="createEntity" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 143, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000006">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{359.19483103197655, 151.38277616279066}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-5, -20}">
        </property>
    </property>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="var mapManager = require('mapManager');&#10;&#10;exports.initialize = function(){&#10;	&#10;	var myCoords = new mapManager.CoordinateSystem(&quot;myCoordsName&quot;);&#10;	var myMap = new mapManager.Map(&quot;myMapName&quot; , mapManager.SpaceTypeEnum.EUCLIDEAN, myCoords);&#10;	mapManager.registerMap(myMap);&#10;	&#10;	&#10;	var cat = new mapManager.Entity(&quot;cat&quot;);&#10;	var bird = new mapManager.Entity(&quot;bird&quot;);&#10;	var dog = new mapManager.Entity(&quot;dog&quot;);&#10;	&#10;	this.send(&quot;output&quot;,&quot;Global entities (should be empty)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.entitiesToString());&#10;	&#10;	this.send(&quot;output&quot;, &quot;Registering cat (should be true)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.registerEntity(cat));&#10;	&#10;	this.send(&quot;output&quot;, &quot;Registering cat again (should be false)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.registerEntity(cat));&#10;	this.send(&quot;output&quot;, &quot;Registering dog (should be true)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.registerEntity(dog));&#10;	this.send(&quot;output&quot;, &quot;Registering bird (should be true)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.registerEntity(bird));&#10;	&#10;	this.send(&quot;output&quot;, &quot;Global entities (should have cat, dog, and bird)&quot;);&#10;	this.send(&quot;output&quot;, mapManager.entitiesToString());&#10;	&#10;	&#10;	this.send(&quot;output&quot;, &quot;myMap's mapEntities.&quot;);&#10;	this.send(&quot;output&quot;, myMap.mapEntitiesToString());&#10;	&#10;	this.send(&quot;output&quot;, &quot;Adding cat to myMap (should be true)&quot;);&#10;	this.send(&quot;output&quot;, myMap.addEntity(cat));&#10;	this.send(&quot;output&quot;, &quot;Adding cat to myMap again (should be false)&quot;);&#10;	this.send(&quot;output&quot;, myMap.addEntity(cat));&#10;	this.send(&quot;output&quot;, &quot;Adding dog to myMap (should be true)&quot;);&#10;	this.send(&quot;output&quot;, myMap.addEntity(dog));&#10;	&#10;	this.send(&quot;output&quot;, &quot;myMap's mapEntities.&quot;);&#10;	this.send(&quot;output&quot;, myMap.mapEntitiesToString());&#10;	this.send(&quot;output&quot;, &quot;Global entities&quot;);&#10;	this.send(&quot;output&quot;, mapManager.entitiesToString());&#10;	&#10;	this.send(&quot;output&quot;, &quot;Removing dog. Should be true.&quot;);&#10;	this.send(&quot;output&quot;, myMap.removeEntity(dog));&#10;	this.send(&quot;output&quot;, &quot;Removing dog again. Should be false.&quot;);&#10;	this.send(&quot;output&quot;, myMap.removeEntity(dog));&#10;	&#10;	this.send(&quot;output&quot;, &quot;myMap's mapEntities.&quot;);&#10;	this.send(&quot;output&quot;, myMap.mapEntitiesToString());&#10;	this.send(&quot;output&quot;, &quot;Global entities&quot;);&#10;	this.send(&quot;output&quot;, mapManager.entitiesToString());&#10;	&#10;	var unregisteredThing = new mapManager.Entity(&quot;unregisteredThing&quot;);&#10;	this.send(&quot;output&quot;, &quot;Attempting to add an unregistered entity to myMap&quot;);&#10;	try{&#10;		myMap.addEntity(unregisteredThing);&#10;		this.send(&quot;output&quot;, &quot;Test failure, this line should not execute :-(&quot;);&#10;	} catch(e){&#10;		this.send(&quot;output&quot;, e);&#10;	}&#10;	&#10;	this.send(&quot;output&quot;, &quot;Attempting to remove an unregistered entity from myMap&quot;);&#10;	try{&#10;		myMap.removeEntity(unregisteredThing);&#10;		this.send(&quot;output&quot;, &quot;Test failure, this line should not execute :-(&quot;);&#10;	} catch(e){&#10;		this.send(&quot;output&quot;, e);&#10;	}&#10;	&#10;	this.send(&quot;output&quot;, mapManager.localRepoToJSONString());&#10;	&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{50.0, 170.0}">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;Global entities (should be empty)&quot;, &quot;{  }&quot;, &quot;Registering cat (should be true)&quot;, &quot;true&quot;, &quot;Registering cat again (should be false)&quot;, &quot;false&quot;, &quot;Registering dog (should be true)&quot;, &quot;true&quot;, &quot;Registering bird (should be true)&quot;, &quot;true&quot;, &quot;Global entities (should have cat, dog, and bird)&quot;, &quot;{ cat: { name: cat }, dog: { name: dog }, bird: { name: bird } }&quot;, &quot;myMap's mapEntities.&quot;, &quot;{  }&quot;, &quot;Adding cat to myMap (should be true)&quot;, &quot;true&quot;, &quot;Adding cat to myMap again (should be false)&quot;, &quot;false&quot;, &quot;Adding dog to myMap (should be true)&quot;, &quot;true&quot;, &quot;myMap's mapEntities.&quot;, &quot;{ cat: true, dog: true }&quot;, &quot;Global entities&quot;, &quot;{ cat: { name: cat }, dog: { name: dog }, bird: { name: bird } }&quot;, &quot;Removing dog. Should be true.&quot;, &quot;true&quot;, &quot;Removing dog again. Should be false.&quot;, &quot;false&quot;, &quot;myMap's mapEntities.&quot;, &quot;{ cat: true }&quot;, &quot;Global entities&quot;, &quot;{ cat: { name: cat }, dog: { name: dog }, bird: { name: bird } }&quot;, &quot;Attempting to add an unregistered entity to myMap&quot;, &quot;Cannot add unregistered entity to map{ name: unregisteredThing }&quot;, &quot;Attempting to remove an unregistered entity from myMap&quot;, &quot;Cannot remove an unregistered entity from the map{ name: unregisteredThing }&quot;, &quot;{\&quot;maps\&quot;:{\&quot;myMapName\&quot;:{\&quot;spaceType\&quot;:\&quot;Euclidean\&quot;,\&quot;coordinateSystem\&quot;:{\&quot;name\&quot;:\&quot;myCoordsName\&quot;},\&quot;mapName\&quot;:\&quot;myMapName\&quot;,\&quot;mapEntities\&quot;:{\&quot;cat\&quot;:true}}},\&quot;coordinateTransformations\&quot;:{},\&quot;entities\&quot;:{\&quot;cat\&quot;:{\&quot;name\&quot;:\&quot;cat\&quot;,\&quot;containingMap\&quot;:\&quot;myMapName\&quot;,\&quot;aliases\&quot;:{},\&quot;placements\&quot;:{},\&quot;occupancies\&quot;:{}},\&quot;dog\&quot;:{\&quot;name\&quot;:\&quot;dog\&quot;,\&quot;containingMap\&quot;:null,\&quot;aliases\&quot;:{},\&quot;placements\&quot;:{},\&quot;occupancies\&quot;:{}},\&quot;bird\&quot;:{\&quot;name\&quot;:\&quot;bird\&quot;,\&quot;containingMap\&quot;:null,\&quot;aliases\&quot;:{},\&quot;placements\&quot;:{},\&quot;occupancies\&quot;:{}}}}&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{380.0, 145.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={291, 117, 832, 397}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[832, 353]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{335, 280}">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={751, 517, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{720, 260}">
        </property>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[185.0, 160.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="JavaScript.output" relation="relation2"/>
    <link port="Test.input" relation="relation2"/>
    <link port="Test.output" relation="relation"/>
    <link port="Display.input" relation="relation2"/>
    <link port="Display2.input" relation="relation"/>
</entity>
