<!-- $Id$ -->
<html>
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
    <link href="../default.css" rel="stylesheet" type="text/css">
    <title>Installers</title>
  </head>
  <body>
    <h1>Installers</h1>

    <h2>Features Ptolemy II needs</h2>
    <ul>
      <li> Ability to install a custom, bundled JRE</li>
      <li> Multiple programs in the Start Menu.</li>
    </ul>

    <h2>List of installers</h2>
    <ul>
      <li> <a href="http://java-source.net/open-source/installer-generators" target="_top">java-source.net - List of Open Source Installers written in Java</a></li>
      <li> <a href="http://javatoolbox.com/categories/deployment-installation" target="_top">javatoolbox - Java deployment and installation tools</a></li>
      <li> <a href="http://www.excelsior-usa.com/articles/java-to-exe.html#in_browser" target="_top">Excelsior-usa: Java to exe</a></li>
    </ul>

    <h2>Free Installers</h2>
    <dl>
      <dt><a href="http://www.izforge.com/izpack/#in_browser" target="_top">izPack</a>
	<dd> <a href="http://www.velocityreviews.com/forums/t302544-free-java-installer-with-capability-to-bundle-jvm.html#in_browser" target="_top">velocityreviews.com</a> says:
	  <blockquote>
	    The IzPack native launcher will first check for a JRE on the target
	    system. If one is found, then it will launch the installer. If no JRE
	    can be found, then it will help the user in installing one either from
	    the internet or from a bundled one. To sum-up, the IzPack native
	    launcher will allow your users to install your software even if they
	    don't have a JRE at first sight.
	  </blockquote>
	  The IzPack native launcher is a .exe file that looks for a file called
	  <code>launcher.ini</code> in the current directory.  The
	  <code>launcher.ini</code> specifies:
	  <ul>
	    <li> which jar file contains the IzPack installer.  </li>
	    <li> The setup .exe or script to run to install the JRE.
	      <br> Unfortunately, this does not meet our needs, since we want to use
	      a custom JRE that includes packages like Java3D etc.  For us to use
	      this, we would need to create a JRE setup script.</li>
	  </ul>
	  <a href="http://openfacts.berlios.de/index-en.phtml?title=IzPack/Launcher#in_browser" target="_top">Notes about IzPack Launcher and possible alternatives</a>
	</dd>
      <dt><a href="http://launch4j.sourceforge.net/#in_browser" target="_top">launch4j</a></dt>
      <dd>Can include a JRE, but really only for one application?
	We need to add multiple apps to the Start Menu.</dd>

    </dl>

    <h2>Commercial installers</h2>
    <ul>
      <li> <a href="http://www.advancedinstaller.com/java.html#in_browser" target="_top">Advanced Installer</a></li>
      <li> <a href="http://www.denova.com" target="_top">Denova JExpress</a></li>
      <li> <a href="http://www.dobysoft.com/products/nativej/features.html#in_browser" target="_top">Dobysoft NativeJ</a> $49.95/$89.95</li>
      <li> <a href="http://www.ej-technologies.com/products/install4j/features.html#in_browser" target="_top">Install4J</a>  edu pricing: $199/$349</li>

    </ul>

    <h2>Ptolemy installers</h2>
    To install Ptolemy under Windows, we require an optional custom JRE.
    <p>The way we do this is based on
      <a href="http://openfacts.berlios.de/index-en.phtml?title=IzPack/Launcher#in_browser" target="_top">Notes about IzPack Launcher and possible alternatives</a>.
      <ol>
	<li>We create an 
	  <a href="http://www.izforge.com/izpack/#in_browser" target="_top">izPack</a>
	  installer that installs Ptolemy II
	<li>We use 
	  <a href="http://launch4j.sourceforge.net/#in_browser" target="_top">launch4j</a>
	  to invoke the izPack installer.  The launch4j installer includes
	  an optional JRE.
      </ol>

      <ol>
	<li>Create a jre that has JAI, Java 3D, Joystick  JMF, JavaComm, X10 etc.
	  in it.
	  See <a href="../install.htm#notshippedPackages">Optional packages not shipped with Ptolemy used at runtime</a>
	<li>Copy this jre to <code>$PTII/adm/gen-<i>X.Y</i>/jre</code>
      </ol>

      <h2>IzPack notes</h2>
      <h3>Things I wish were different</h3> 
      These notes are for IzPack 3.9.0-M1, from September 9, 2006.  
      <ul>
	<li>IzPack should be easier to use with a custom JRE.
	  The IzPack native launcher will allow me to invoke the JRE installer,
	  but I want to use a JRE that is in the current directory.
	  <a href="http://www.izforge.com/izpack/wiki/native_launcher_and_alternatives#in_browser" target="_top">the IzPack wiki</a> (see also
	  <a href="http://openfacts.berlios.de/index-en.phtml?title=IzPack/Launcher#in_browser" target="_top">Notes about IzPack Launcher and possible alternatives</a>) describe
	  using <a href="http://launch4j.sourceforge.net/#in_browser" target="_top">Launch4j</a>.
	  <br>I ended up using Launch4j to create a .exe that invokes
	  the jar file created by IzPack.  I also used Launch4j to create
	  my .exe files that are added to the Start menu.</li>

	<li>There should be an easy way to ask the user if they want to
	  invoke a binary after the installation is complete.</li>

	<li>I'd like to add a message to the TargetPanel that describes why
	  the default location in C:/Program Files won't work.</li>

	<li>In HTMLInfoPanel, the packing seems to change depending on
	  my html file.  Sometimes the pane that displays the HTML does not
	  fill the width of the screen.  It seem like using style sheets
	  causes problems here</li>

	<li>I'd like there to be a JREPathPanel that is like the JDKPathPanel.
	  In one of the installers, I provide a custom JRE that includes JAI,
	  Java 3D, Joystick JMF, JavaComm, and X10.  I'd like to give the user
	  the opportunity to use the custom JRE, or to choose their own JRE or
	  JDK.</li>

	<li>It would be nice if there was a way for the installer to unjar
	  files on command.  I provide source in a jar file, if the user
	  chooses to install the sources, then that file should be uninstalled.
	  The reason I use a jar file is because it makes it easier (faster) to
	  build installers - my sources are a few thousand files, it is
	  faster to copy one file around at installer build time than
	  it is to copy lots of files.</li>

	<li> The <a href="http://www.izforge.com/izpack/developers#in_browser" target="_top">IzPack Developer's page</a> should state clearly how to build.  Yah, I know, if you don't
	  know svn, you probably can't devel, but I find quick instructions useful.
	  The instructions should point to an online copy of the most recent 
	  Eclipse instructions.  I found the TeX docs, but is there
	  an online version of the manual?
	  
	  <br>There should also be a link to 
	  <a href="http://www.izforge.com/izpack/wiki/building_native_launcher#in_browser" target="_top">How to build the native launcher</a></li>
      </ul>

      <h3>Building IzPack</h3> 
      <a href="http://www.izforge.com/izpack/developers#in_browser" target="_top">IzPack Developer's page</a>
      <ol>
	<li> Download from the trunk
	  <pre>
	    svn co http://svn.berlios.de/svnroot/repos/izpack/izpack-src/trunk
	  </pre>
	</li>
	<li> I followed the Eclipse instructions from the IzPack 3.9.0-M1 release
	  One change was that when setting up the debug, I used
	  <pre>
	    c:\cxh\ptII\adm\gen-6.0\ptII6_0-devel_setup.xml \
	    -b c:\cxh\ptII\adm\gen-6.0 \
	    -o c:\cxh\ptII\adm\gen-6.0\ptII6_0-devel_setup.jar \
	    -h c:\cxh\src\izpack\trunk
	  </pre>
	  Where
	  <dl>
	    <dt> <code>c:\cxh\ptII\adm\gen-6.0\ptII6_0-devel_setup.xml</code></dt>
	    <dd> My IzPack configuration file, usually called <code>install.xml</code></dd>
	    <dt> <code>-b c:\cxh\ptII\adm\gen-6.0</code></dt>
	    <dd> The base for my build</dd>
	    <dt> <code>-o c:\cxh\ptII\adm\gen-6.0\ptII6_0-devel_setup.jar</code></dt>
	    <dd> The file to output</dd>
	    <dt> <code>-h c:\cxh\src\izpack\trunk</code></dt>
	    <dd> The IzPack source directory.</dd>  

	  </dl>
	</li>
	<li> <b>Problems</b>:
	  <dl>
	    <dt> <code>No valid IzPack home directory found</code></dt>
	    <dd>
	      Building in Eclipse fails with:
	      <pre>
		-> Fatal error :
		No valid IzPack home directory found
		java.lang.IllegalArgumentException: No valid IzPack home directory found
		at com.izforge.izpack.compiler.CompilerConfig.resolveIzPackHome(CompilerConfig.java:1908)
		at com.izforge.izpack.compiler.CompilerConfig.main(CompilerConfig.java:1835)
		at com.izforge.izpack.compiler.Compiler.main(Compiler.java:622)
	      </pre>
	      The solution is to copy <code>ShellLink.dll</code>
	      <pre>
		cp c:/Pro*/izpack/bin/native/izpack/ShellLink.dll izpack
	      </pre>
	    </dd>
	    <dt><code>Uninstaller not found: c:\cxh\src\izpack\trunk\lib\uninstaller.jar</code></dt>
	    <dd> Building in Eclipse fails with:
	      <pre>
		-> Fatal error :
		c:\cxh\ptII\adm\gen-6.0\ptII6_0_devel_setup.xml:18: Uninstaller not found: c:\cxh\src\izpack\trunk\lib\uninstaller.jar
		com.izforge.izpack.compiler.CompilerException: c:\cxh\ptII\adm\gen-6.0\ptII6_0_devel_setup.xml:18: Uninstaller not found: c:\cxh\src\izpack\trunk\lib\uninstaller.jar
		at com.izforge.izpack.compiler.CompilerConfig.parseError(CompilerConfig.java:1523)
		at com.izforge.izpack.compiler.CompilerConfig.findIzPackResource(CompilerConfig.java:1488)
		at com.izforge.izpack.compiler.CompilerConfig.addInfo(CompilerConfig.java:1199)
		at com.izforge.izpack.compiler.CompilerConfig.executeCompiler(CompilerConfig.java:316)
		at com.izforge.izpack.compiler.CompilerConfig.main(CompilerConfig.java:1854)
		at com.izforge.izpack.compiler.Compiler.main(Compiler.java:622)
	      </pre>
	      Solution, use ant:
	      <pre>
		cd trunk/src
		ant dist
	      </pre>
	      I'm not sure how to do this from Eclipse.  Eclipse can run ant but
	      the setup instructions have us include files from <code>src/lib</code>,
	      not <code>src</code>.
	    </dd>
	    <dt>Problems with the uninstaller
	      <dd>The Uninstaller was failing for me, see
		<a href="http://lists.berlios.de/pipermail/izpack-users/2006-September/002637.html#in_browser" target="_top">The Unistaller.jar is not working</a>
		<p>I had a problem with <code>OsVersion</code> missing when I ran</p>
		<pre>
		  java -version uninstaller.jar
		</pre>
		<p>The solution was to check out the 3.9 branch and rebuild:</p>
		<pre>
		  svn co http://svn.berlios.de/svnroot/repos/izpack/izpack-src/branches/branch-3.9/
		  cd 3.9.0-M1/src
		  ant
		</pre>
		<p>I also had to edit <code>build.xml</code> so that we included izpack/util/os/*.class as per <a href="http://lists.berlios.de/pipermail/izpack-users/2006-September/002637.html#in_browser" target="_top">The Unistaller.jar is not working</a></p>n

		<p>It turns out that part of the install process updates <code>uninstaller.jar</code>.  So, I had to copy the <code>uninstaller.jar</code> file
		  over to the installed version of IzPack - copying <code>uninstaller.jar</code>
		  to the installed application will not do it.</p>
	      </dd>
	  </dl>
      </ol>

      <h3>Setting up IzPack to unjar source files</h3>
      We want to IzPack to unjar the source file because it is faster to create
      an installer that has one jar file in it than it is to create an installer
      that has multiple (many thousand) files.
    <p>The solution is to use the ProcessPanel and define our own class
      that does the extraction.
      <h4>Problems</h4>
      <dl>
	<dt><code>Cannot find Resource ProcessPanel.Spec.xml for language eng</code></dt>
	<dd>
	  <pre>
	    com.izforge.izpack.installer.ResourceNotFoundException: Can not find Resource ProcessPanel.Spec.xml for language eng
	    at com.izforge.izpack.installer.ResourceManager.getLanguageResourceString(ResourceManager.java:137)
	    at com.izforge.izpack.installer.ResourceManager.getInputStream(ResourceManager.java:154)
	    at com.izforge.izpack.installer.ProcessPanelWorker.readSpec(ProcessPanelWorker.java:109)
	    at com.izforge.izpack.installer.ProcessPanelWorker.run(ProcessPanelWorker.java:233)
	    at java.lang.Thread.run(Unknown Source)
	    Error parsing XML specification for processing.
	  </pre>
	  Solution:
	  <br>Add the following to the configuration file
	  <pre>
	    &lt;res src="ProcessPanel.Spec.xml" id="ProcessPanel.Spec.xml"/&gt;
	  </pre>
	</dd>
	<dt>"Cannot find processing class"</dt>
	<dd>The class needs to be present in the jar file that is created
	  by IzPack.  We use the <code>-u</code> command:
	  <pre>
	    jar -fu c:/Program\ Files/IzPack/lib/installer.jar ExtractJarFile.class 
	  </pre>
	</dd>
      </dl>

    <p>We also have to update the <code>standalone-compiler.jar</code> file
      with the new <code>installer.jar</code> file.  My solution was to rebuild
      izPack and run</p>
    <pre>
      cd izpack/trunk/src
      rm ../lib/installer.jar
      ant build.installer
      jar -uf ../lib/installer.jar ExtractJarFile.class
      ant build.standalone-compiler
      cp ../lib/standalone-compiler.jar ../../izpack3.9.0/lib/standalone-compiler.jar
    </pre>
    <p>However, a better solution is to use 
      <code>&ltjar src="ExtractJarFile.jar"&gt;</code> in the
      <code>install.xml</code> file</p>

    <dl>
      <dt><code>Error accessing processing class</code></dt>
      <dd>I modified <code>src/lib/com/izforge/izpack/installer/ProcessPanelWorker.java</code> so that it printed the exception, which was
	<code>Class com.izforge.izpack.installer.ProcessPanelWorker$ExecutableClass
	  can not access a member of class ExtractJarFile with modifiers "private".</code>
	<br> The fix was to change ExtractJarFile so it no longer had a private
	constructor.
      </dd>
    </dl>

    <h2>Packaging for the Mac</h2>
    Between Java 1.6, distributed by Apple, and Java 1.8, distributed by Oracle, the process for creating a Java Mac application changed.

    <h3>How the Mac apps are created</h3>
    <p><code>$PTII/bin/ptinvoke.in</code> is read by <code>$PTII/configure</code> and 
      <code>$PTII/bin/ptinvoke</code> is created.  <code>$PTII/bin/makeapp</code> is 
      a symbolic link to <code>ptinvoke</code>.  Running <code>make</code> in 
      <code>$PTII/bin</code> invokes <code>makeapp</code> and creates
      <code>$PTII/bin/Ptiny.app/</code> and <code>$PTII/bin/Vergil.app/</code>.  

    <p>Double clicking on <code>Ptiny.app</code> or <code>Vergil.app</code> invokes
      a binary listed in <code>Info.plist</code>.  The binary changed between
      Java 1.6 and 1.8.</p>

    <h3>Packaging Java for distribution on the Mac under Java 1.8</h3>

    <p>In Java 1.8, we used <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/package_for_mac.html#in_browser" target="_top"><code>http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/package_for_mac.html</code></a>, which uses the <a href="http://java.net/projects/appbundler#in_browser" target="_top">Application Bundler</a>.</p>
    
    <p>Application Bundler is GPL'd, but Oracle releases it using the
      Classpath exception.  The Application Bundler jar file
      includes <code>JavaAppLauncher</code>, which gets copied
      to <code>Contents/MacOS/</code>.  That executable processes
      the <code>Info.plist</code> file.  The
      executable substitutes <code>$APP_ROOT</code> when it is present in the 
      <code>Info.plist</code> file.</p>

    <p>The Application Bundler will include a JRE
      if <code>runtime</code> parameter is set in the build.xml file.
      We do not set <code>runtime</code>.</p>

    <p>The Application Builder wants to copy the jar files
      into <code>Contents/Java/</code>.  Instead, we
      use <code>$APP_ROOT/../..</code> to refer to the jar files.</p>

    <p>We created a temporary Ant target to create a prototype
      app directory and then modified the <code>ptinvoke.in</code>
      file to generate the proper
      <code>Info.plist</code> file.</p>

    <p><font size="2" color="#cc0000">Last Updated: $Date$</font>
  </body>
</html>
