<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="GDPBrowser" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={26, 59, 1065, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[831, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{366.3770356514085, 228.39708956866195}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="startTime" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="numberOfRecords">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 0.0]">
        </property>
    </property>
    <property name="logdname" class="ptolemy.data.expr.StringParameter" value="edu.berkeley.eecs.gdp-01.gdplogd">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, -15.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Click here to view the sensors and actuators at &#10;https://gdp.cs.berkeley.edu/redmine/projects/gdp-sensor-and-actuator-deployments/wiki">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[75.0, 65.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://gdp.cs.berkeley.edu/redmine/projects/gdp-sensor-and-actuator-deployments/wiki#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{65, 295}">
            </property>
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="2.0">
            <display name="Object spacing"/>
        </property>
        <property name="logAspectRatio" class="ptolemy.actor.parameters.DoubleRangeParameter" value="-0.18000000000000005">
            <display name="Aspect ratio"/>
        </property>
    </property>
    <property name="logname" class="ptolemy.data.expr.StringParameter" value="edu.berkeley.eecs.swarmlab.device.c098e5300003">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 5.0]">
        </property>
    </property>
    <property name="startingRecord" class="ptolemy.data.expr.Parameter" value="1">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 25.0]">
        </property>
    </property>
    <property name="numberOfRecords" class="ptolemy.data.expr.Parameter" value="9">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 45.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Click here to view the sensors and actuators at &#10;https://gdp.cs.berkeley.edu/redmine/projects/gdp-sensor-and-actuator-deployments/wiki">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-65.0, 805.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://gdp.cs.berkeley.edu/redmine/projects/gdp-sensor-and-actuator-deployments/wiki#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{65, 295}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Unfortunately, running this model requires that a number of libraries be installed.&#10;To install these packages, invoke &#10;$PTII/org/terraswarm/accessor/accessors/web/gdp/adm/gdp-setup.sh&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 400.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Plot data points from&#10;a GDP Log">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-30.0, 30.0]">
        </property>
    </property>
    <entity name="GDPLogRead" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/* Read a log. */&#10;&#10;// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Read a log from the Global Data Plane (GDP).&#10; *&#10; *  @output {string} data The data that is read from the log&#10; *&#10; *  @param {string} logname The GDP logname.  By convention, use &#10; *  a reverse fully qualified name like&#10; *  &quot;org.terraswarm.accessors.demo.MyDemoName&quot;&#10; *&#10; *  @param {string} logdname The name of the logd server.  If empty,&#10; *  then the hostname of the local machine is used.&#10; *&#10; *  @input trigger An input that triggers firing the reading of the data.&#10; *&#10; *  @input {int} recno The record number to be read.  In the GDP,&#10; *  the first record is record 1.&#10; *&#10; *  @parameter {string} debugLevel The value of the GDP debug flag.&#10; *  See gdp/README-developers.md for a complete summary.  The value is&#10; *  typically &quot;pattern=level&quot;, for example &quot;gdplogd.physlog=39&quot;.  To&#10; *  see the patterns, use the &quot;what&quot; command or strings&#10; *  $PTII/lib/libgdp* | grep '@(#)'.  Use &quot;*=40&quot; to set the debug&#10; *  level to 40 for all components. The value of level is not usually&#10; *  over 127.  Values over 100 may modify the behavior.&#10; *&#10; *  @accessor gdp/GDPLogRead&#10; *  @author Edward A. Lee, Nitesh Mor. Contributor: Christopher Brooks&#10; *  @version $$Id: GDPLogRead.js 1029 2016-10-22 19:09:50Z eal $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, console, exports, get, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var GDP = require('gdp');&#10;var handle = null;&#10;var log = null;&#10;var oldLogname = null;&#10;&#10;/** Setup the parameters and ports. */&#10;exports.setup = function() {&#10;    this.output('data', {'type': 'string'});&#10;    this.parameter('debugLevel', {'type': 'string'});&#10;    this.input('logname', {'type': 'string', 'value': 'org.terraswarm.accessors.demo.MyDemoName'});&#10;    this.input('logdname', {'type': 'string', 'value': 'edu.berkeley.eecs.gdp-01.gdplogd'});&#10;    this.input('trigger');&#10;    this.input('recno', {'type': 'int'});&#10;};&#10;&#10;/** Read a record and send the data on the output.&#10; *  Note that if the log does not exist, it will be created&#10; *  and a null will be sent.&#10; */&#10;exports.read = function() {&#10;    var recno = this.get('recno');&#10;    console.log(&quot;GDPLogRead.read(&quot; + recno + &quot;): start&quot;);&#10;    var logname = this.get('logname');&#10;    if (logname === '') {&#10;        throw new Error('The logname parameter cannot be empty.');&#10;    }&#10;    if (logname != oldLogname) {&#10;	    console.log(&quot;GDPLogRead.read(&quot; + recno + &quot;): About to call new GDP.GDP()&quot;);&#10;	    var logdname = this.get('logdname');&#10;	    log = new GDP.GDP(logname, 1, logdname);&#10;	    log.setDebugLevel(this.getParameter('debugLevel'));&#10;	    oldLogname = logname;&#10;    }&#10;    // FIXME: If recno == 0, then calling new GDP.GDP() and then trying to read results in 'ERROR: 404 not found [Berkeley:Swarm-GDP:404]'&#10;    if (recno &lt;= 0) {&#10;	    console.log(&quot;GDPLogRead.read(&quot; + recno + &quot;): recno was 0, sending nil&quot;);&#10;	    this.send('data', 'nil');&#10;    } else {&#10;	    var data = log.read(recno);&#10;	    console.log(&quot;GDPLogRead.read(&quot; + recno + &quot;): sending &quot; + data);&#10;	    this.send('data', data);&#10;    }&#10;};&#10;&#10;/** Add an input handler that will read data. */&#10;exports.initialize = function() {&#10;    oldLogname = null;&#10;    handle = this.addInputHandler('trigger', this.exports.read.bind(this));&#10;};&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/gdp/GDPLogRead.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[360.0, 145.0]">
        </property>
        <property name="debugLevel" class="ptolemy.data.expr.Parameter" value="*=10">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="logname" class="ptolemy.actor.parameters.PortParameter" value="$logname">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="logdname" class="ptolemy.actor.parameters.PortParameter" value="$logdname">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Read a log from the Global Data Plane (GDP).&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Nitesh Mor. Contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: GDPLogRead.js 1029 2016-10-22 19:09:50Z eal $$">
            </property>
            <property name="debugLevel (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value of the GDP debug flag.&#10; See gdp/README-developers.md for a complete summary.  The value is&#10; typically &quot;pattern=level&quot;, for example &quot;gdplogd.physlog=39&quot;.  To&#10; see the patterns, use the &quot;what&quot; command or strings&#10; $PTII/lib/libgdp* | grep '@(#)'.  Use &quot;*=40&quot; to set the debug&#10; level to 40 for all components. The value of level is not usually&#10; over 127.  Values over 100 may modify the behavior.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input that triggers firing the reading of the data.">
            </property>
            <property name="recno (port)" class="ptolemy.kernel.util.StringAttribute" value="The record number to be read.  In the GDP,&#10; the first record is record 1.">
            </property>
            <property name="data (port)" class="ptolemy.kernel.util.StringAttribute" value="The data that is read from the log">
            </property>
        </property>
        <port name="logname" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="logdname" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="recno" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <property name="init" class="ptolemy.actor.parameters.PortParameter" value="startingRecord">
        </property>
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[220.0, 205.0]">
        </property>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{0.1}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[50.0, 155.0]">
        </property>
    </entity>
    <entity name="JSONToToken" class="ptolemy.actor.lib.conversions.json.JSONToToken">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[526.6658630371094, 179.9976043701172]">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={368, 290, 772, 151}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[772, 107]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 245.0]">
        </property>
    </entity>
    <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[43.334136962890625, 320.0023956298828]">
        </property>
        <port name="pressure_pascals" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
    </entity>
    <entity name="Browser" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that connects with a browser on the local host.&#10;//&#10;// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor that connects with a browser on the local host.&#10; *  This is intended to be used by a swarmlet to interact with users,&#10; *  for example by providing forms to be filled in.&#10; *  For now, however, it simply displays HTML provided to its input.&#10; *&#10; *  @accessor utilities/Browser&#10; *  @input {string} html An HTML document to render in the browser.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; */&#10;var Browser = require('browser');&#10;var browser = new Browser.Browser();&#10;&#10;exports.setup = function() {&#10;    this.input('html', {'type':'string'});&#10;};&#10;&#10;function display() {&#10;	var toDisplay = this.get('html');&#10;	browser.display(toDisplay);&#10;}&#10;&#10;exports.initialize = function() {&#10;	this.addInputHandler('html', display);&#10;};&#10;&#10;exports.wrapup = function(){&#10;	browser.shutdown();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/utilities/Browser.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[690.0, 350.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that connects with a browser on the local host.&#10; This is intended to be used by a swarmlet to interact with users,&#10; for example by providing forms to be filled in.&#10; For now, however, it simply displays HTML provided to its input.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="html (port)" class="ptolemy.kernel.util.StringAttribute" value="An HTML document to render in the browser.">
            </property>
        </property>
        <port name="html" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="JavaScriptGDPToGraph2D" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Generate Vis-compatible Graph2D html from an input&#10; *&#10; *  @accessor JavaScriptGDPToGraph2D&#10; *  @input data The input data&#10; *  @output output The HTML page.&#10; *  @author Christopher Brooks&#10; *  @version $$Id: GDPLogRead.xml 75037 2016-08-11 21:29:55Z cxh $$&#10; */&#10;exports.setup = function() {&#10;    this.input('data');&#10;    this.output('output', {'type':'string'});&#10;};&#10;&#10;function isNumeric(n) {&#10;  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);&#10;}&#10;&#10;exports.generate = function() {&#10;	var dataValue = this.get('data')&#10;	console.log(&quot;JavaScriptGDPToGraph2D: &quot; + dataValue);&#10;var outputHead = '&lt;!DOCTYPE HTML&gt;\n' +&#10;'&lt;html&gt;\n' +&#10;'  &lt;head&gt;\n' +&#10;'    &lt;title&gt;Graph2d or Basic Example&lt;/title&gt;\n' +&#10;'\n' +&#10;'    &lt;style type=&quot;text/css&quot;&gt;\n' +&#10;'      body, html {\n' +&#10;'      font-family: sans-serif;\n' +&#10;'      }\n' +&#10;'    &lt;/style&gt;\n' +&#10;'\n' +&#10;'  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js&quot;&gt;&lt;/script&gt;\n' +&#10;'  &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;t\&#10;ext/css&quot; /&gt;\n' +&#10;'  &lt;/head&gt;\n' +&#10;'  &lt;body&gt;\n' +&#10;'\n' +&#10;'    &lt;div id=&quot;visualization&quot;&gt;&lt;/div&gt;\n' +&#10;'\n' +&#10;'    &lt;script type=&quot;text/javascript&quot;&gt;\n' +&#10;'      var container = document.getElementById(\'visualization\');\n' +&#10;'      var items = [\n';&#10;&#10;    var outputData = &quot;&quot;&#10;    var nowDate = new Date();&#10;    var maximumNumberLength = 1;  // The maximum length of the string rep of a number.&#10;	if (Array.isArray(dataValue)) {&#10;		for (var i = 0; i &lt; dataValue.length; i++) {&#10;			// Get the maximum length of the number for use as a precision.&#10;			if (dataValue[i].toString().length &gt; maximumNumberLength) {&#10;				maximumNumberLength = dataValue[i].toString().length;&#10;			}&#10;			var date = new Date();&#10;			date.setSeconds(nowDate.getSeconds() - dataValue.length + i);&#10;			outputData += '{x: \'' + date + '\', y: ' + dataValue[i] + '},\n';&#10;		}&#10;	} else {&#10;		 maximumNumberLength = dataValue.toString().length&#10;		 outputData = '{x: \'' + startDate + '\', y: ' + dataValue + '},\n';&#10;	}&#10;	var date = new Date();&#10;	date.setSeconds(nowDate.getSeconds() - dataValue.length);   &#10;	 &#10;var outputTail = '      ];\n' +&#10;'\n' +&#10;'      var dataset = new vis.DataSet(items);\n' +&#10;'      var options = {\n' +&#10;'          start: \'' + date + '\',\n' +&#10;'          end: \'' + nowDate + '\',\n' +&#10;'          dataAxis: {\n' +&#10;'              left: {\n' +&#10;'                  format: function (value) {\n' +&#10;'                              return \'\'+value.toPrecision(' + &#10;                                     maximumNumberLength + ');\n' +&#10;'                          }\n' +&#10;'              }\n' +&#10;'          }\n' +&#10;'      };\n' +&#10;'      var Graph2d = new vis.Graph2d(container, dataset, options);\n' +&#10;'    &lt;/script&gt;\n' +&#10;'  &lt;/body&gt;\n' +&#10;'&lt;/html&gt;\n';&#10;	//if (isNumeric(dataValue)) {&#10;		this.send('output', outputHead + outputData + outputTail);&#10;	//}&#10;}&#10;&#10;exports.initialize = function() {&#10;	handle = this.addInputHandler('data', this.exports.generate.bind(this));&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[403.3341369628906, 350.0023956298828]">
        </property>
        <property name="init" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="step" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="SequenceToArray" class="ptolemy.domains.sdf.lib.SequenceToArray">
        <property name="arrayLength" class="ptolemy.actor.parameters.PortParameter" value="numberOfRecords">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[258.3341369628906, 350.0023956298828]">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={362, 453, 772, 276}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[772, 232]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[248.33413696289062, 285.0023956298828]">
        </property>
    </entity>
    <entity name="Display3" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={365, 742, 772, 151}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[772, 107]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 275.0]">
        </property>
    </entity>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[145.0, 155.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[28.334136962890625, 260.0023956298828]">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[198.33413696289062, 340.0023956298828]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;SequenceToArray.input&quot;,x=315.0,y=385.0}, tail={id=&quot;relation7.vertex1&quot;,x=255.0,y=375.0}, points={} },{ head={id=&quot;RecordDisassembler.pressure_pascals&quot;,x=100.0,y=355.0}, tail={id=&quot;relation7.vertex1&quot;,x=255.0,y=375.0}, points={} },{ head={id=&quot;Display.input&quot;,x=305.0,y=330.0}, tail={id=&quot;relation7.vertex1&quot;,x=255.0,y=375.0}, points={255.0,330.0} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[630.0, 350.0]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Display2.input&quot;,x=675.0,y=385.0}, tail={id=&quot;relation8.vertex1&quot;,x=630.0,y=385.0}, points={} },{ head={id=&quot;Browser.html&quot;,x=690.0,y=300.0}, tail={id=&quot;relation8.vertex1&quot;,x=630.0,y=385.0}, points={630.0,300.0} },{ head={id=&quot;JavaScriptGDPToGraph2D.output&quot;,x=460.0,y=385.0}, tail={id=&quot;relation8.vertex1&quot;,x=630.0,y=385.0}, points={} } }">
        </property>
    </relation>
    <link port="GDPLogRead.trigger" relation="relation4"/>
    <link port="GDPLogRead.recno" relation="relation5"/>
    <link port="GDPLogRead.data" relation="relation"/>
    <link port="Ramp.output" relation="relation5"/>
    <link port="Ramp.trigger" relation="relation4"/>
    <link port="DiscreteClock.output" relation="relation4"/>
    <link port="JSONToToken.input" relation="relation"/>
    <link port="JSONToToken.output" relation="relation6"/>
    <link port="Display.input" relation="relation6"/>
    <link port="RecordDisassembler.input" relation="relation6"/>
    <link port="RecordDisassembler.pressure_pascals" relation="relation7"/>
    <link port="Browser.html" relation="relation8"/>
    <link port="JavaScriptGDPToGraph2D.output" relation="relation8"/>
    <link port="JavaScriptGDPToGraph2D.data" relation="relation2"/>
    <link port="SequenceToArray.input" relation="relation7"/>
    <link port="SequenceToArray.output" relation="relation2"/>
    <link port="Display2.input" relation="relation7"/>
    <link port="Display3.input" relation="relation8"/>
</entity>
