// $PTII/org/ptolemy/ptango/jettysandbox.policy
// @version: $Id: jettysandbox.policy 67769 2013-10-26 00:40:02Z cxh $
// 
// This file is used by vergil -jettysandbox to run Ptolemy web services in a secure sandbox.
//
// In theory, you can use policytool, which is shipped with the JDK
// to edit this file.  However, if you do use policytool, then
// any comments will be lost.


grant {
   // *** Ptolemy policies from sandbox.policy ***
   
   // Connect to any host on port 80 so that we can download models.
   permission java.net.SocketPermission "*:80", "connect";

   // Needed by File.getCanonicalPath(), which is called by
   // MoMLApplication.specToURL()
   permission java.util.PropertyPermission "user.dir", "read";
  
   // *** Web app policies ***
   
   // Properties generally made available to unsigned apps
   // See http://docs.oracle.com/javase/tutorial/deployment/doingMoreWithRIA/properties.html
  
   permission java.util.PropertyPermission "java.class.version", "read";
   permission java.util.PropertyPermission "java.vendor", "read";
   permission java.util.PropertyPermission "java.vendor.url", "read";
   permission java.util.PropertyPermission "java.version", "read";
   
   permission java.util.PropertyPermission "os.arch", "read";
   permission java.util.PropertyPermission "os.name", "read";
   permission java.util.PropertyPermission "os.version", "read";

   permission java.util.PropertyPermission "file.separator", "read";
   permission java.util.PropertyPermission "line.separator", "read";
   permission java.util.PropertyPermission "path.separator", "read";
  
   // *** Jetty policies required by multiple classes ***
  
   // Note that "whenever a resource access is attempted, all code traversed by 
   // the execution thread up to that point must have permission for that 
   // resource access, unless some code on the thread has been marked as 
   // "privileged."" 
   // http://docs.oracle.com/javase/7/docs/technotes/guides/security/permissions.html
  
   // Since Jetty is run as embedded in Ptolemy, any Ptolemy or Java class that 
   // calls a Jetty class will also need the same (or more) access permissions as 
   // the Jetty class 
  	  
   // Grant access to system properties for calls to System.getProperties()
   // Required by org/eclipse/jetty/util/resource/Resource line 42 which calls
   // org/eclipse/jetty/util/log/Log which calls System.getProperties() line 113
   permission java.util.PropertyPermission "*", "read,write";
   
   // Accept incoming requests from any client through any client-side port 
   // The client can use a random port for its outgoing connections; see
   // https://forums.oracle.com/forums/thread.jspa?threadID=2380009
   permission java.net.SocketPermission "*", "accept";
   
   // Allow connections only to server-side port 8078
   // Many other tools use e.g. 8080 as a test port, so pick a different port
   // to avoid conflicts 
   // Note that the security manager must be invoked with a double equals sign:
   // java -Djava.security.policy==<path to policy file> MyClass
   // to override the standard system java.policy file which grants listen 
   // access to all un-privileged ports 
   // See http://download.java.net/jdk8/docs/technotes/guides/security/PolicyFiles.html
   // http://stackoverflow.com/questions/9508150/java-securitymanager-setting-custom-policy-file
   // Required by Jetty SelectChannelConnector and called by java.lang.Thread.run  
   permission java.net.SocketPermission "*:8078", "listen, resolve";
  
   // Grant read permission to all files and subdirectories in 
   // $ptolemy.ptII.dir/org/ptolemy/ptango/demo
   // This allows the WebServer to read static content stored with the demos
   // Required by org/eclipse/jetty/util/resource/FileResource
   // ${/} is a shortcut for ${file.separator}
   // The - includes all files and subdirectories recursively
   // * would include all files in the directory but no sub-directories
   // Note that ptolemy.ptII.dir must be passed in as a Java system property on 
   // the command line, using -Dptolemy.ptII.dir=$PTII
   // Required by Jetty FileResource, calls java.io.File
   permission java.io.FilePermission "${ptolemy.ptII.dir}${/}org${/}ptolemy${/}ptango${/}demo${/}-", "read";
	
   // Grant read permission to the tmp directory and read, write and delete 
   // permission to temp directory files and subdirectories (subdirectories 
   // are created if the user chooses to copy Javascript files in actor
   // HTMLModelExporter)
   // For some reason, permission statements for both the directory and 
   // the files in it seem to be needed.  An exception is thrown otherwise.
   // Required by org.ptolemy.ptango.lib.WebServer, calls java.io.File
   permission java.io.FilePermission "${java.io.tmpdir}${/}", "read";
   permission java.io.FilePermission "${java.io.tmpdir}${/}-", "read,write,delete";

   // Grant read permission to the PythonScript.xml file
   // Required by WebServerDE model
   permission java.io.FilePermission "${ptolemy.ptII.dir}${/}lib${/}python${/}*", "read";
   permission java.io.FilePermission "${ptolemy.ptII.dir}/", "read";

   // Grant permission to call Thread.class.getDeclaredField("inheritableThreadLocals"); 
   // and the setAccessible(true) method
   // Required by Jython used by PythonScript actor in WebServerDE model
   // See http://grepcode.com/file/repo1.maven.org/maven2/org.fakereplace.fakereplace-google-collections/fakereplace-google-collections/1.0.1.Final/org/fakereplace/com/google/common/base/internal/Finalizer.java#Finalizer.getInheritableThreadLocalsField%28%29
   // lines 189-191	
   // RuntimePermission accessDeclaredMembers is required to call getDeclaredField()
   // http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getDeclaredField%28java.lang.String%29
   // http://docs.oracle.com/javase/6/docs/api/java/lang/SecurityManager.html#checkMemberAccess(java.lang.Class,%20int)
   // ReflectPermission suppressAccessChecks is required to call setAccessible() 
   // Section 3.3.3.1 Using setAccessible http://www.informit.com/articles/article.aspx?p=26872&seqNum=4
   // http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/ReflectPermission.html
   
   permission java.lang.RuntimePermission "accessDeclaredMembers";
   permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
   
   // TODO:  Figure out what permissions WebServerDE needs.  Tried these:
   //permission java.lang.RuntimePermission "accessClassInPackage.java.lang.Thread";
   //permission java.lang.RuntimePermission "accessClassInPackage.java.lang";
   
   // http://stackoverflow.com/questions/8075014/java-file-permissions-for-threads
   // permission java.lang.RuntimePermission "createClassLoader";
   // permission java.lang.RuntimePermission "getProtectionDomain";	
	
   // Required by SelectChannelConnector, called by java.lang.Thread
   permission java.lang.RuntimePermission "setContextClassLoader";
   

	// *** Optional policies ***
	
	// From Ptolemy sandbox.policy
    // Uncomment the permissions below to get access to the serial port
    // Note that you will need to substitute in the location of your jvm.
	
    //permission java.util.PropertyPermission "javax.comm.properties", "read";
    //permission java.util.PropertyPermission "java.home", "read";
    //permission java.io.FilePermission "c:/j2sdk1.4.2_03/jre/lib/javax.comm.properties", "read";
    //permission java.io.FilePermission "c:/j2sdk1.4.2_03/jre/lib/javax.comm.properties", "delete";
    //permission java.lang.RuntimePermission "loadLibrary.win32com";
    //permission java.io.FilePermission "c:/j2sdk1.4.2_03/jre/lib/ext/x86/win32com.dll", "read";
    //permission java.io.FilePermission "c:/j2sdk1.4.2_03/jre/lib/ext/win32com.dll", "read";
	
	// Enable File -> Open dialog 
	// By default, the File -> Open File menu in Ptolemy may search your user
	// home directory and the Ptolemy main directory.  This will cause an 
	// exception unless read permission is granted/
	// Uncomment the following to allow read access to the user's home directory
	// and all subdirectories, and the ptolemy.ptII.dir directory
	// permission java.util.PropertyPermission "user.home", "read";
	// permission java.io.FilePermission "${user.home}${/}-", "read"; 
	// permission java.io.FilePermission "${ptolemy.ptII.dir}", "read";
	
	// Enable file save
    // Files cannot be saved unless write permission is granted to the 
	// appropriate directory.  
	
	// In addition to the previous 3 permissions, uncomment the following to 
	// allow write permission to the user's home directory
	// permission java.io.FilePermission "${user.home}${/}-", "write"; 

	// Uncomment the following to allow write permission to the ptango 
	// demo directory and all subdirectories.  (Read permission is already
	// granted previously).
	// permission java.io.FilePermission "${ptolemy.ptII.dir}${/}org${/}ptolemy${/}ptango${/}demo${/}-","write";
		
	// Uncomment the following to allow write permission to all Ptolemy
	// subdirectories
	// permission java.io.FilePermission "${ptolemy.ptII.dir}${/}-", "read, write";
	
	// Required by the Simulator actor.  Uncomment if your model uses this actor.
	// Unfortunately this also allows the web server to start on any port 1024 
	// and above.
    // Write and delete permissions are required to the directory and 
    // subdirectories containing the model (here, assumes ptango demo)
    // Read permission is granted previously
    // permission java.net.SocketPermission "localhost:1024-", "listen, resolve";
    // permission java.io.FilePermission "${ptolemy.ptII.dir}${/}org${/}ptolemy${/}ptango${/}demo${/}-","write, delete";
};

// Permissions granted to Jetty classes, from http://wiki.eclipse.org/Jetty/Tutorial/Jetty-Policy

grant codeBase "file:${ptolemy.ptII.dir}${/}lib${/}jetty-all.8.1.5-v20120716.jar" {

   // Permissions from Jetty lib/policy/global.policy
   // Jetty originally granted these permissions globally, but not aware of 
   // non-Jetty classes that need these?  Not sure of other classes in call 
   // chain?
   
   // putProviderProperty
   // The provider properties each specify the name and location of a particular 
   // service implemented by the provider. By granting this permission, you let 
   // code replace the service specification with another one, thereby specifying 
   // a different implementation.
   // http://docs.oracle.com/javase/7/docs/technotes/guides/security/permissions.html
   
   permission java.security.SecurityPermission "putProviderProperty.SunJCE";
   permission java.util.PropertyPermission "org.eclipse.jetty.io.nio.JVMBUG_THRESHHOLD", "read, write";

   // "standard" properties that can be read by anyone
   permission java.util.PropertyPermission "entityExpansionLimit", "read";
   permission java.util.PropertyPermission "elementAttributeLimit", "read";
   permission java.util.PropertyPermission "maxOccurLimit", "read";
   
   // Permissions from lib/policy/jetty.policy
	 
   permission java.lang.RuntimePermission "getClassLoader";
	 
   permission java.util.PropertyPermission "org.eclipse.jetty.webapp.WebAppClassLoader.extensions", "read";
   permission java.util.PropertyPermission "org.eclipse.jetty.ajp.PathMap.separators", "read";
 
   permission java.util.PropertyPermission "ROLLOVERFILE_BACKUP_FORMAT", "read";
	 
   permission java.util.PropertyPermission "org.eclipse.jetty.server.webapp.parentLoaderPriority", "read";
   permission java.util.PropertyPermission "org.eclipse.jetty.server.Request.maxFormContentSize", "read";
	 
   permission javax.security.auth.AuthPermission "modifyPrincipals";	 
   permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
   permission javax.security.auth.AuthPermission "setReadOnly";
     
   permission java.lang.RuntimePermission "createClassLoader";
     
   permission java.security.SecurityPermission "getPolicy";
   permission java.lang.RuntimePermission "accessDeclaredMembers";
     
   // jetty specific properties
   permission java.util.PropertyPermission "org.eclipse.jetty.util.log.class", "read";
   permission java.util.PropertyPermission "org.eclipse.jetty.util.log.stderr.DEBUG", "read";
   permission java.util.PropertyPermission "org.eclipse.jetty.util.log.DEBUG", "read";
   permission java.util.PropertyPermission "START", "read";
   permission java.util.PropertyPermission "STOP.PORT", "read";
   permission java.util.PropertyPermission "STOP.KEY", "read";
   permission java.util.PropertyPermission "org.eclipse.jetty.util.log.IGNORED", "read";      
   permission java.util.PropertyPermission "CLASSPATH", "read";
   permission java.util.PropertyPermission "OPTIONS", "read";
   permission java.util.PropertyPermission "JETTY_NO_SHUTDOWN_HOOK", "read";
   permission java.util.PropertyPermission "ISO_8859_1", "read";
   
   permission java.util.PropertyPermission "java.class.path", "read";
     
   permission java.util.PropertyPermission "org.eclipse.jetty.util.log.stderr.class", "read";
   		
   permission java.util.PropertyPermission "org.eclipse.jetty.util.URI.charset", "read";
   		
   permission java.util.PropertyPermission "org.eclipse.jetty.util.FileResource.checkAliases", "read";
   		
   permission java.util.PropertyPermission "org.eclipse.jetty.xml.XmlParser.Validating", "read";
   		
   permission java.util.PropertyPermission "org.eclipse.jetty.io.nio.JVMBUG_THRESHHOLD", "read, write";
    
   permission java.util.PropertyPermission "org.eclipse.jetty.util.TypeUtil.IntegerCacheSize", "read, write";
       
   permission java.util.PropertyPermission "org.eclipse.jetty.util.TypeUtil.LongCacheSize", "read";
       
   permission java.util.PropertyPermission "org.eclipse.jetty.io.AbstractBuffer.boundsChecking", "read";
              
              
   // Allows any thread to stop itself using the java.lang.Thread.stop()
   // method that takes no argument.
   permission java.lang.RuntimePermission "stopThread";    
   
    // jsp support   
   permission java.net.SocketPermission "java.sun.com:80", "connect,resolve";
   
};