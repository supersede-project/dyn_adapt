package eu.supersede.dynadapt.modelrepository.repositoryaccess;

import java.io.File;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.mwe.utils.StandaloneSetup;

import eu.supersede.dynadapt.aom.dsl.parser.AdaptationParser;
import eu.supersede.dynadapt.aom.dsl.parser.IAdaptationParser;
import eu.supersede.dynadapt.dsl.aspect.Aspect;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'zavala' at '9/23/16 12:26 PM' with Gradle 2.14.1
 *
 * @author zavala, @date 9/23/16 12:26 PM
 */
public class ModelRepository {

	private String location;
	private Map<String, String> models;

	public ModelRepository(String location, Map<String, String> models) {
		super();
		this.location = location;
		this.models = models;
	}

	/**
	 * This method returns a list of aspect models linked to an specific
	 * featureSUPERSEDE given the featureSUPERSEDE id
	 * 
	 * @param featureSUPERSEDEId
	 */
	public List<Aspect> getAspectModels(String featureSUPERSEDEId) {
		List<Aspect> aspects = new ArrayList<Aspect>();

		/* Only the names could be retrieved */
		File[] aspectsFiles = lookForAspects(featureSUPERSEDEId);
		/*
		 * Models required for loading an aspect model should be provided, if
		 * not, only the URI of the aspect models can be provided.
		 */
		if (aspectsFiles != null) {
			for (int i = 0; i < aspectsFiles.length; i++) {
				aspects.add(getAspectModel(
						location + models.get("aspects") + featureSUPERSEDEId + "/" + aspectsFiles[i].getName(),
						location + models.get("advices") + featureSUPERSEDEId + ".uml",
						location + models.get("profiles"), location + models.get("patterns"),
						location + models.get("featureconfigmodels")));
			}
		}
		return aspects;
	}

	public List<URI> getAspectModelsURIs(String featureSUPERSEDEId) {
		List<URI> aspectsURIs = new ArrayList<URI>();

		File[] aspectsFiles = lookForAspects(featureSUPERSEDEId);

		if (aspectsFiles != null) {
			for (int i = 0; i < aspectsFiles.length; i++) {
				/*
				 * Models are placed into the project, non-hard coded URI should
				 * be retrieved when external model repository is considered
				 */
				aspectsURIs.add(URI.createURI(
						location + models.get("aspects") + featureSUPERSEDEId + "/" + aspectsFiles[i].getName()));
			}
		}
		return aspectsURIs;
	}

	private File[] lookForAspects(String featureSUPERSEDEId) {
		/*
		 * Location folder (models/) is into the build path. This method should
		 * be improved when external model repositories are considered
		 */
		URL url = getClass().getResource("/" + models.get("aspects") + featureSUPERSEDEId);
		File[] files = null;
		File folder = null;

		try {
			folder = new File(url.toURI());
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		return files = folder.listFiles();
	}

	private Aspect getAspectModel(String aspectModelPath, String umlModelPath, String profileModelPath,
			String patternResourcePath, String featureResourcePath) {

		IAdaptationParser parser = new AdaptationParser();

		new StandaloneSetup().setPlatformUri("../");

		URI aspectModelURI = URI.createURI(aspectModelPath);

		parser.loadUMLResource(URI.createURI(umlModelPath));
		parser.loadProfileResource(URI.createURI(profileModelPath));
		parser.loadPatternResource(URI.createURI(patternResourcePath));
		parser.loadFeatureResource(URI.createURI(featureResourcePath));

		Aspect adaptation = parser.parseAdaptationModel(aspectModelURI);

		return adaptation;
	}

}
