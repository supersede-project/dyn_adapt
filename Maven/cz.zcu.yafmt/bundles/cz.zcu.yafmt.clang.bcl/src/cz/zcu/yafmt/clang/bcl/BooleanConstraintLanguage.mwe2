module cz.zcu.yafmt.clang.GenerateBooleanConstraintLanguage

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/cz/zcu/yafmt/clang/bcl/BooleanConstraintLanguage.xtext"
var fileExtension = "bcl"
var projectName = "cz.zcu.yafmt.clang.bcl"
var runtimeProject = "../${projectName}"

Workflow {
    
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        // Specify new genmodel location since we have changed it in EcoreGeneratorFragment.
        registerGenModelFile = "${runtimeProject}/model/BooleanConstraintLanguage.genmodel"
    }
    
    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }
           
    component = Generator {
        
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        
        language = {
            
            uri = grammarURI
            fileExtensions = fileExtension

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment {
                xmiModelDirectory = "${runtimeProject}/model" // Where .ecore and .genmodel file will be placed.
                javaModelDirectory = "${runtimeProject}/src" // Where generated source code will be placed.
                skipGenerate = true // Do not rewrite generated java classes (they contain modifications).
            }

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment {}

            // Serializer 2.0
            fragment = serializer.SerializerFragment {
            	generateStub = false
            }
            
            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

        }
        
    }
    
}
